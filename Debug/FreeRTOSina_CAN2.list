
FreeRTOSina_CAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a268  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800a468  0800a468  0001a468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a92c  0800a92c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a92c  0800a92c  0001a92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a934  0800a934  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a938  0800a938  0001a938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a93c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001e0  0800ab1c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  0800ab1c  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014879  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad0  00000000  00000000  00034a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00037558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00038550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a33d  00000000  00000000  00039420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014278  00000000  00000000  0006375d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001015df  00000000  00000000  000779d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178fb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005610  00000000  00000000  00179004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a450 	.word	0x0800a450

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800a450 	.word	0x0800a450

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <comm_can_transmit_eid>:
extern TxMailbox;
extern huart2;
extern hcan1;


void comm_can_transmit_eid(uint32_t id, const uint8_t *data, uint8_t len) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	4613      	mov	r3, r2
 80009e8:	71fb      	strb	r3, [r7, #7]

	uint8_t i=0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (len > 8) {
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d901      	bls.n	80009fa <comm_can_transmit_eid+0x1e>
			len = 8;
 80009f6:	2308      	movs	r3, #8
 80009f8:	71fb      	strb	r3, [r7, #7]
	}

	CAN_TxHeaderTypeDef TxMessage;
	TxMessage.StdId = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
	TxMessage.IDE = CAN_ID_EXT;
 80009fe:	2304      	movs	r3, #4
 8000a00:	61fb      	str	r3, [r7, #28]
	TxMessage.ExtId = id;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	61bb      	str	r3, [r7, #24]
	TxMessage.RTR = CAN_RTR_DATA;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
	TxMessage.DLC = len;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
	//memcpy(txmsg.data8, data, len);
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000a0e:	bf00      	nop
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <comm_can_transmit_eid+0x58>)
 8000a12:	f001 fb48 	bl	80020a6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0f9      	beq.n	8000a10 <comm_can_transmit_eid+0x34>
	HAL_CAN_AddTxMessage(&hcan1, &TxMessage, data, &TxMailbox);
 8000a1c:	f107 0114 	add.w	r1, r7, #20
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <comm_can_transmit_eid+0x5c>)
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <comm_can_transmit_eid+0x58>)
 8000a26:	f001 fa6e 	bl	8001f06 <HAL_CAN_AddTxMessage>

}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001fc 	.word	0x200001fc
 8000a38:	20000224 	.word	0x20000224

08000a3c <buffer_append_int32>:

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
//	buffer[(*index)++] = (temp & 0xF0) >> 4 | (temp & 0x0F) << 4;
//	temp = number >> 8;
//	buffer[(*index)++] = (temp & 0xF0) >> 4 | (temp & 0x0F) << 4;
//	temp = number;
//	buffer[(*index)++] = (temp & 0xF0) >> 4 | (temp & 0x0F) << 4;
		buffer[(*index)++] = number >> 24;
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1618      	asrs	r0, r3, #24
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1c59      	adds	r1, r3, #1
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6011      	str	r1, [r2, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2c2      	uxtb	r2, r0
 8000a5e:	701a      	strb	r2, [r3, #0]

		buffer[(*index)++] = number >> 16;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1418      	asrs	r0, r3, #16
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1c59      	adds	r1, r3, #1
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6011      	str	r1, [r2, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	b2c2      	uxtb	r2, r0
 8000a76:	701a      	strb	r2, [r3, #0]

		buffer[(*index)++] = number >> 8;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1218      	asrs	r0, r3, #8
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	1c59      	adds	r1, r3, #1
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	6011      	str	r1, [r2, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b2c2      	uxtb	r2, r0
 8000a8e:	701a      	strb	r2, [r3, #0]

		buffer[(*index)++] = number;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1c59      	adds	r1, r3, #1
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	6011      	str	r1, [r2, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	701a      	strb	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <buffer_append_int16>:

void buffer_append_int16(uint8_t* buffer, int16_t number, int16_t *index) {
 8000ab2:	b480      	push	{r7}
 8000ab4:	b085      	sub	sp, #20
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	460b      	mov	r3, r1
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	817b      	strh	r3, [r7, #10]
//	int32_t temp = 0;
//	temp = number >> 8;
//	buffer[(*index)++] = (temp & 0xF0) >> 4 | (temp & 0x0F) << 4;
//	temp = number;
//	buffer[(*index)++] = (temp & 0xF0) >> 4 | (temp & 0x0F) << 4;
	buffer[(*index)++] = number >> 8;
 8000ac0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ac4:	121b      	asrs	r3, r3, #8
 8000ac6:	b219      	sxth	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ace:	b293      	uxth	r3, r2
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b218      	sxth	r0, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	8018      	strh	r0, [r3, #0]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4413      	add	r3, r2
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ae8:	b293      	uxth	r3, r2
 8000aea:	3301      	adds	r3, #1
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	b219      	sxth	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	8019      	strh	r1, [r3, #0]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	897a      	ldrh	r2, [r7, #10]
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	701a      	strb	r2, [r3, #0]

}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <comm_can_set_pos>:

void comm_can_set_pos(uint8_t controller_id, float pos) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	ed87 0a00 	vstr	s0, [r7]
 8000b18:	71fb      	strb	r3, [r7, #7]

	int32_t send_index = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];

	buffer_append_int32(buffer, (int32_t)(pos * 10000), &send_index);
 8000b1e:	edd7 7a00 	vldr	s15, [r7]
 8000b22:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000b5c <comm_can_set_pos+0x50>
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b2e:	f107 020c 	add.w	r2, r7, #12
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	ee17 1a90 	vmov	r1, s15
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff7e 	bl	8000a3c <buffer_append_int32>
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS << 8), buffer, send_index);
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	f107 0108 	add.w	r1, r7, #8
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff44 	bl	80009dc <comm_can_transmit_eid>
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	461c4000 	.word	0x461c4000

08000b60 <comm_can_set_pos_spd>:

void comm_can_set_pos_spd(uint8_t controller_id, float pos,int16_t spd, int16_t RPA ) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	81bb      	strh	r3, [r7, #12]
 8000b72:	4613      	mov	r3, r2
 8000b74:	80fb      	strh	r3, [r7, #6]

	int32_t send_index = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
	int16_t send_index1 = 4;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	837b      	strh	r3, [r7, #26]

//	int cnt = 0;

	uint8_t buffer[8] = {0};
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]

	buffer_append_int32(buffer, (int32_t)(pos * 10000), &send_index);
 8000b86:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b8a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000c1c <comm_can_set_pos_spd+0xbc>
 8000b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b96:	f107 021c 	add.w	r2, r7, #28
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	ee17 1a90 	vmov	r1, s15
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff4a 	bl	8000a3c <buffer_append_int32>
	buffer_append_int16(buffer,(int16_t)spd/10.0, &send_index1);
 8000ba8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bb4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000bb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bbc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bc0:	ee17 3a90 	vmov	r3, s15
 8000bc4:	b219      	sxth	r1, r3
 8000bc6:	f107 021a 	add.w	r2, r7, #26
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff6f 	bl	8000ab2 <buffer_append_int16>
	buffer_append_int16(buffer,(int16_t) RPA/10.0, &send_index1);
 8000bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000be0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000be4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000be8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bec:	ee17 3a90 	vmov	r3, s15
 8000bf0:	b219      	sxth	r1, r3
 8000bf2:	f107 021a 	add.w	r2, r7, #26
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff59 	bl	8000ab2 <buffer_append_int16>
//	    {
//	        cnt = buffer[i];
//	        buffer[i] = buffer[j];
//	        buffer[j] = cnt;
//	    }
	comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS_SPD << 8), buffer, 8);
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000c06:	f107 0110 	add.w	r1, r7, #16
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fee5 	bl	80009dc <comm_can_transmit_eid>
}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	461c4000 	.word	0x461c4000

08000c20 <comm_can_set_origin>:

void comm_can_set_origin(uint8_t controller_id, uint8_t set_origin_mode) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	460a      	mov	r2, r1
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	71bb      	strb	r3, [r7, #6]
	int32_t send_index = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
	uint8_t buffer;

	buffer = set_origin_mode;
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	72fb      	strb	r3, [r7, #11]

	comm_can_transmit_eid(controller_id |((uint32_t) CAN_PACKET_SET_ORIGIN_HERE << 8), &buffer, send_index);
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	f107 010b 	add.w	r1, r7, #11
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fec8 	bl	80009dc <comm_can_transmit_eid>
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <motor_receive>:
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
	comm_can_transmit_eid(controller_id |((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
}

void motor_receive(MotorValues_t* motor, uint8_t dataReceived[8], uint32_t frameId)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	int16_t pos_int = (dataReceived[0] << 8) | dataReceived[1];
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	82fb      	strh	r3, [r7, #22]
	int16_t spd_int = (dataReceived[2] << 8) | dataReceived[3];
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3302      	adds	r3, #2
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	3303      	adds	r3, #3
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	82bb      	strh	r3, [r7, #20]
	int16_t cur_int = (dataReceived[4] << 8) | dataReceived[5];
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3305      	adds	r3, #5
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	827b      	strh	r3, [r7, #18]
	motor->position= (float)( pos_int * 0.1f); // Motor Position
 8000ca0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000d24 <motor_receive+0xd0>
 8000cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	edc3 7a00 	vstr	s15, [r3]
	motor->speed= (float)( spd_int * 10.0f);// Motor Speed
 8000cba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	edc3 7a01 	vstr	s15, [r3, #4]
	motor->current= (float) ( cur_int * 0.01f);// Motor Current
 8000cd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000d28 <motor_receive+0xd4>
 8000ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	edc3 7a02 	vstr	s15, [r3, #8]
	motor->temperature= dataReceived[6] ;// Motor Temperature
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	60da      	str	r2, [r3, #12]
	motor->error= dataReceived[7] ;// Motor Error Code
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3307      	adds	r3, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	611a      	str	r2, [r3, #16]
	motor->id = frameId;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	751a      	strb	r2, [r3, #20]
	motor->receiveId = motor->id + 0x2300;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	7d1a      	ldrb	r2, [r3, #20]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	755a      	strb	r2, [r3, #21]
}
 8000d16:	bf00      	nop
 8000d18:	371c      	adds	r7, #28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	3dcccccd 	.word	0x3dcccccd
 8000d28:	3c23d70a 	.word	0x3c23d70a

08000d2c <motorInit>:

void motorInit(MotorValues_t motor, uint8_t idEntered){
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	b490      	push	{r4, r7}
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	f107 0408 	add.w	r4, r7, #8
 8000d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motor.id = idEntered;
 8000d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d3e:	773b      	strb	r3, [r7, #28]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc90      	pop	{r4, r7}
 8000d46:	b004      	add	sp, #16
 8000d48:	4770      	bx	lr
	...

08000d4c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d54:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <MX_CAN1_Init+0xa8>)
 8000d56:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d6c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000d70:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d78:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d9e:	4814      	ldr	r0, [pc, #80]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000da0:	f000 fe3c 	bl	8001a1c <HAL_CAN_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000daa:	f000 faff 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_CAN1_Init+0xa4>)
 8000dd8:	f000 ff1c 	bl	8001c14 <HAL_CAN_ConfigFilter>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_CAN1_Init+0x9a>
  {
  Error_Handler();
 8000de2:	f000 fae3 	bl	80013ac <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001fc 	.word	0x200001fc
 8000df4:	40006400 	.word	0x40006400

08000df8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_CAN_MspInit+0x9c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d137      	bne.n	8000e8a <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <HAL_CAN_MspInit+0xa0>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_CAN_MspInit+0xa0>)
 8000e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_CAN_MspInit+0xa0>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_CAN_MspInit+0xa0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <HAL_CAN_MspInit+0xa0>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_CAN_MspInit+0xa0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e5a:	2309      	movs	r3, #9
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e66:	f001 fe55 	bl	8002b14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2014      	movs	r0, #20
 8000e70:	f001 fd87 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e74:	2014      	movs	r0, #20
 8000e76:	f001 fda0 	bl	80029ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2016      	movs	r0, #22
 8000e80:	f001 fd7f 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e84:	2016      	movs	r0, #22
 8000e86:	f001 fd98 	bl	80029ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40006400 	.word	0x40006400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b83      	ldr	r3, [pc, #524]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a82      	ldr	r2, [pc, #520]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	4b7d      	ldr	r3, [pc, #500]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a7c      	ldr	r2, [pc, #496]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b7a      	ldr	r3, [pc, #488]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b77      	ldr	r3, [pc, #476]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a76      	ldr	r2, [pc, #472]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b74      	ldr	r3, [pc, #464]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b71      	ldr	r3, [pc, #452]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a70      	ldr	r2, [pc, #448]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b6e      	ldr	r3, [pc, #440]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	4b6b      	ldr	r3, [pc, #428]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a6a      	ldr	r2, [pc, #424]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2e:	4b65      	ldr	r3, [pc, #404]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a64      	ldr	r2, [pc, #400]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <MX_GPIO_Init+0x224>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f4c:	485e      	ldr	r0, [pc, #376]	; (80010c8 <MX_GPIO_Init+0x228>)
 8000f4e:	f001 ff8d 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	485d      	ldr	r0, [pc, #372]	; (80010cc <MX_GPIO_Init+0x22c>)
 8000f58:	f001 ff88 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4857      	ldr	r0, [pc, #348]	; (80010d0 <MX_GPIO_Init+0x230>)
 8000f74:	f001 fdce 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f78:	2332      	movs	r3, #50	; 0x32
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f88:	230b      	movs	r3, #11
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	484f      	ldr	r0, [pc, #316]	; (80010d0 <MX_GPIO_Init+0x230>)
 8000f94:	f001 fdbe 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f98:	2386      	movs	r3, #134	; 0x86
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa8:	230b      	movs	r3, #11
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4848      	ldr	r0, [pc, #288]	; (80010d4 <MX_GPIO_Init+0x234>)
 8000fb4:	f001 fdae 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fb8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	483d      	ldr	r0, [pc, #244]	; (80010c8 <MX_GPIO_Init+0x228>)
 8000fd2:	f001 fd9f 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe8:	230b      	movs	r3, #11
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4835      	ldr	r0, [pc, #212]	; (80010c8 <MX_GPIO_Init+0x228>)
 8000ff4:	f001 fd8e 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ff8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800100a:	2307      	movs	r3, #7
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4830      	ldr	r0, [pc, #192]	; (80010d8 <MX_GPIO_Init+0x238>)
 8001016:	f001 fd7d 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800101a:	2340      	movs	r3, #64	; 0x40
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4826      	ldr	r0, [pc, #152]	; (80010cc <MX_GPIO_Init+0x22c>)
 8001032:	f001 fd6f 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4820      	ldr	r0, [pc, #128]	; (80010cc <MX_GPIO_Init+0x22c>)
 800104a:	f001 fd63 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800104e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001060:	230a      	movs	r3, #10
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	481a      	ldr	r0, [pc, #104]	; (80010d4 <MX_GPIO_Init+0x234>)
 800106c:	f001 fd52 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_GPIO_Init+0x234>)
 8001086:	f001 fd45 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800108a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109c:	230b      	movs	r3, #11
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <MX_GPIO_Init+0x22c>)
 80010a8:	f001 fd34 	bl	8002b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2028      	movs	r0, #40	; 0x28
 80010b2:	f001 fc66 	bl	8002982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010b6:	2028      	movs	r0, #40	; 0x28
 80010b8:	f001 fc7f 	bl	80029ba <HAL_NVIC_EnableIRQ>

}
 80010bc:	bf00      	nop
 80010be:	3730      	adds	r7, #48	; 0x30
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020c00 	.word	0x40020c00

080010dc <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f001 f810 	bl	8002110 <HAL_CAN_GetRxMessage>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d121      	bne.n	800113a <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
    {
	  if(RxHeader.StdId == RMD_Actuator.id){
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80010fc:	7d12      	ldrb	r2, [r2, #20]
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11b      	bne.n	800113a <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
		motor_receive(&RMD_Actuator, RxData, RxHeader.StdId);
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	490e      	ldr	r1, [pc, #56]	; (8001144 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800110c:	f7ff fda2 	bl	8000c54 <motor_receive>
//		sprintf(trans_str, "ID: %d Current: %f Speed: %f Position: %f Temperature: %d \r\n ", RMD_Actuator.id, RMD_Actuator.current, RMD_Actuator.speed, RMD_Actuator.position, RMD_Actuator.temperature);
		sprintf(trans_str, "%f \r\n ", RMD_Actuator.position);
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111a:	ec53 2b17 	vmov	r2, r3, d7
 800111e:	490c      	ldr	r1, [pc, #48]	; (8001150 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001122:	f005 fc7b 	bl	8006a1c <siprintf>
		HAL_UART_Transmit_IT(&huart2, trans_str, strlen(trans_str));
 8001126:	480b      	ldr	r0, [pc, #44]	; (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001128:	f7ff f88a 	bl	8000240 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001136:	f003 fd09 	bl	8004b4c <HAL_UART_Transmit_IT>
	  	  }
    }
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000260 	.word	0x20000260
 8001148:	2000022c 	.word	0x2000022c
 800114c:	20000248 	.word	0x20000248
 8001150:	0800a468 	.word	0x0800a468
 8001154:	2000026c 	.word	0x2000026c
 8001158:	20000324 	.word	0x20000324

0800115c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
//    uint32_t er = HAL_CAN_GetError(hcan);
//    sprintf(trans_str,"ER CAN %lu %08lX\n", er, er);
//    HAL_UART_Transmit(&huart2, (uint8_t*)trans_str, strlen(trans_str), 100);
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d108      	bne.n	8001194 <HAL_TIM_PeriodElapsedCallback+0x24>
        {
        		buttonIsPressed = 0;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

        		HAL_TIM_Base_Stop_IT(&htim1);
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800118a:	f003 f86b 	bl	8004264 <HAL_TIM_Base_Stop_IT>
        		TIM1->CNT = 0;
 800118e:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
        }
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40010000 	.word	0x40010000
 80011a0:	200002d0 	.word	0x200002d0
 80011a4:	200002d8 	.word	0x200002d8

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ae:	f000 fbb4 	bl	800191a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b2:	f000 f845 	bl	8001240 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <main+0x88>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f06f 0201 	mvn.w	r2, #1
 80011be:	611a      	str	r2, [r3, #16]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f7ff fe6e 	bl	8000ea0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80011c4:	f7ff fdc2 	bl	8000d4c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80011c8:	f000 fac6 	bl	8001758 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011cc:	f000 fa4a 	bl	8001664 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Stop(&hcan1);
 80011d0:	4818      	ldr	r0, [pc, #96]	; (8001234 <main+0x8c>)
 80011d2:	f000 fe4f 	bl	8001e74 <HAL_CAN_Stop>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);
 80011d6:	f648 4102 	movw	r1, #35842	; 0x8c02
 80011da:	4816      	ldr	r0, [pc, #88]	; (8001234 <main+0x8c>)
 80011dc:	f001 f8aa 	bl	8002334 <HAL_CAN_ActivateNotification>

  RxData[8] = '\n';
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <main+0x90>)
 80011e2:	220a      	movs	r2, #10
 80011e4:	721a      	strb	r2, [r3, #8]

  HAL_CAN_Start(&hcan1);
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <main+0x8c>)
 80011e8:	f000 fe00 	bl	8001dec <HAL_CAN_Start>

  motorInit(RMD_Actuator, 0);
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <main+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	9202      	str	r2, [sp, #8]
 80011f2:	466c      	mov	r4, sp
 80011f4:	f103 0210 	add.w	r2, r3, #16
 80011f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fc:	e884 0003 	stmia.w	r4, {r0, r1}
 8001200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001202:	f7ff fd93 	bl	8000d2c <motorInit>
  comm_can_set_origin(RMD_Actuator.id, 1);
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <main+0x94>)
 8001208:	7d1b      	ldrb	r3, [r3, #20]
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fd07 	bl	8000c20 <comm_can_set_origin>
  HAL_Delay(100);
 8001212:	2064      	movs	r0, #100	; 0x64
 8001214:	f000 fbde 	bl	80019d4 <HAL_Delay>
  comm_can_set_pos(RMD_Actuator.id, 5);
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <main+0x94>)
 800121a:	7d1b      	ldrb	r3, [r3, #20]
 800121c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fc73 	bl	8000b0c <comm_can_set_pos>
//  for (uint32_t i = 0; i < TABLE_SAMPLING; i++){
//	  sinTable[i] = round((sin(ConvertDegreesToRadians(a)) + 1.0) * 180.0);
//	  a += (360.0 / (TABLE_SAMPLING * 1.0));
//  }

  HAL_Delay(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f000 fbd4 	bl	80019d4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800122c:	e7fe      	b.n	800122c <main+0x84>
 800122e:	bf00      	nop
 8001230:	200002d8 	.word	0x200002d8
 8001234:	200001fc 	.word	0x200001fc
 8001238:	20000260 	.word	0x20000260
 800123c:	20000248 	.word	0x20000248

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	; 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	2234      	movs	r2, #52	; 0x34
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fd8e 	bl	8005d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <SystemClock_Config+0xb0>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <SystemClock_Config+0xb0>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <SystemClock_Config+0xb0>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <SystemClock_Config+0xb4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <SystemClock_Config+0xb4>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <SystemClock_Config+0xb4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001298:	2302      	movs	r3, #2
 800129a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a0:	2310      	movs	r3, #16
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fe0f 	bl	8002ed0 <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80012b8:	f000 f878 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	230f      	movs	r3, #15
 80012be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 f8a8 	bl	800342c <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012e2:	f000 f863 	bl	80013ac <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	; 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000

080012f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]

	if((GPIO_Pin == GPIO_PIN_13) && !buttonIsPressed && !isStoped) {
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001308:	d123      	bne.n	8001352 <HAL_GPIO_EXTI_Callback+0x5a>
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <HAL_GPIO_EXTI_Callback+0x98>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f083 0301 	eor.w	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d01c      	beq.n	8001352 <HAL_GPIO_EXTI_Callback+0x5a>
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_GPIO_EXTI_Callback+0x9c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d015      	beq.n	8001352 <HAL_GPIO_EXTI_Callback+0x5a>
	HAL_TIM_Base_Start_IT(&htim1);
 8001326:	481c      	ldr	r0, [pc, #112]	; (8001398 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001328:	f002 ff24 	bl	8004174 <HAL_TIM_Base_Start_IT>
	buttonIsPressed = 1;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_GPIO_EXTI_Callback+0x98>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]

	runParam = 2;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001334:	2202      	movs	r2, #2
 8001336:	601a      	str	r2, [r3, #0]
	comm_can_set_pos_spd(RMD_Actuator.id, 0, 50000, 20000);
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800133a:	7d1b      	ldrb	r3, [r3, #20]
 800133c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001340:	4918      	ldr	r1, [pc, #96]	; (80013a4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001342:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80013a8 <HAL_GPIO_EXTI_Callback+0xb0>
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fc0a 	bl	8000b60 <comm_can_set_pos_spd>
	isStoped = true;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_GPIO_EXTI_Callback+0x9c>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
	}

	if((GPIO_Pin == GPIO_PIN_13) && !buttonIsPressed && isStoped) {
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001358:	d116      	bne.n	8001388 <HAL_GPIO_EXTI_Callback+0x90>
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_GPIO_EXTI_Callback+0x98>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f083 0301 	eor.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00f      	beq.n	8001388 <HAL_GPIO_EXTI_Callback+0x90>
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_GPIO_EXTI_Callback+0x9c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <HAL_GPIO_EXTI_Callback+0x90>
		HAL_TIM_Base_Start_IT(&htim1);
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001372:	f002 feff 	bl	8004174 <HAL_TIM_Base_Start_IT>
		buttonIsPressed = 1;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_GPIO_EXTI_Callback+0x98>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]

		runParam = 0;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_GPIO_EXTI_Callback+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

		isStoped = false;
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
	}
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200002d0 	.word	0x200002d0
 8001394:	200002d1 	.word	0x200002d1
 8001398:	200002d8 	.word	0x200002d8
 800139c:	20000228 	.word	0x20000228
 80013a0:	20000248 	.word	0x20000248
 80013a4:	ffffc350 	.word	0xffffc350
 80013a8:	00000000 	.word	0x00000000

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x44>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_MspInit+0x44>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_MspInit+0x44>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x44>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x44>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x44>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 faa2 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <CAN1_RX0_IRQHandler+0x10>)
 800145a:	f000 ff91 	bl	8002380 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200001fc 	.word	0x200001fc

08001468 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <CAN1_SCE_IRQHandler+0x10>)
 800146e:	f000 ff87 	bl	8002380 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001fc 	.word	0x200001fc

0800147c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001482:	f002 ff1e 	bl	80042c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200002d8 	.word	0x200002d8

08001490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <USART2_IRQHandler+0x10>)
 8001496:	f003 fbb7 	bl	8004c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000324 	.word	0x20000324

080014a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80014a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014ac:	f001 fcf8 	bl	8002ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return 1;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_kill>:

int _kill(int pid, int sig)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ce:	f004 fc25 	bl	8005d1c <__errno>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2216      	movs	r2, #22
 80014d6:	601a      	str	r2, [r3, #0]
  return -1;
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_exit>:

void _exit (int status)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffe7 	bl	80014c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014f6:	e7fe      	b.n	80014f6 <_exit+0x12>

080014f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00a      	b.n	8001520 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800150a:	f3af 8000 	nop.w
 800150e:	4601      	mov	r1, r0
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf0      	blt.n	800150a <_read+0x12>
  }

  return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e009      	b.n	8001558 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf1      	blt.n	8001544 <_write+0x12>
  }
  return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_close>:

int _close(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001592:	605a      	str	r2, [r3, #4]
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_isatty>:

int _isatty(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f004 fb8a 	bl	8005d1c <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20080000 	.word	0x20080000
 8001634:	00000400 	.word	0x00000400
 8001638:	200002d4 	.word	0x200002d4
 800163c:	200003c0 	.word	0x200003c0

08001640 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <MX_TIM1_Init+0xa0>)
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <MX_TIM1_Init+0xa4>)
 8001686:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_TIM1_Init+0xa0>)
 800168a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800168e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_TIM1_Init+0xa0>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_TIM1_Init+0xa0>)
 8001698:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800169c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_TIM1_Init+0xa0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_TIM1_Init+0xa0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_TIM1_Init+0xa0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016b0:	4814      	ldr	r0, [pc, #80]	; (8001704 <MX_TIM1_Init+0xa0>)
 80016b2:	f002 fd07 	bl	80040c4 <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80016bc:	f7ff fe76 	bl	80013ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	4619      	mov	r1, r3
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_TIM1_Init+0xa0>)
 80016ce:	f002 ff17 	bl	8004500 <HAL_TIM_ConfigClockSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80016d8:	f7ff fe68 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_TIM1_Init+0xa0>)
 80016ee:	f003 f933 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016f8:	f7ff fe58 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002d8 	.word	0x200002d8
 8001708:	40010000 	.word	0x40010000

0800170c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <HAL_TIM_Base_MspInit+0x44>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d113      	bne.n	8001746 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_TIM_Base_MspInit+0x48>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <HAL_TIM_Base_MspInit+0x48>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_TIM_Base_MspInit+0x48>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2019      	movs	r0, #25
 800173c:	f001 f921 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001740:	2019      	movs	r0, #25
 8001742:	f001 f93a 	bl	80029ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40010000 	.word	0x40010000
 8001754:	40023800 	.word	0x40023800

08001758 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <MX_USART2_UART_Init+0x5c>)
 8001760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800179c:	f003 f988 	bl	8004ab0 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017a6:	f7ff fe01 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000324 	.word	0x20000324
 80017b4:	40004400 	.word	0x40004400

080017b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0ae      	sub	sp, #184	; 0xb8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2290      	movs	r2, #144	; 0x90
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 fac9 	bl	8005d70 <memset>
  if(uartHandle->Instance==USART2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a35      	ldr	r2, [pc, #212]	; (80018b8 <HAL_UART_MspInit+0x100>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d163      	bne.n	80018b0 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 f83d 	bl	8003874 <HAL_RCCEx_PeriphCLKConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001800:	f7ff fdd4 	bl	80013ac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_UART_MspInit+0x104>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <HAL_UART_MspInit+0x104>)
 800180a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_UART_MspInit+0x104>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_UART_MspInit+0x104>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <HAL_UART_MspInit+0x104>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_UART_MspInit+0x104>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_UART_MspInit+0x104>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <HAL_UART_MspInit+0x104>)
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	6313      	str	r3, [r2, #48]	; 0x30
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_UART_MspInit+0x104>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800184c:	2308      	movs	r3, #8
 800184e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001864:	2307      	movs	r3, #7
 8001866:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800186e:	4619      	mov	r1, r3
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <HAL_UART_MspInit+0x108>)
 8001872:	f001 f94f 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001876:	2320      	movs	r3, #32
 8001878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188e:	2307      	movs	r3, #7
 8001890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001894:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001898:	4619      	mov	r1, r3
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <HAL_UART_MspInit+0x10c>)
 800189c:	f001 f93a 	bl	8002b14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	2026      	movs	r0, #38	; 0x26
 80018a6:	f001 f86c 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018aa:	2026      	movs	r0, #38	; 0x26
 80018ac:	f001 f885 	bl	80029ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018b0:	bf00      	nop
 80018b2:	37b8      	adds	r7, #184	; 0xb8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40004400 	.word	0x40004400
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020c00 	.word	0x40020c00

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
       ldr   sp, =_estack      /* set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ce:	490e      	ldr	r1, [pc, #56]	; (8001908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018e4:	4c0b      	ldr	r4, [pc, #44]	; (8001914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018f2:	f7ff fea5 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f6:	f004 fa17 	bl	8005d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff fc55 	bl	80011a8 <main>
  bx  lr    
 80018fe:	4770      	bx	lr
       ldr   sp, =_estack      /* set stack pointer */
 8001900:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800190c:	0800a93c 	.word	0x0800a93c
  ldr r2, =_sbss
 8001910:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001914:	200003c0 	.word	0x200003c0

08001918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC_IRQHandler>

0800191a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191e:	2003      	movs	r0, #3
 8001920:	f001 f824 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001924:	200f      	movs	r0, #15
 8001926:	f000 f805 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192a:	f7ff fd45 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f001 f83f 	bl	80029d6 <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f001 f807 	bl	8002982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000000 	.word	0x20000000
 800198c:	20000008 	.word	0x20000008
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008
 80019b8:	200003ac 	.word	0x200003ac

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	200003ac 	.word	0x200003ac

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008

08001a1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0ed      	b.n	8001c0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff f9dc 	bl	8000df8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a50:	f7ff ffb4 	bl	80019bc <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a56:	e012      	b.n	8001a7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a58:	f7ff ffb0 	bl	80019bc <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b0a      	cmp	r3, #10
 8001a64:	d90b      	bls.n	8001a7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2205      	movs	r2, #5
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0c5      	b.n	8001c0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0e5      	beq.n	8001a58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0202 	bic.w	r2, r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a9c:	f7ff ff8e 	bl	80019bc <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa2:	e012      	b.n	8001aca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa4:	f7ff ff8a 	bl	80019bc <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b0a      	cmp	r3, #10
 8001ab0:	d90b      	bls.n	8001aca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e09f      	b.n	8001c0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e5      	bne.n	8001aa4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e1b      	ldrb	r3, [r3, #24]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7e5b      	ldrb	r3, [r3, #25]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7e9b      	ldrb	r3, [r3, #26]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0220 	bic.w	r2, r2, #32
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7edb      	ldrb	r3, [r3, #27]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0210 	bic.w	r2, r2, #16
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0210 	orr.w	r2, r2, #16
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7f1b      	ldrb	r3, [r3, #28]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d108      	bne.n	8001b9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0208 	orr.w	r2, r2, #8
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e007      	b.n	8001baa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0208 	bic.w	r2, r2, #8
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7f5b      	ldrb	r3, [r3, #29]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0204 	orr.w	r2, r2, #4
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e007      	b.n	8001bd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	ea42 0103 	orr.w	r1, r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	1e5a      	subs	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c2c:	7cfb      	ldrb	r3, [r7, #19]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d003      	beq.n	8001c3a <HAL_CAN_ConfigFilter+0x26>
 8001c32:	7cfb      	ldrb	r3, [r7, #19]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	f040 80c7 	bne.w	8001dc8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a69      	ldr	r2, [pc, #420]	; (8001de4 <HAL_CAN_ConfigFilter+0x1d0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d001      	beq.n	8001c48 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001c44:	4b68      	ldr	r3, [pc, #416]	; (8001de8 <HAL_CAN_ConfigFilter+0x1d4>)
 8001c46:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4a63      	ldr	r2, [pc, #396]	; (8001de8 <HAL_CAN_ConfigFilter+0x1d4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d111      	bne.n	8001c84 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c66:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d123      	bne.n	8001cf6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	401a      	ands	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cd0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3248      	adds	r2, #72	; 0x48
 8001cd6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cec:	6979      	ldr	r1, [r7, #20]
 8001cee:	3348      	adds	r3, #72	; 0x48
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d122      	bne.n	8001d44 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3248      	adds	r2, #72	; 0x48
 8001d24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d3a:	6979      	ldr	r1, [r7, #20]
 8001d3c:	3348      	adds	r3, #72	; 0x48
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d5e:	e007      	b.n	8001d70 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d8a:	e007      	b.n	8001d9c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d107      	bne.n	8001db4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dba:	f023 0201 	bic.w	r2, r3, #1
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e006      	b.n	8001dd6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
  }
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40003400 	.word	0x40003400
 8001de8:	40006400 	.word	0x40006400

08001dec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d12e      	bne.n	8001e5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fdd0 	bl	80019bc <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e1e:	e012      	b.n	8001e46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e20:	f7ff fdcc 	bl	80019bc <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b0a      	cmp	r3, #10
 8001e2c:	d90b      	bls.n	8001e46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2205      	movs	r2, #5
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e012      	b.n	8001e6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e5      	bne.n	8001e20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e006      	b.n	8001e6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
  }
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d133      	bne.n	8001ef0 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e98:	f7ff fd90 	bl	80019bc <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e9e:	e012      	b.n	8001ec6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea0:	f7ff fd8c 	bl	80019bc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b0a      	cmp	r3, #10
 8001eac:	d90b      	bls.n	8001ec6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2205      	movs	r2, #5
 8001ebe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e01b      	b.n	8001efe <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0e5      	beq.n	8001ea0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0202 	bic.w	r2, r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e006      	b.n	8001efe <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b089      	sub	sp, #36	; 0x24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f24:	7ffb      	ldrb	r3, [r7, #31]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d003      	beq.n	8001f32 <HAL_CAN_AddTxMessage+0x2c>
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	f040 80ad 	bne.w	800208c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10a      	bne.n	8001f52 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8095 	beq.w	800207c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	0e1b      	lsrs	r3, r3, #24
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	409a      	lsls	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	6809      	ldr	r1, [r1, #0]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3318      	adds	r3, #24
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	440b      	add	r3, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e00f      	b.n	8001faa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f94:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f9a:	68f9      	ldr	r1, [r7, #12]
 8001f9c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f9e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3318      	adds	r3, #24
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	440b      	add	r3, r1
 8001fa8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	440b      	add	r3, r1
 8001fba:	3304      	adds	r3, #4
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	7d1b      	ldrb	r3, [r3, #20]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d111      	bne.n	8001fea <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3318      	adds	r3, #24
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	6811      	ldr	r1, [r2, #0]
 8001fda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3318      	adds	r3, #24
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3307      	adds	r3, #7
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	061a      	lsls	r2, r3, #24
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3305      	adds	r3, #5
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4313      	orrs	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	3204      	adds	r2, #4
 800200a:	7812      	ldrb	r2, [r2, #0]
 800200c:	4610      	mov	r0, r2
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	6811      	ldr	r1, [r2, #0]
 8002012:	ea43 0200 	orr.w	r2, r3, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	440b      	add	r3, r1
 800201c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002020:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3303      	adds	r3, #3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	061a      	lsls	r2, r3, #24
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3302      	adds	r3, #2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	4313      	orrs	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	4610      	mov	r0, r2
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	6811      	ldr	r1, [r2, #0]
 8002048:	ea43 0200 	orr.w	r2, r3, r0
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	440b      	add	r3, r1
 8002052:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002056:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3318      	adds	r3, #24
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	4413      	add	r3, r2
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	6811      	ldr	r1, [r2, #0]
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3318      	adds	r3, #24
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	440b      	add	r3, r1
 8002076:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e00e      	b.n	800209a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e006      	b.n	800209a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
  }
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d002      	beq.n	80020c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80020c0:	7afb      	ldrb	r3, [r7, #11]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d11d      	bne.n	8002102 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3301      	adds	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3301      	adds	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3301      	adds	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002124:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d003      	beq.n	8002134 <HAL_CAN_GetRxMessage+0x24>
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2b02      	cmp	r3, #2
 8002130:	f040 80f3 	bne.w	800231a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10e      	bne.n	8002158 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d116      	bne.n	8002176 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0e7      	b.n	8002328 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0d8      	b.n	8002328 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	331b      	adds	r3, #27
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4413      	add	r3, r2
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0204 	and.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10c      	bne.n	80021ae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	331b      	adds	r3, #27
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	4413      	add	r3, r2
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0d5b      	lsrs	r3, r3, #21
 80021a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	e00b      	b.n	80021c6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	331b      	adds	r3, #27
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	331b      	adds	r3, #27
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	4413      	add	r3, r2
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0202 	and.w	r2, r3, #2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	331b      	adds	r3, #27
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	331b      	adds	r3, #27
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	b2da      	uxtb	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	331b      	adds	r3, #27
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	b29a      	uxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	4413      	add	r3, r2
 800222e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4413      	add	r3, r2
 8002244:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0a1a      	lsrs	r2, r3, #8
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4413      	add	r3, r2
 800225e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0c1a      	lsrs	r2, r3, #16
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3302      	adds	r3, #2
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e1a      	lsrs	r2, r3, #24
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	3303      	adds	r3, #3
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	3304      	adds	r3, #4
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0a1a      	lsrs	r2, r3, #8
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	3305      	adds	r3, #5
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	0c1a      	lsrs	r2, r3, #16
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	3306      	adds	r3, #6
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e1a      	lsrs	r2, r3, #24
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3307      	adds	r3, #7
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d108      	bne.n	8002306 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	e007      	b.n	8002316 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e006      	b.n	8002328 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
  }
}
 8002328:	4618      	mov	r0, r3
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002344:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d002      	beq.n	8002352 <HAL_CAN_ActivateNotification+0x1e>
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d109      	bne.n	8002366 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6959      	ldr	r1, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e006      	b.n	8002374 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07c      	beq.n	80024c0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f983 	bl	80026ee <HAL_CAN_TxMailbox0CompleteCallback>
 80023e8:	e016      	b.n	8002418 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
 80023fc:	e00c      	b.n	8002418 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
 8002410:	e002      	b.n	8002418 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f989 	bl	800272a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d024      	beq.n	800246c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f963 	bl	8002702 <HAL_CAN_TxMailbox1CompleteCallback>
 800243c:	e016      	b.n	800246c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
 8002450:	e00c      	b.n	800246c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
 8002464:	e002      	b.n	800246c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f969 	bl	800273e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d024      	beq.n	80024c0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800247e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f943 	bl	8002716 <HAL_CAN_TxMailbox2CompleteCallback>
 8002490:	e016      	b.n	80024c0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
 80024a4:	e00c      	b.n	80024c0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
 80024b8:	e002      	b.n	80024c0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f949 	bl	8002752 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2210      	movs	r2, #16
 80024e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2208      	movs	r2, #8
 80024fe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f930 	bl	8002766 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fddc 	bl	80010dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800253e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2210      	movs	r2, #16
 8002546:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2208      	movs	r2, #8
 8002562:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f912 	bl	800278e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8f9 	bl	800277a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2210      	movs	r2, #16
 80025a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f8fc 	bl	80027a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2208      	movs	r2, #8
 80025c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8f5 	bl	80027b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d07b      	beq.n	80026ce <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d072      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263a:	2b00      	cmp	r3, #0
 800263c:	d043      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002644:	2b00      	cmp	r3, #0
 8002646:	d03e      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800264e:	2b60      	cmp	r3, #96	; 0x60
 8002650:	d02b      	beq.n	80026aa <HAL_CAN_IRQHandler+0x32a>
 8002652:	2b60      	cmp	r3, #96	; 0x60
 8002654:	d82e      	bhi.n	80026b4 <HAL_CAN_IRQHandler+0x334>
 8002656:	2b50      	cmp	r3, #80	; 0x50
 8002658:	d022      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x320>
 800265a:	2b50      	cmp	r3, #80	; 0x50
 800265c:	d82a      	bhi.n	80026b4 <HAL_CAN_IRQHandler+0x334>
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d019      	beq.n	8002696 <HAL_CAN_IRQHandler+0x316>
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d826      	bhi.n	80026b4 <HAL_CAN_IRQHandler+0x334>
 8002666:	2b30      	cmp	r3, #48	; 0x30
 8002668:	d010      	beq.n	800268c <HAL_CAN_IRQHandler+0x30c>
 800266a:	2b30      	cmp	r3, #48	; 0x30
 800266c:	d822      	bhi.n	80026b4 <HAL_CAN_IRQHandler+0x334>
 800266e:	2b10      	cmp	r3, #16
 8002670:	d002      	beq.n	8002678 <HAL_CAN_IRQHandler+0x2f8>
 8002672:	2b20      	cmp	r3, #32
 8002674:	d005      	beq.n	8002682 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002676:	e01d      	b.n	80026b4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	f043 0308 	orr.w	r3, r3, #8
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002680:	e019      	b.n	80026b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	f043 0310 	orr.w	r3, r3, #16
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800268a:	e014      	b.n	80026b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	f043 0320 	orr.w	r3, r3, #32
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002694:	e00f      	b.n	80026b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800269e:	e00a      	b.n	80026b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026a8:	e005      	b.n	80026b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026b2:	e000      	b.n	80026b6 <HAL_CAN_IRQHandler+0x336>
            break;
 80026b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699a      	ldr	r2, [r3, #24]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2204      	movs	r2, #4
 80026cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7fe fd3b 	bl	800115c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80026e6:	bf00      	nop
 80026e8:	3728      	adds	r7, #40	; 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <__NVIC_SetPriorityGrouping+0x40>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	; (800280c <__NVIC_SetPriorityGrouping+0x40>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00
 8002810:	05fa0000 	.word	0x05fa0000

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4907      	ldr	r1, [pc, #28]	; (8002868 <__NVIC_EnableIRQ+0x38>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	; (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	; (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	; 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002938:	d301      	bcc.n	800293e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293a:	2301      	movs	r3, #1
 800293c:	e00f      	b.n	800295e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <SysTick_Config+0x40>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002946:	210f      	movs	r1, #15
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f7ff ff8e 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <SysTick_Config+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <SysTick_Config+0x40>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff29 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002994:	f7ff ff3e 	bl	8002814 <__NVIC_GetPriorityGrouping>
 8002998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff8e 	bl	80028c0 <NVIC_EncodePriority>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff5d 	bl	800286c <__NVIC_SetPriority>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff31 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffa2 	bl	8002928 <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7fe ffde 	bl	80019bc <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d008      	beq.n	8002a20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e052      	b.n	8002ac6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0216 	bic.w	r2, r2, #22
 8002a2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d103      	bne.n	8002a50 <HAL_DMA_Abort+0x62>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0208 	bic.w	r2, r2, #8
 8002a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a70:	e013      	b.n	8002a9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a72:	f7fe ffa3 	bl	80019bc <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d90c      	bls.n	8002a9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e015      	b.n	8002ac6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e4      	bne.n	8002a72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	223f      	movs	r2, #63	; 0x3f
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d004      	beq.n	8002aec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e00c      	b.n	8002b06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2205      	movs	r2, #5
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e175      	b.n	8002e20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b34:	2201      	movs	r2, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f040 8164 	bne.w	8002e1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d005      	beq.n	8002b6a <HAL_GPIO_Init+0x56>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d130      	bne.n	8002bcc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 0201 	and.w	r2, r3, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d017      	beq.n	8002c08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d123      	bne.n	8002c5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	08da      	lsrs	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3208      	adds	r2, #8
 8002c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0203 	and.w	r2, r3, #3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80be 	beq.w	8002e1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9e:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <HAL_GPIO_Init+0x324>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_GPIO_Init+0x324>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b63      	ldr	r3, [pc, #396]	; (8002e38 <HAL_GPIO_Init+0x324>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cb6:	4a61      	ldr	r2, [pc, #388]	; (8002e3c <HAL_GPIO_Init+0x328>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	; (8002e40 <HAL_GPIO_Init+0x32c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d037      	beq.n	8002d52 <HAL_GPIO_Init+0x23e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a57      	ldr	r2, [pc, #348]	; (8002e44 <HAL_GPIO_Init+0x330>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d031      	beq.n	8002d4e <HAL_GPIO_Init+0x23a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a56      	ldr	r2, [pc, #344]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d02b      	beq.n	8002d4a <HAL_GPIO_Init+0x236>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a55      	ldr	r2, [pc, #340]	; (8002e4c <HAL_GPIO_Init+0x338>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d025      	beq.n	8002d46 <HAL_GPIO_Init+0x232>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <HAL_GPIO_Init+0x33c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01f      	beq.n	8002d42 <HAL_GPIO_Init+0x22e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a53      	ldr	r2, [pc, #332]	; (8002e54 <HAL_GPIO_Init+0x340>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d019      	beq.n	8002d3e <HAL_GPIO_Init+0x22a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <HAL_GPIO_Init+0x344>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0x226>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a51      	ldr	r2, [pc, #324]	; (8002e5c <HAL_GPIO_Init+0x348>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00d      	beq.n	8002d36 <HAL_GPIO_Init+0x222>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <HAL_GPIO_Init+0x34c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <HAL_GPIO_Init+0x21e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4f      	ldr	r2, [pc, #316]	; (8002e64 <HAL_GPIO_Init+0x350>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_GPIO_Init+0x21a>
 8002d2a:	2309      	movs	r3, #9
 8002d2c:	e012      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d2e:	230a      	movs	r3, #10
 8002d30:	e010      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d32:	2308      	movs	r3, #8
 8002d34:	e00e      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e00c      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	e00a      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e008      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e004      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d52:	2300      	movs	r3, #0
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f002 0203 	and.w	r2, r2, #3
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	4093      	lsls	r3, r2
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d64:	4935      	ldr	r1, [pc, #212]	; (8002e3c <HAL_GPIO_Init+0x328>)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d96:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d9c:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc0:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dea:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b0f      	cmp	r3, #15
 8002e24:	f67f ae86 	bls.w	8002b34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40021400 	.word	0x40021400
 8002e58:	40021800 	.word	0x40021800
 8002e5c:	40021c00 	.word	0x40021c00
 8002e60:	40022000 	.word	0x40022000
 8002e64:	40022400 	.word	0x40022400
 8002e68:	40013c00 	.word	0x40013c00

08002e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e7c:	787b      	ldrb	r3, [r7, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e88:	e003      	b.n	8002e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	041a      	lsls	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	619a      	str	r2, [r3, #24]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fa1a 	bl	80012f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e29b      	b.n	800341e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8087 	beq.w	8003002 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef4:	4b96      	ldr	r3, [pc, #600]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d00c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f00:	4b93      	ldr	r3, [pc, #588]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d112      	bne.n	8002f32 <HAL_RCC_OscConfig+0x62>
 8002f0c:	4b90      	ldr	r3, [pc, #576]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f18:	d10b      	bne.n	8002f32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1a:	4b8d      	ldr	r3, [pc, #564]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d06c      	beq.n	8003000 <HAL_RCC_OscConfig+0x130>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d168      	bne.n	8003000 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e275      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x7a>
 8002f3c:	4b84      	ldr	r3, [pc, #528]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a83      	ldr	r2, [pc, #524]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	e02e      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x9c>
 8002f52:	4b7f      	ldr	r3, [pc, #508]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7e      	ldr	r2, [pc, #504]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b7c      	ldr	r3, [pc, #496]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7b      	ldr	r2, [pc, #492]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0xc0>
 8002f76:	4b76      	ldr	r3, [pc, #472]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a75      	ldr	r2, [pc, #468]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a72      	ldr	r2, [pc, #456]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd8>
 8002f90:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b6c      	ldr	r3, [pc, #432]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6b      	ldr	r2, [pc, #428]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fd04 	bl	80019bc <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fd00 	bl	80019bc <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e229      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xe8>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fcf0 	bl	80019bc <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fcec 	bl	80019bc <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e215      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b57      	ldr	r3, [pc, #348]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x110>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d069      	beq.n	80030e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300e:	4b50      	ldr	r3, [pc, #320]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301a:	4b4d      	ldr	r3, [pc, #308]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b08      	cmp	r3, #8
 8003024:	d11c      	bne.n	8003060 <HAL_RCC_OscConfig+0x190>
 8003026:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RCC_OscConfig+0x17a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1e9      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	4b41      	ldr	r3, [pc, #260]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	493d      	ldr	r1, [pc, #244]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	e040      	b.n	80030e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d023      	beq.n	80030b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a38      	ldr	r2, [pc, #224]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fca2 	bl	80019bc <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307c:	f7fe fc9e 	bl	80019bc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1c7      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308e:	4b30      	ldr	r3, [pc, #192]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309a:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4929      	ldr	r1, [pc, #164]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
 80030ae:	e018      	b.n	80030e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a26      	ldr	r2, [pc, #152]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fc7e 	bl	80019bc <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c4:	f7fe fc7a 	bl	80019bc <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1a3      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d038      	beq.n	8003160 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d019      	beq.n	800312a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 80030f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fa:	4a15      	ldr	r2, [pc, #84]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003102:	f7fe fc5b 	bl	80019bc <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310a:	f7fe fc57 	bl	80019bc <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e180      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x23a>
 8003128:	e01a      	b.n	8003160 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 800312c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_RCC_OscConfig+0x280>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fe fc41 	bl	80019bc <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313e:	f7fe fc3d 	bl	80019bc <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d903      	bls.n	8003154 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e166      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
 8003150:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	4b92      	ldr	r3, [pc, #584]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ee      	bne.n	800313e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a4 	beq.w	80032b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316e:	4b8c      	ldr	r3, [pc, #560]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10d      	bne.n	8003196 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	4a88      	ldr	r2, [pc, #544]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
 8003186:	4b86      	ldr	r3, [pc, #536]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003192:	2301      	movs	r3, #1
 8003194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003196:	4b83      	ldr	r3, [pc, #524]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d118      	bne.n	80031d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031a2:	4b80      	ldr	r3, [pc, #512]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a7f      	ldr	r2, [pc, #508]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fc05 	bl	80019bc <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b6:	f7fe fc01 	bl	80019bc <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b64      	cmp	r3, #100	; 0x64
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e12a      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c8:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x31a>
 80031dc:	4b70      	ldr	r3, [pc, #448]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a6f      	ldr	r2, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	e02d      	b.n	8003246 <HAL_RCC_OscConfig+0x376>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0x33c>
 80031f2:	4b6b      	ldr	r3, [pc, #428]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a6a      	ldr	r2, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a67      	ldr	r2, [pc, #412]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
 800320a:	e01c      	b.n	8003246 <HAL_RCC_OscConfig+0x376>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d10c      	bne.n	800322e <HAL_RCC_OscConfig+0x35e>
 8003214:	4b62      	ldr	r3, [pc, #392]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a61      	ldr	r2, [pc, #388]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	4b5f      	ldr	r3, [pc, #380]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a5e      	ldr	r2, [pc, #376]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	e00b      	b.n	8003246 <HAL_RCC_OscConfig+0x376>
 800322e:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a5b      	ldr	r2, [pc, #364]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
 800323a:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4a58      	ldr	r2, [pc, #352]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d015      	beq.n	800327a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe fbb5 	bl	80019bc <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fe fbb1 	bl	80019bc <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	; 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0d8      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ee      	beq.n	8003256 <HAL_RCC_OscConfig+0x386>
 8003278:	e014      	b.n	80032a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fe fb9f 	bl	80019bc <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe fb9b 	bl	80019bc <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0c2      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003298:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1ee      	bne.n	8003282 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d105      	bne.n	80032b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	4a3c      	ldr	r2, [pc, #240]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80ae 	beq.w	800341c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c0:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d06d      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d14b      	bne.n	800336c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80032da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe fb6c 	bl	80019bc <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe fb68 	bl	80019bc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e091      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	019b      	lsls	r3, r3, #6
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	071b      	lsls	r3, r3, #28
 8003332:	491b      	ldr	r1, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 800333e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe fb3a 	bl	80019bc <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe fb36 	bl	80019bc <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e05f      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x47c>
 800336a:	e057      	b.n	800341c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fb20 	bl	80019bc <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fe fb1c 	bl	80019bc <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e045      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_RCC_OscConfig+0x4d0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x4b0>
 800339e:	e03d      	b.n	800341c <HAL_RCC_OscConfig+0x54c>
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <HAL_RCC_OscConfig+0x558>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d030      	beq.n	8003418 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d129      	bne.n	8003418 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d122      	bne.n	8003418 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d119      	bne.n	8003418 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d10f      	bne.n	8003418 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d107      	bne.n	8003418 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800

0800342c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0d0      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d910      	bls.n	8003474 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 020f 	bic.w	r2, r3, #15
 800345a:	4965      	ldr	r1, [pc, #404]	; (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0b8      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800348c:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003496:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	494d      	ldr	r1, [pc, #308]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d040      	beq.n	8003550 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d115      	bne.n	800350e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e07f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e073      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fe:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06b      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4936      	ldr	r1, [pc, #216]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003520:	f7fe fa4c 	bl	80019bc <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fe fa48 	bl	80019bc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e053      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 020c 	and.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	429a      	cmp	r2, r3
 800354e:	d1eb      	bne.n	8003528 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d210      	bcs.n	8003580 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 020f 	bic.w	r2, r3, #15
 8003566:	4922      	ldr	r1, [pc, #136]	; (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e032      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4916      	ldr	r1, [pc, #88]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	490e      	ldr	r1, [pc, #56]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035be:	f000 f821 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	490a      	ldr	r1, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x1cc>)
 80035d0:	5ccb      	ldrb	r3, [r1, r3]
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_ClockConfig+0x1d0>)
 80035d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1d4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe f9a8 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023c00 	.word	0x40023c00
 80035f4:	40023800 	.word	0x40023800
 80035f8:	0800a470 	.word	0x0800a470
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003608:	b094      	sub	sp, #80	; 0x50
 800360a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	647b      	str	r3, [r7, #68]	; 0x44
 8003610:	2300      	movs	r3, #0
 8003612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003614:	2300      	movs	r3, #0
 8003616:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800361c:	4b79      	ldr	r3, [pc, #484]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d00d      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x40>
 8003628:	2b08      	cmp	r3, #8
 800362a:	f200 80e1 	bhi.w	80037f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x34>
 8003632:	2b04      	cmp	r3, #4
 8003634:	d003      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x3a>
 8003636:	e0db      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003638:	4b73      	ldr	r3, [pc, #460]	; (8003808 <HAL_RCC_GetSysClockFreq+0x204>)
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800363c:	e0db      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800363e:	4b72      	ldr	r3, [pc, #456]	; (8003808 <HAL_RCC_GetSysClockFreq+0x204>)
 8003640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003642:	e0d8      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003644:	4b6f      	ldr	r3, [pc, #444]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800364e:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d063      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365a:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	099b      	lsrs	r3, r3, #6
 8003660:	2200      	movs	r2, #0
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
 8003664:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366c:	633b      	str	r3, [r7, #48]	; 0x30
 800366e:	2300      	movs	r3, #0
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
 8003672:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003676:	4622      	mov	r2, r4
 8003678:	462b      	mov	r3, r5
 800367a:	f04f 0000 	mov.w	r0, #0
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	0159      	lsls	r1, r3, #5
 8003684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003688:	0150      	lsls	r0, r2, #5
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4621      	mov	r1, r4
 8003690:	1a51      	subs	r1, r2, r1
 8003692:	6139      	str	r1, [r7, #16]
 8003694:	4629      	mov	r1, r5
 8003696:	eb63 0301 	sbc.w	r3, r3, r1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a8:	4659      	mov	r1, fp
 80036aa:	018b      	lsls	r3, r1, #6
 80036ac:	4651      	mov	r1, sl
 80036ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036b2:	4651      	mov	r1, sl
 80036b4:	018a      	lsls	r2, r1, #6
 80036b6:	4651      	mov	r1, sl
 80036b8:	ebb2 0801 	subs.w	r8, r2, r1
 80036bc:	4659      	mov	r1, fp
 80036be:	eb63 0901 	sbc.w	r9, r3, r1
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036d6:	4690      	mov	r8, r2
 80036d8:	4699      	mov	r9, r3
 80036da:	4623      	mov	r3, r4
 80036dc:	eb18 0303 	adds.w	r3, r8, r3
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	462b      	mov	r3, r5
 80036e4:	eb49 0303 	adc.w	r3, r9, r3
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036f6:	4629      	mov	r1, r5
 80036f8:	028b      	lsls	r3, r1, #10
 80036fa:	4621      	mov	r1, r4
 80036fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003700:	4621      	mov	r1, r4
 8003702:	028a      	lsls	r2, r1, #10
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370a:	2200      	movs	r2, #0
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
 800370e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003714:	f7fc ffa8 	bl	8000668 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003720:	e058      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003722:	4b38      	ldr	r3, [pc, #224]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	099b      	lsrs	r3, r3, #6
 8003728:	2200      	movs	r2, #0
 800372a:	4618      	mov	r0, r3
 800372c:	4611      	mov	r1, r2
 800372e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003732:	623b      	str	r3, [r7, #32]
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
 8003738:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800373c:	4642      	mov	r2, r8
 800373e:	464b      	mov	r3, r9
 8003740:	f04f 0000 	mov.w	r0, #0
 8003744:	f04f 0100 	mov.w	r1, #0
 8003748:	0159      	lsls	r1, r3, #5
 800374a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374e:	0150      	lsls	r0, r2, #5
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4641      	mov	r1, r8
 8003756:	ebb2 0a01 	subs.w	sl, r2, r1
 800375a:	4649      	mov	r1, r9
 800375c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800376c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003774:	ebb2 040a 	subs.w	r4, r2, sl
 8003778:	eb63 050b 	sbc.w	r5, r3, fp
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	00eb      	lsls	r3, r5, #3
 8003786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378a:	00e2      	lsls	r2, r4, #3
 800378c:	4614      	mov	r4, r2
 800378e:	461d      	mov	r5, r3
 8003790:	4643      	mov	r3, r8
 8003792:	18e3      	adds	r3, r4, r3
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	464b      	mov	r3, r9
 8003798:	eb45 0303 	adc.w	r3, r5, r3
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037aa:	4629      	mov	r1, r5
 80037ac:	028b      	lsls	r3, r1, #10
 80037ae:	4621      	mov	r1, r4
 80037b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b4:	4621      	mov	r1, r4
 80037b6:	028a      	lsls	r2, r1, #10
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037be:	2200      	movs	r2, #0
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	61fa      	str	r2, [r7, #28]
 80037c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c8:	f7fc ff4e 	bl	8000668 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	3301      	adds	r3, #1
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetSysClockFreq+0x204>)
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3750      	adds	r7, #80	; 0x50
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400

0800380c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff0 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0a9b      	lsrs	r3, r3, #10
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	0800a480 	.word	0x0800a480

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003850:	f7ff ffdc 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0b5b      	lsrs	r3, r3, #13
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40023800 	.word	0x40023800
 8003870:	0800a480 	.word	0x0800a480

08003874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d012      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800389c:	4b69      	ldr	r3, [pc, #420]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a68      	ldr	r2, [pc, #416]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038a6:	6093      	str	r3, [r2, #8]
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	4964      	ldr	r1, [pc, #400]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d017      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ce:	4b5d      	ldr	r3, [pc, #372]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	4959      	ldr	r1, [pc, #356]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ec:	d101      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d017      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800390a:	4b4e      	ldr	r3, [pc, #312]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003910:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	494a      	ldr	r1, [pc, #296]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003946:	2301      	movs	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 808b 	beq.w	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4a39      	ldr	r2, [pc, #228]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
 8003964:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397c:	f7fe f81e 	bl	80019bc <HAL_GetTick>
 8003980:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fe f81a 	bl	80019bc <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e38f      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d035      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d02e      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c0:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039e8:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d114      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fd ffe2 	bl	80019bc <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fd ffde 	bl	80019bc <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e351      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ee      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2a:	d111      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	4901      	ldr	r1, [pc, #4]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
 8003a42:	e00b      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	0ffffcff 	.word	0x0ffffcff
 8003a50:	4bac      	ldr	r3, [pc, #688]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4aab      	ldr	r2, [pc, #684]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a5a:	6093      	str	r3, [r2, #8]
 8003a5c:	4ba9      	ldr	r3, [pc, #676]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	49a6      	ldr	r1, [pc, #664]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a7a:	4ba2      	ldr	r3, [pc, #648]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	4aa0      	ldr	r2, [pc, #640]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a8a:	4b9e      	ldr	r3, [pc, #632]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	499b      	ldr	r1, [pc, #620]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa8:	4b96      	ldr	r3, [pc, #600]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab6:	4993      	ldr	r1, [pc, #588]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aca:	4b8e      	ldr	r3, [pc, #568]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad8:	498a      	ldr	r1, [pc, #552]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aec:	4b85      	ldr	r3, [pc, #532]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	4982      	ldr	r1, [pc, #520]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b0e:	4b7d      	ldr	r3, [pc, #500]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4979      	ldr	r1, [pc, #484]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b30:	4b74      	ldr	r3, [pc, #464]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	4971      	ldr	r1, [pc, #452]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b52:	4b6c      	ldr	r3, [pc, #432]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f023 020c 	bic.w	r2, r3, #12
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b60:	4968      	ldr	r1, [pc, #416]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b74:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	4960      	ldr	r1, [pc, #384]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b96:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	4957      	ldr	r1, [pc, #348]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb8:	4b52      	ldr	r3, [pc, #328]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	494f      	ldr	r1, [pc, #316]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bda:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	4946      	ldr	r1, [pc, #280]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bfc:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	493e      	ldr	r1, [pc, #248]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c1e:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2c:	4935      	ldr	r1, [pc, #212]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c40:	4b30      	ldr	r3, [pc, #192]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4e:	492d      	ldr	r1, [pc, #180]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d011      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c62:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c70:	4924      	ldr	r1, [pc, #144]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca2:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb0:	4914      	ldr	r1, [pc, #80]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd4:	490b      	ldr	r1, [pc, #44]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00f      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf8:	4902      	ldr	r1, [pc, #8]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d00:	e002      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d14:	4b8a      	ldr	r3, [pc, #552]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	4986      	ldr	r1, [pc, #536]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d38:	4b81      	ldr	r3, [pc, #516]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d48:	497d      	ldr	r1, [pc, #500]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d006      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80d6 	beq.w	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d64:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a75      	ldr	r2, [pc, #468]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d70:	f7fd fe24 	bl	80019bc <HAL_GetTick>
 8003d74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d78:	f7fd fe20 	bl	80019bc <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e195      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d8a:	4b6d      	ldr	r3, [pc, #436]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d021      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11d      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003daa:	4b65      	ldr	r3, [pc, #404]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003db8:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dbe:	0e1b      	lsrs	r3, r3, #24
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	019a      	lsls	r2, r3, #6
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	071b      	lsls	r3, r3, #28
 8003dde:	4958      	ldr	r1, [pc, #352]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d02e      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e10:	d129      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e12:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e20:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e26:	0f1b      	lsrs	r3, r3, #28
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	019a      	lsls	r2, r3, #6
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	061b      	lsls	r3, r3, #24
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	493e      	ldr	r1, [pc, #248]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e4e:	4b3c      	ldr	r3, [pc, #240]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e54:	f023 021f 	bic.w	r2, r3, #31
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	4938      	ldr	r1, [pc, #224]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01d      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e78:	0e1b      	lsrs	r3, r3, #24
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e80:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e86:	0f1b      	lsrs	r3, r3, #28
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	019a      	lsls	r2, r3, #6
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	071b      	lsls	r3, r3, #28
 8003ea6:	4926      	ldr	r1, [pc, #152]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d011      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	019a      	lsls	r2, r3, #6
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	491a      	ldr	r1, [pc, #104]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ede:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a17      	ldr	r2, [pc, #92]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eea:	f7fd fd67 	bl	80019bc <HAL_GetTick>
 8003eee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef2:	f7fd fd63 	bl	80019bc <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b64      	cmp	r3, #100	; 0x64
 8003efe:	d901      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0d8      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	f040 80ce 	bne.w	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f24:	f7fd fd4a 	bl	80019bc <HAL_GetTick>
 8003f28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f2c:	f7fd fd46 	bl	80019bc <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d904      	bls.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0bb      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f44:	4b5e      	ldr	r3, [pc, #376]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f50:	d0ec      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02e      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d12a      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f7a:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f88:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	0f1b      	lsrs	r3, r3, #28
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	019a      	lsls	r2, r3, #6
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	071b      	lsls	r3, r3, #28
 8003fae:	4944      	ldr	r1, [pc, #272]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fb6:	4b42      	ldr	r3, [pc, #264]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	493d      	ldr	r1, [pc, #244]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d022      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe4:	d11d      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fe6:	4b36      	ldr	r3, [pc, #216]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	0e1b      	lsrs	r3, r3, #24
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ff4:	4b32      	ldr	r3, [pc, #200]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	0f1b      	lsrs	r3, r3, #28
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	019a      	lsls	r2, r3, #6
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	431a      	orrs	r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	071b      	lsls	r3, r3, #28
 800401a:	4929      	ldr	r1, [pc, #164]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d028      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	0e1b      	lsrs	r3, r3, #24
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	019a      	lsls	r2, r3, #6
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	071b      	lsls	r3, r3, #28
 8004062:	4917      	ldr	r1, [pc, #92]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800406c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4911      	ldr	r1, [pc, #68]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fd fc96 	bl	80019bc <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004094:	f7fd fc92 	bl	80019bc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e007      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b2:	d1ef      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800

080040c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e049      	b.n	800416a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fd fb0e 	bl	800170c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f000 faee 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d001      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e054      	b.n	8004236 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a26      	ldr	r2, [pc, #152]	; (8004244 <HAL_TIM_Base_Start_IT+0xd0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d022      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d01d      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a22      	ldr	r2, [pc, #136]	; (8004248 <HAL_TIM_Base_Start_IT+0xd4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d018      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a21      	ldr	r2, [pc, #132]	; (800424c <HAL_TIM_Base_Start_IT+0xd8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1f      	ldr	r2, [pc, #124]	; (8004250 <HAL_TIM_Base_Start_IT+0xdc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00e      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_TIM_Base_Start_IT+0xe0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d009      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <HAL_TIM_Base_Start_IT+0xe4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_TIM_Base_Start_IT+0xe8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d115      	bne.n	8004220 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_TIM_Base_Start_IT+0xec>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b06      	cmp	r3, #6
 8004204:	d015      	beq.n	8004232 <HAL_TIM_Base_Start_IT+0xbe>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d011      	beq.n	8004232 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421e:	e008      	b.n	8004232 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e000      	b.n	8004234 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40010400 	.word	0x40010400
 8004258:	40014000 	.word	0x40014000
 800425c:	40001800 	.word	0x40001800
 8004260:	00010007 	.word	0x00010007

08004264 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a1a      	ldr	r2, [r3, #32]
 8004282:	f241 1311 	movw	r3, #4369	; 0x1111
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10f      	bne.n	80042ac <HAL_TIM_Base_Stop_IT+0x48>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	f240 4344 	movw	r3, #1092	; 0x444
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <HAL_TIM_Base_Stop_IT+0x48>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d122      	bne.n	800431e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d11b      	bne.n	800431e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f06f 0202 	mvn.w	r2, #2
 80042ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f9cf 	bl	80046a8 <HAL_TIM_IC_CaptureCallback>
 800430a:	e005      	b.n	8004318 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f9c1 	bl	8004694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f9d2 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b04      	cmp	r3, #4
 800432a:	d122      	bne.n	8004372 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d11b      	bne.n	8004372 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f06f 0204 	mvn.w	r2, #4
 8004342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f9a5 	bl	80046a8 <HAL_TIM_IC_CaptureCallback>
 800435e:	e005      	b.n	800436c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f997 	bl	8004694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f9a8 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d122      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b08      	cmp	r3, #8
 800438c:	d11b      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f06f 0208 	mvn.w	r2, #8
 8004396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2204      	movs	r2, #4
 800439c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f97b 	bl	80046a8 <HAL_TIM_IC_CaptureCallback>
 80043b2:	e005      	b.n	80043c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f96d 	bl	8004694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f97e 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d122      	bne.n	800441a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d11b      	bne.n	800441a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 0210 	mvn.w	r2, #16
 80043ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2208      	movs	r2, #8
 80043f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f951 	bl	80046a8 <HAL_TIM_IC_CaptureCallback>
 8004406:	e005      	b.n	8004414 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f943 	bl	8004694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f954 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d10e      	bne.n	8004446 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b01      	cmp	r3, #1
 8004434:	d107      	bne.n	8004446 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f06f 0201 	mvn.w	r2, #1
 800443e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7fc fe95 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d10e      	bne.n	8004472 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d107      	bne.n	8004472 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800446a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fb0b 	bl	8004a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004480:	d10e      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b80      	cmp	r3, #128	; 0x80
 800448e:	d107      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fafe 	bl	8004a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d10e      	bne.n	80044cc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d107      	bne.n	80044cc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f902 	bl	80046d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d10e      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d107      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0220 	mvn.w	r2, #32
 80044f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fabe 	bl	8004a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_TIM_ConfigClockSource+0x1c>
 8004518:	2302      	movs	r3, #2
 800451a:	e0b4      	b.n	8004686 <HAL_TIM_ConfigClockSource+0x186>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	4b56      	ldr	r3, [pc, #344]	; (8004690 <HAL_TIM_ConfigClockSource+0x190>)
 8004538:	4013      	ands	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004554:	d03e      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455a:	f200 8087 	bhi.w	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004562:	f000 8086 	beq.w	8004672 <HAL_TIM_ConfigClockSource+0x172>
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456a:	d87f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b70      	cmp	r3, #112	; 0x70
 800456e:	d01a      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004570:	2b70      	cmp	r3, #112	; 0x70
 8004572:	d87b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b60      	cmp	r3, #96	; 0x60
 8004576:	d050      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x11a>
 8004578:	2b60      	cmp	r3, #96	; 0x60
 800457a:	d877      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b50      	cmp	r3, #80	; 0x50
 800457e:	d03c      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0xfa>
 8004580:	2b50      	cmp	r3, #80	; 0x50
 8004582:	d873      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d058      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x13a>
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d86f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	d064      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b30      	cmp	r3, #48	; 0x30
 8004592:	d86b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d060      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d867      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05c      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d05a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 80045a4:	e062      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f000 f9af 	bl	8004918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	609a      	str	r2, [r3, #8]
      break;
 80045d2:	e04f      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f000 f998 	bl	8004918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f6:	609a      	str	r2, [r3, #8]
      break;
 80045f8:	e03c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 f90c 	bl	8004824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2150      	movs	r1, #80	; 0x50
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f965 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004618:	e02c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 f92b 	bl	8004882 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2160      	movs	r1, #96	; 0x60
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f955 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004638:	e01c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 f8ec 	bl	8004824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2140      	movs	r1, #64	; 0x40
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f945 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004658:	e00c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f000 f93c 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 800466a:	e003      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e000      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	fffeff88 	.word	0xfffeff88

08004694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a40      	ldr	r2, [pc, #256]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d00f      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <TIM_Base_SetConfig+0x118>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00b      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3c      	ldr	r2, [pc, #240]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3b      	ldr	r2, [pc, #236]	; (8004804 <TIM_Base_SetConfig+0x120>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3a      	ldr	r2, [pc, #232]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2f      	ldr	r2, [pc, #188]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d027      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2c      	ldr	r2, [pc, #176]	; (80047fc <TIM_Base_SetConfig+0x118>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d023      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01f      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <TIM_Base_SetConfig+0x120>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a29      	ldr	r2, [pc, #164]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d017      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a28      	ldr	r2, [pc, #160]	; (800480c <TIM_Base_SetConfig+0x128>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <TIM_Base_SetConfig+0x12c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00f      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a26      	ldr	r2, [pc, #152]	; (8004814 <TIM_Base_SetConfig+0x130>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a25      	ldr	r2, [pc, #148]	; (8004818 <TIM_Base_SetConfig+0x134>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a24      	ldr	r2, [pc, #144]	; (800481c <TIM_Base_SetConfig+0x138>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a23      	ldr	r2, [pc, #140]	; (8004820 <TIM_Base_SetConfig+0x13c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d108      	bne.n	80047a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0xf8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <TIM_Base_SetConfig+0x124>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d103      	bne.n	80047e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	615a      	str	r2, [r3, #20]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40010400 	.word	0x40010400
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	40001800 	.word	0x40001800
 800481c:	40001c00 	.word	0x40001c00
 8004820:	40002000 	.word	0x40002000

08004824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0201 	bic.w	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 030a 	bic.w	r3, r3, #10
 8004860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004882:	b480      	push	{r7}
 8004884:	b087      	sub	sp, #28
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0210 	bic.w	r2, r3, #16
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f043 0307 	orr.w	r3, r3, #7
 8004904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	431a      	orrs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	609a      	str	r2, [r3, #8]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e06d      	b.n	8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a30      	ldr	r2, [pc, #192]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2f      	ldr	r2, [pc, #188]	; (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d108      	bne.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d022      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d01d      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1d      	ldr	r2, [pc, #116]	; (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d018      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1a      	ldr	r2, [pc, #104]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00e      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d009      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10c      	bne.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40010400 	.word	0x40010400
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40001800 	.word	0x40001800

08004a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e040      	b.n	8004b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc fe70 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2224      	movs	r2, #36	; 0x24
 8004adc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fb9c 	bl	800522c <UART_SetConfig>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e022      	b.n	8004b44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fdf4 	bl	80056f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fe7b 	bl	8005838 <UART_CheckIdleState>
 8004b42:	4603      	mov	r3, r0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b08b      	sub	sp, #44	; 0x2c
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d147      	bne.n	8004bf2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_UART_Transmit_IT+0x22>
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e040      	b.n	8004bf4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2221      	movs	r2, #33	; 0x21
 8004b9a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba4:	d107      	bne.n	8004bb6 <HAL_UART_Transmit_IT+0x6a>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <HAL_UART_Transmit_IT+0xb4>)
 8004bb2:	66da      	str	r2, [r3, #108]	; 0x6c
 8004bb4:	e002      	b.n	8004bbc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <HAL_UART_Transmit_IT+0xb8>)
 8004bba:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	623b      	str	r3, [r7, #32]
 8004bdc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	69f9      	ldr	r1, [r7, #28]
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e6      	bne.n	8004bbc <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	372c      	adds	r7, #44	; 0x2c
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	08005c09 	.word	0x08005c09
 8004c04:	08005b53 	.word	0x08005b53

08004c08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b0ba      	sub	sp, #232	; 0xe8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c32:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c36:	4013      	ands	r3, r2
 8004c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d115      	bne.n	8004c70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00f      	beq.n	8004c70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d009      	beq.n	8004c70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 82ac 	beq.w	80051be <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	4798      	blx	r3
      }
      return;
 8004c6e:	e2a6      	b.n	80051be <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8117 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c8a:	4b85      	ldr	r3, [pc, #532]	; (8004ea0 <HAL_UART_IRQHandler+0x298>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 810a 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d011      	beq.n	8004cc4 <HAL_UART_IRQHandler+0xbc>
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cba:	f043 0201 	orr.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d011      	beq.n	8004cf4 <HAL_UART_IRQHandler+0xec>
 8004cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00b      	beq.n	8004cf4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cea:	f043 0204 	orr.w	r2, r3, #4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d011      	beq.n	8004d24 <HAL_UART_IRQHandler+0x11c>
 8004d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2204      	movs	r2, #4
 8004d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d1a:	f043 0202 	orr.w	r2, r3, #2
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d017      	beq.n	8004d60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00b      	beq.n	8004d60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d56:	f043 0208 	orr.w	r2, r3, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d012      	beq.n	8004d92 <HAL_UART_IRQHandler+0x18a>
 8004d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8212 	beq.w	80051c2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00d      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d005      	beq.n	8004dea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004de2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d04f      	beq.n	8004e8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fe37 	bl	8005a5e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d141      	bne.n	8004e82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3308      	adds	r3, #8
 8004e04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3308      	adds	r3, #8
 8004e26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1d9      	bne.n	8004dfe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d013      	beq.n	8004e7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e56:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <HAL_UART_IRQHandler+0x29c>)
 8004e58:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd fe35 	bl	8002ace <HAL_DMA_Abort_IT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d017      	beq.n	8004e9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e74:	4610      	mov	r0, r2
 8004e76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	e00f      	b.n	8004e9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f9b6 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e80:	e00b      	b.n	8004e9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f9b2 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	e007      	b.n	8004e9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f9ae 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004e98:	e193      	b.n	80051c2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9a:	bf00      	nop
    return;
 8004e9c:	e191      	b.n	80051c2 <HAL_UART_IRQHandler+0x5ba>
 8004e9e:	bf00      	nop
 8004ea0:	04000120 	.word	0x04000120
 8004ea4:	08005b27 	.word	0x08005b27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	f040 814c 	bne.w	800514a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8145 	beq.w	800514a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 813e 	beq.w	800514a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2210      	movs	r2, #16
 8004ed4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee0:	2b40      	cmp	r3, #64	; 0x40
 8004ee2:	f040 80b6 	bne.w	8005052 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ef2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8165 	beq.w	80051c6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f06:	429a      	cmp	r2, r3
 8004f08:	f080 815d 	bcs.w	80051c6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f20:	f000 8086 	beq.w	8005030 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1da      	bne.n	8004f24 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e1      	bne.n	8004f6e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e3      	bne.n	8004faa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005000:	f023 0310 	bic.w	r3, r3, #16
 8005004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005012:	65bb      	str	r3, [r7, #88]	; 0x58
 8005014:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005018:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e4      	bne.n	8004ff0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502a:	4618      	mov	r0, r3
 800502c:	f7fd fcdf 	bl	80029ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005042:	b29b      	uxth	r3, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f8d8 	bl	8005200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005050:	e0b9      	b.n	80051c6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800505e:	b29b      	uxth	r3, r3
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80ab 	beq.w	80051ca <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a6 	beq.w	80051ca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050a0:	647b      	str	r3, [r7, #68]	; 0x44
 80050a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e4      	bne.n	800507e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	623b      	str	r3, [r7, #32]
   return(result);
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050d8:	633a      	str	r2, [r7, #48]	; 0x30
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e3      	bne.n	80050b4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	60fb      	str	r3, [r7, #12]
   return(result);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f023 0310 	bic.w	r3, r3, #16
 8005114:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	69b9      	ldr	r1, [r7, #24]
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	617b      	str	r3, [r7, #20]
   return(result);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e4      	bne.n	8005100 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f85c 	bl	8005200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005148:	e03f      	b.n	80051ca <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00e      	beq.n	8005174 <HAL_UART_IRQHandler+0x56c>
 8005156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800516a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f853 	bl	8005218 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005172:	e02d      	b.n	80051d0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00e      	beq.n	800519e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01c      	beq.n	80051ce <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
    }
    return;
 800519c:	e017      	b.n	80051ce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d012      	beq.n	80051d0 <HAL_UART_IRQHandler+0x5c8>
 80051aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fd86 	bl	8005cc8 <UART_EndTransmit_IT>
    return;
 80051bc:	e008      	b.n	80051d0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80051be:	bf00      	nop
 80051c0:	e006      	b.n	80051d0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80051c2:	bf00      	nop
 80051c4:	e004      	b.n	80051d0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80051c6:	bf00      	nop
 80051c8:	e002      	b.n	80051d0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80051ca:	bf00      	nop
 80051cc:	e000      	b.n	80051d0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80051ce:	bf00      	nop
  }

}
 80051d0:	37e8      	adds	r7, #232	; 0xe8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop

080051d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4ba6      	ldr	r3, [pc, #664]	; (80054f0 <UART_SetConfig+0x2c4>)
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	6979      	ldr	r1, [r7, #20]
 8005260:	430b      	orrs	r3, r1
 8005262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a94      	ldr	r2, [pc, #592]	; (80054f4 <UART_SetConfig+0x2c8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d120      	bne.n	80052ea <UART_SetConfig+0xbe>
 80052a8:	4b93      	ldr	r3, [pc, #588]	; (80054f8 <UART_SetConfig+0x2cc>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d816      	bhi.n	80052e4 <UART_SetConfig+0xb8>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x90>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052cd 	.word	0x080052cd
 80052c0:	080052d9 	.word	0x080052d9
 80052c4:	080052d3 	.word	0x080052d3
 80052c8:	080052df 	.word	0x080052df
 80052cc:	2301      	movs	r3, #1
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e150      	b.n	8005574 <UART_SetConfig+0x348>
 80052d2:	2302      	movs	r3, #2
 80052d4:	77fb      	strb	r3, [r7, #31]
 80052d6:	e14d      	b.n	8005574 <UART_SetConfig+0x348>
 80052d8:	2304      	movs	r3, #4
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e14a      	b.n	8005574 <UART_SetConfig+0x348>
 80052de:	2308      	movs	r3, #8
 80052e0:	77fb      	strb	r3, [r7, #31]
 80052e2:	e147      	b.n	8005574 <UART_SetConfig+0x348>
 80052e4:	2310      	movs	r3, #16
 80052e6:	77fb      	strb	r3, [r7, #31]
 80052e8:	e144      	b.n	8005574 <UART_SetConfig+0x348>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a83      	ldr	r2, [pc, #524]	; (80054fc <UART_SetConfig+0x2d0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d132      	bne.n	800535a <UART_SetConfig+0x12e>
 80052f4:	4b80      	ldr	r3, [pc, #512]	; (80054f8 <UART_SetConfig+0x2cc>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d828      	bhi.n	8005354 <UART_SetConfig+0x128>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0xdc>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800533d 	.word	0x0800533d
 800530c:	08005355 	.word	0x08005355
 8005310:	08005355 	.word	0x08005355
 8005314:	08005355 	.word	0x08005355
 8005318:	08005349 	.word	0x08005349
 800531c:	08005355 	.word	0x08005355
 8005320:	08005355 	.word	0x08005355
 8005324:	08005355 	.word	0x08005355
 8005328:	08005343 	.word	0x08005343
 800532c:	08005355 	.word	0x08005355
 8005330:	08005355 	.word	0x08005355
 8005334:	08005355 	.word	0x08005355
 8005338:	0800534f 	.word	0x0800534f
 800533c:	2300      	movs	r3, #0
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	e118      	b.n	8005574 <UART_SetConfig+0x348>
 8005342:	2302      	movs	r3, #2
 8005344:	77fb      	strb	r3, [r7, #31]
 8005346:	e115      	b.n	8005574 <UART_SetConfig+0x348>
 8005348:	2304      	movs	r3, #4
 800534a:	77fb      	strb	r3, [r7, #31]
 800534c:	e112      	b.n	8005574 <UART_SetConfig+0x348>
 800534e:	2308      	movs	r3, #8
 8005350:	77fb      	strb	r3, [r7, #31]
 8005352:	e10f      	b.n	8005574 <UART_SetConfig+0x348>
 8005354:	2310      	movs	r3, #16
 8005356:	77fb      	strb	r3, [r7, #31]
 8005358:	e10c      	b.n	8005574 <UART_SetConfig+0x348>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a68      	ldr	r2, [pc, #416]	; (8005500 <UART_SetConfig+0x2d4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d120      	bne.n	80053a6 <UART_SetConfig+0x17a>
 8005364:	4b64      	ldr	r3, [pc, #400]	; (80054f8 <UART_SetConfig+0x2cc>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800536e:	2b30      	cmp	r3, #48	; 0x30
 8005370:	d013      	beq.n	800539a <UART_SetConfig+0x16e>
 8005372:	2b30      	cmp	r3, #48	; 0x30
 8005374:	d814      	bhi.n	80053a0 <UART_SetConfig+0x174>
 8005376:	2b20      	cmp	r3, #32
 8005378:	d009      	beq.n	800538e <UART_SetConfig+0x162>
 800537a:	2b20      	cmp	r3, #32
 800537c:	d810      	bhi.n	80053a0 <UART_SetConfig+0x174>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <UART_SetConfig+0x15c>
 8005382:	2b10      	cmp	r3, #16
 8005384:	d006      	beq.n	8005394 <UART_SetConfig+0x168>
 8005386:	e00b      	b.n	80053a0 <UART_SetConfig+0x174>
 8005388:	2300      	movs	r3, #0
 800538a:	77fb      	strb	r3, [r7, #31]
 800538c:	e0f2      	b.n	8005574 <UART_SetConfig+0x348>
 800538e:	2302      	movs	r3, #2
 8005390:	77fb      	strb	r3, [r7, #31]
 8005392:	e0ef      	b.n	8005574 <UART_SetConfig+0x348>
 8005394:	2304      	movs	r3, #4
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e0ec      	b.n	8005574 <UART_SetConfig+0x348>
 800539a:	2308      	movs	r3, #8
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e0e9      	b.n	8005574 <UART_SetConfig+0x348>
 80053a0:	2310      	movs	r3, #16
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e0e6      	b.n	8005574 <UART_SetConfig+0x348>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a56      	ldr	r2, [pc, #344]	; (8005504 <UART_SetConfig+0x2d8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d120      	bne.n	80053f2 <UART_SetConfig+0x1c6>
 80053b0:	4b51      	ldr	r3, [pc, #324]	; (80054f8 <UART_SetConfig+0x2cc>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053ba:	2bc0      	cmp	r3, #192	; 0xc0
 80053bc:	d013      	beq.n	80053e6 <UART_SetConfig+0x1ba>
 80053be:	2bc0      	cmp	r3, #192	; 0xc0
 80053c0:	d814      	bhi.n	80053ec <UART_SetConfig+0x1c0>
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d009      	beq.n	80053da <UART_SetConfig+0x1ae>
 80053c6:	2b80      	cmp	r3, #128	; 0x80
 80053c8:	d810      	bhi.n	80053ec <UART_SetConfig+0x1c0>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <UART_SetConfig+0x1a8>
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d006      	beq.n	80053e0 <UART_SetConfig+0x1b4>
 80053d2:	e00b      	b.n	80053ec <UART_SetConfig+0x1c0>
 80053d4:	2300      	movs	r3, #0
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e0cc      	b.n	8005574 <UART_SetConfig+0x348>
 80053da:	2302      	movs	r3, #2
 80053dc:	77fb      	strb	r3, [r7, #31]
 80053de:	e0c9      	b.n	8005574 <UART_SetConfig+0x348>
 80053e0:	2304      	movs	r3, #4
 80053e2:	77fb      	strb	r3, [r7, #31]
 80053e4:	e0c6      	b.n	8005574 <UART_SetConfig+0x348>
 80053e6:	2308      	movs	r3, #8
 80053e8:	77fb      	strb	r3, [r7, #31]
 80053ea:	e0c3      	b.n	8005574 <UART_SetConfig+0x348>
 80053ec:	2310      	movs	r3, #16
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	e0c0      	b.n	8005574 <UART_SetConfig+0x348>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a44      	ldr	r2, [pc, #272]	; (8005508 <UART_SetConfig+0x2dc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d125      	bne.n	8005448 <UART_SetConfig+0x21c>
 80053fc:	4b3e      	ldr	r3, [pc, #248]	; (80054f8 <UART_SetConfig+0x2cc>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540a:	d017      	beq.n	800543c <UART_SetConfig+0x210>
 800540c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005410:	d817      	bhi.n	8005442 <UART_SetConfig+0x216>
 8005412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005416:	d00b      	beq.n	8005430 <UART_SetConfig+0x204>
 8005418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541c:	d811      	bhi.n	8005442 <UART_SetConfig+0x216>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <UART_SetConfig+0x1fe>
 8005422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005426:	d006      	beq.n	8005436 <UART_SetConfig+0x20a>
 8005428:	e00b      	b.n	8005442 <UART_SetConfig+0x216>
 800542a:	2300      	movs	r3, #0
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e0a1      	b.n	8005574 <UART_SetConfig+0x348>
 8005430:	2302      	movs	r3, #2
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e09e      	b.n	8005574 <UART_SetConfig+0x348>
 8005436:	2304      	movs	r3, #4
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e09b      	b.n	8005574 <UART_SetConfig+0x348>
 800543c:	2308      	movs	r3, #8
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e098      	b.n	8005574 <UART_SetConfig+0x348>
 8005442:	2310      	movs	r3, #16
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e095      	b.n	8005574 <UART_SetConfig+0x348>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2f      	ldr	r2, [pc, #188]	; (800550c <UART_SetConfig+0x2e0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d125      	bne.n	800549e <UART_SetConfig+0x272>
 8005452:	4b29      	ldr	r3, [pc, #164]	; (80054f8 <UART_SetConfig+0x2cc>)
 8005454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005458:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800545c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005460:	d017      	beq.n	8005492 <UART_SetConfig+0x266>
 8005462:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005466:	d817      	bhi.n	8005498 <UART_SetConfig+0x26c>
 8005468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546c:	d00b      	beq.n	8005486 <UART_SetConfig+0x25a>
 800546e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005472:	d811      	bhi.n	8005498 <UART_SetConfig+0x26c>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <UART_SetConfig+0x254>
 8005478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547c:	d006      	beq.n	800548c <UART_SetConfig+0x260>
 800547e:	e00b      	b.n	8005498 <UART_SetConfig+0x26c>
 8005480:	2301      	movs	r3, #1
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e076      	b.n	8005574 <UART_SetConfig+0x348>
 8005486:	2302      	movs	r3, #2
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e073      	b.n	8005574 <UART_SetConfig+0x348>
 800548c:	2304      	movs	r3, #4
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e070      	b.n	8005574 <UART_SetConfig+0x348>
 8005492:	2308      	movs	r3, #8
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e06d      	b.n	8005574 <UART_SetConfig+0x348>
 8005498:	2310      	movs	r3, #16
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e06a      	b.n	8005574 <UART_SetConfig+0x348>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <UART_SetConfig+0x2e4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d138      	bne.n	800551a <UART_SetConfig+0x2ee>
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <UART_SetConfig+0x2cc>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054b6:	d017      	beq.n	80054e8 <UART_SetConfig+0x2bc>
 80054b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054bc:	d82a      	bhi.n	8005514 <UART_SetConfig+0x2e8>
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c2:	d00b      	beq.n	80054dc <UART_SetConfig+0x2b0>
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c8:	d824      	bhi.n	8005514 <UART_SetConfig+0x2e8>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <UART_SetConfig+0x2aa>
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	d006      	beq.n	80054e2 <UART_SetConfig+0x2b6>
 80054d4:	e01e      	b.n	8005514 <UART_SetConfig+0x2e8>
 80054d6:	2300      	movs	r3, #0
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e04b      	b.n	8005574 <UART_SetConfig+0x348>
 80054dc:	2302      	movs	r3, #2
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e048      	b.n	8005574 <UART_SetConfig+0x348>
 80054e2:	2304      	movs	r3, #4
 80054e4:	77fb      	strb	r3, [r7, #31]
 80054e6:	e045      	b.n	8005574 <UART_SetConfig+0x348>
 80054e8:	2308      	movs	r3, #8
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e042      	b.n	8005574 <UART_SetConfig+0x348>
 80054ee:	bf00      	nop
 80054f0:	efff69f3 	.word	0xefff69f3
 80054f4:	40011000 	.word	0x40011000
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40004400 	.word	0x40004400
 8005500:	40004800 	.word	0x40004800
 8005504:	40004c00 	.word	0x40004c00
 8005508:	40005000 	.word	0x40005000
 800550c:	40011400 	.word	0x40011400
 8005510:	40007800 	.word	0x40007800
 8005514:	2310      	movs	r3, #16
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e02c      	b.n	8005574 <UART_SetConfig+0x348>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a72      	ldr	r2, [pc, #456]	; (80056e8 <UART_SetConfig+0x4bc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d125      	bne.n	8005570 <UART_SetConfig+0x344>
 8005524:	4b71      	ldr	r3, [pc, #452]	; (80056ec <UART_SetConfig+0x4c0>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800552e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005532:	d017      	beq.n	8005564 <UART_SetConfig+0x338>
 8005534:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005538:	d817      	bhi.n	800556a <UART_SetConfig+0x33e>
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553e:	d00b      	beq.n	8005558 <UART_SetConfig+0x32c>
 8005540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005544:	d811      	bhi.n	800556a <UART_SetConfig+0x33e>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <UART_SetConfig+0x326>
 800554a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800554e:	d006      	beq.n	800555e <UART_SetConfig+0x332>
 8005550:	e00b      	b.n	800556a <UART_SetConfig+0x33e>
 8005552:	2300      	movs	r3, #0
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e00d      	b.n	8005574 <UART_SetConfig+0x348>
 8005558:	2302      	movs	r3, #2
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e00a      	b.n	8005574 <UART_SetConfig+0x348>
 800555e:	2304      	movs	r3, #4
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e007      	b.n	8005574 <UART_SetConfig+0x348>
 8005564:	2308      	movs	r3, #8
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e004      	b.n	8005574 <UART_SetConfig+0x348>
 800556a:	2310      	movs	r3, #16
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e001      	b.n	8005574 <UART_SetConfig+0x348>
 8005570:	2310      	movs	r3, #16
 8005572:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557c:	d15b      	bne.n	8005636 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800557e:	7ffb      	ldrb	r3, [r7, #31]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d828      	bhi.n	80055d6 <UART_SetConfig+0x3aa>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x360>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055b9 	.word	0x080055b9
 8005594:	080055c1 	.word	0x080055c1
 8005598:	080055d7 	.word	0x080055d7
 800559c:	080055c7 	.word	0x080055c7
 80055a0:	080055d7 	.word	0x080055d7
 80055a4:	080055d7 	.word	0x080055d7
 80055a8:	080055d7 	.word	0x080055d7
 80055ac:	080055cf 	.word	0x080055cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b0:	f7fe f938 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 80055b4:	61b8      	str	r0, [r7, #24]
        break;
 80055b6:	e013      	b.n	80055e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b8:	f7fe f948 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 80055bc:	61b8      	str	r0, [r7, #24]
        break;
 80055be:	e00f      	b.n	80055e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c0:	4b4b      	ldr	r3, [pc, #300]	; (80056f0 <UART_SetConfig+0x4c4>)
 80055c2:	61bb      	str	r3, [r7, #24]
        break;
 80055c4:	e00c      	b.n	80055e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055c6:	f7fe f81d 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80055ca:	61b8      	str	r0, [r7, #24]
        break;
 80055cc:	e008      	b.n	80055e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055d2:	61bb      	str	r3, [r7, #24]
        break;
 80055d4:	e004      	b.n	80055e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	77bb      	strb	r3, [r7, #30]
        break;
 80055de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d074      	beq.n	80056d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	005a      	lsls	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	441a      	add	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b0f      	cmp	r3, #15
 8005600:	d916      	bls.n	8005630 <UART_SetConfig+0x404>
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005608:	d212      	bcs.n	8005630 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f023 030f 	bic.w	r3, r3, #15
 8005612:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	b29b      	uxth	r3, r3
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	b29a      	uxth	r2, r3
 8005620:	89fb      	ldrh	r3, [r7, #14]
 8005622:	4313      	orrs	r3, r2
 8005624:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	89fa      	ldrh	r2, [r7, #14]
 800562c:	60da      	str	r2, [r3, #12]
 800562e:	e04f      	b.n	80056d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	77bb      	strb	r3, [r7, #30]
 8005634:	e04c      	b.n	80056d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005636:	7ffb      	ldrb	r3, [r7, #31]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d828      	bhi.n	800568e <UART_SetConfig+0x462>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0x418>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005669 	.word	0x08005669
 8005648:	08005671 	.word	0x08005671
 800564c:	08005679 	.word	0x08005679
 8005650:	0800568f 	.word	0x0800568f
 8005654:	0800567f 	.word	0x0800567f
 8005658:	0800568f 	.word	0x0800568f
 800565c:	0800568f 	.word	0x0800568f
 8005660:	0800568f 	.word	0x0800568f
 8005664:	08005687 	.word	0x08005687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005668:	f7fe f8dc 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 800566c:	61b8      	str	r0, [r7, #24]
        break;
 800566e:	e013      	b.n	8005698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005670:	f7fe f8ec 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8005674:	61b8      	str	r0, [r7, #24]
        break;
 8005676:	e00f      	b.n	8005698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005678:	4b1d      	ldr	r3, [pc, #116]	; (80056f0 <UART_SetConfig+0x4c4>)
 800567a:	61bb      	str	r3, [r7, #24]
        break;
 800567c:	e00c      	b.n	8005698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800567e:	f7fd ffc1 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8005682:	61b8      	str	r0, [r7, #24]
        break;
 8005684:	e008      	b.n	8005698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568a:	61bb      	str	r3, [r7, #24]
        break;
 800568c:	e004      	b.n	8005698 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	77bb      	strb	r3, [r7, #30]
        break;
 8005696:	bf00      	nop
    }

    if (pclk != 0U)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d018      	beq.n	80056d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	085a      	lsrs	r2, r3, #1
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	441a      	add	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b0f      	cmp	r3, #15
 80056b6:	d909      	bls.n	80056cc <UART_SetConfig+0x4a0>
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056be:	d205      	bcs.n	80056cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	e001      	b.n	80056d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40007c00 	.word	0x40007c00
 80056ec:	40023800 	.word	0x40023800
 80056f0:	00f42400 	.word	0x00f42400

080056f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01a      	beq.n	800580a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f2:	d10a      	bne.n	800580a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af02      	add	r7, sp, #8
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005848:	f7fc f8b8 	bl	80019bc <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b08      	cmp	r3, #8
 800585a:	d10e      	bne.n	800587a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800585c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f831 	bl	80058d2 <UART_WaitOnFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e027      	b.n	80058ca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b04      	cmp	r3, #4
 8005886:	d10e      	bne.n	80058a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f81b 	bl	80058d2 <UART_WaitOnFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e011      	b.n	80058ca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b09c      	sub	sp, #112	; 0x70
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e2:	e0a7      	b.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	f000 80a3 	beq.w	8005a34 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fc f865 	bl	80019bc <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <UART_WaitOnFlagUntilTimeout+0x32>
 80058fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005900:	2b00      	cmp	r3, #0
 8005902:	d13f      	bne.n	8005984 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005918:	667b      	str	r3, [r7, #100]	; 0x64
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005924:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005928:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e6      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3308      	adds	r3, #8
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	663b      	str	r3, [r7, #96]	; 0x60
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005956:	64ba      	str	r2, [r7, #72]	; 0x48
 8005958:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800595c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e5      	bne.n	8005936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e068      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d050      	beq.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a0:	d148      	bne.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
 80059cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e6      	bne.n	80059ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	613b      	str	r3, [r7, #16]
   return(result);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059fe:	623a      	str	r2, [r7, #32]
 8005a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	69f9      	ldr	r1, [r7, #28]
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e010      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69da      	ldr	r2, [r3, #28]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	f43f af48 	beq.w	80058e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3770      	adds	r7, #112	; 0x70
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b095      	sub	sp, #84	; 0x54
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a84:	643b      	str	r3, [r7, #64]	; 0x40
 8005a86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e6      	bne.n	8005a66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f023 0301 	bic.w	r3, r3, #1
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e5      	bne.n	8005a98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d118      	bne.n	8005b06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f023 0310 	bic.w	r3, r3, #16
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6979      	ldr	r1, [r7, #20]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	613b      	str	r3, [r7, #16]
   return(result);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e6      	bne.n	8005ad4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b1a:	bf00      	nop
 8005b1c:	3754      	adds	r7, #84	; 0x54
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff fb51 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b08f      	sub	sp, #60	; 0x3c
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5e:	2b21      	cmp	r3, #33	; 0x21
 8005b60:	d14c      	bne.n	8005bfc <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d132      	bne.n	8005bd4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b82:	637b      	str	r3, [r7, #52]	; 0x34
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e6      	bne.n	8005b6e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005bd2:	e013      	b.n	8005bfc <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005bfc:	bf00      	nop
 8005bfe:	373c      	adds	r7, #60	; 0x3c
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b091      	sub	sp, #68	; 0x44
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c14:	2b21      	cmp	r3, #33	; 0x21
 8005c16:	d151      	bne.n	8005cbc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d132      	bne.n	8005c8a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	623b      	str	r3, [r7, #32]
   return(result);
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	633b      	str	r3, [r7, #48]	; 0x30
 8005c44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e6      	bne.n	8005c24 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	69b9      	ldr	r1, [r7, #24]
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	617b      	str	r3, [r7, #20]
   return(result);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e6      	bne.n	8005c56 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005c88:	e018      	b.n	8005cbc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca4:	1c9a      	adds	r2, r3, #2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005cbc:	bf00      	nop
 8005cbe:	3744      	adds	r7, #68	; 0x44
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6979      	ldr	r1, [r7, #20]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e6      	bne.n	8005cd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fa62 	bl	80051d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d14:	bf00      	nop
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <__errno>:
 8005d1c:	4b01      	ldr	r3, [pc, #4]	; (8005d24 <__errno+0x8>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	2000000c 	.word	0x2000000c

08005d28 <__libc_init_array>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4d0d      	ldr	r5, [pc, #52]	; (8005d60 <__libc_init_array+0x38>)
 8005d2c:	4c0d      	ldr	r4, [pc, #52]	; (8005d64 <__libc_init_array+0x3c>)
 8005d2e:	1b64      	subs	r4, r4, r5
 8005d30:	10a4      	asrs	r4, r4, #2
 8005d32:	2600      	movs	r6, #0
 8005d34:	42a6      	cmp	r6, r4
 8005d36:	d109      	bne.n	8005d4c <__libc_init_array+0x24>
 8005d38:	4d0b      	ldr	r5, [pc, #44]	; (8005d68 <__libc_init_array+0x40>)
 8005d3a:	4c0c      	ldr	r4, [pc, #48]	; (8005d6c <__libc_init_array+0x44>)
 8005d3c:	f004 fb88 	bl	800a450 <_init>
 8005d40:	1b64      	subs	r4, r4, r5
 8005d42:	10a4      	asrs	r4, r4, #2
 8005d44:	2600      	movs	r6, #0
 8005d46:	42a6      	cmp	r6, r4
 8005d48:	d105      	bne.n	8005d56 <__libc_init_array+0x2e>
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
 8005d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d50:	4798      	blx	r3
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7ee      	b.n	8005d34 <__libc_init_array+0xc>
 8005d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5a:	4798      	blx	r3
 8005d5c:	3601      	adds	r6, #1
 8005d5e:	e7f2      	b.n	8005d46 <__libc_init_array+0x1e>
 8005d60:	0800a934 	.word	0x0800a934
 8005d64:	0800a934 	.word	0x0800a934
 8005d68:	0800a934 	.word	0x0800a934
 8005d6c:	0800a938 	.word	0x0800a938

08005d70 <memset>:
 8005d70:	4402      	add	r2, r0
 8005d72:	4603      	mov	r3, r0
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d100      	bne.n	8005d7a <memset+0xa>
 8005d78:	4770      	bx	lr
 8005d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7e:	e7f9      	b.n	8005d74 <memset+0x4>

08005d80 <__cvt>:
 8005d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d82:	ed2d 8b02 	vpush	{d8}
 8005d86:	eeb0 8b40 	vmov.f64	d8, d0
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	4617      	mov	r7, r2
 8005d8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005d90:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005d92:	ee18 2a90 	vmov	r2, s17
 8005d96:	f025 0520 	bic.w	r5, r5, #32
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	bfb6      	itet	lt
 8005d9e:	222d      	movlt	r2, #45	; 0x2d
 8005da0:	2200      	movge	r2, #0
 8005da2:	eeb1 8b40 	vneglt.f64	d8, d0
 8005da6:	2d46      	cmp	r5, #70	; 0x46
 8005da8:	460c      	mov	r4, r1
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	d004      	beq.n	8005db8 <__cvt+0x38>
 8005dae:	2d45      	cmp	r5, #69	; 0x45
 8005db0:	d100      	bne.n	8005db4 <__cvt+0x34>
 8005db2:	3401      	adds	r4, #1
 8005db4:	2102      	movs	r1, #2
 8005db6:	e000      	b.n	8005dba <__cvt+0x3a>
 8005db8:	2103      	movs	r1, #3
 8005dba:	ab03      	add	r3, sp, #12
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	ab02      	add	r3, sp, #8
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	4633      	mov	r3, r6
 8005dc6:	eeb0 0b48 	vmov.f64	d0, d8
 8005dca:	f001 fd2d 	bl	8007828 <_dtoa_r>
 8005dce:	2d47      	cmp	r5, #71	; 0x47
 8005dd0:	d101      	bne.n	8005dd6 <__cvt+0x56>
 8005dd2:	07fb      	lsls	r3, r7, #31
 8005dd4:	d51a      	bpl.n	8005e0c <__cvt+0x8c>
 8005dd6:	2d46      	cmp	r5, #70	; 0x46
 8005dd8:	eb00 0204 	add.w	r2, r0, r4
 8005ddc:	d10c      	bne.n	8005df8 <__cvt+0x78>
 8005dde:	7803      	ldrb	r3, [r0, #0]
 8005de0:	2b30      	cmp	r3, #48	; 0x30
 8005de2:	d107      	bne.n	8005df4 <__cvt+0x74>
 8005de4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dec:	bf1c      	itt	ne
 8005dee:	f1c4 0401 	rsbne	r4, r4, #1
 8005df2:	6034      	strne	r4, [r6, #0]
 8005df4:	6833      	ldr	r3, [r6, #0]
 8005df6:	441a      	add	r2, r3
 8005df8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e00:	bf08      	it	eq
 8005e02:	9203      	streq	r2, [sp, #12]
 8005e04:	2130      	movs	r1, #48	; 0x30
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d307      	bcc.n	8005e1c <__cvt+0x9c>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e10:	1a1b      	subs	r3, r3, r0
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	b005      	add	sp, #20
 8005e16:	ecbd 8b02 	vpop	{d8}
 8005e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e1c:	1c5c      	adds	r4, r3, #1
 8005e1e:	9403      	str	r4, [sp, #12]
 8005e20:	7019      	strb	r1, [r3, #0]
 8005e22:	e7f0      	b.n	8005e06 <__cvt+0x86>

08005e24 <__exponent>:
 8005e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e26:	4603      	mov	r3, r0
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	bfb8      	it	lt
 8005e2c:	4249      	neglt	r1, r1
 8005e2e:	f803 2b02 	strb.w	r2, [r3], #2
 8005e32:	bfb4      	ite	lt
 8005e34:	222d      	movlt	r2, #45	; 0x2d
 8005e36:	222b      	movge	r2, #43	; 0x2b
 8005e38:	2909      	cmp	r1, #9
 8005e3a:	7042      	strb	r2, [r0, #1]
 8005e3c:	dd2a      	ble.n	8005e94 <__exponent+0x70>
 8005e3e:	f10d 0407 	add.w	r4, sp, #7
 8005e42:	46a4      	mov	ip, r4
 8005e44:	270a      	movs	r7, #10
 8005e46:	46a6      	mov	lr, r4
 8005e48:	460a      	mov	r2, r1
 8005e4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e4e:	fb07 1516 	mls	r5, r7, r6, r1
 8005e52:	3530      	adds	r5, #48	; 0x30
 8005e54:	2a63      	cmp	r2, #99	; 0x63
 8005e56:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e5e:	4631      	mov	r1, r6
 8005e60:	dcf1      	bgt.n	8005e46 <__exponent+0x22>
 8005e62:	3130      	adds	r1, #48	; 0x30
 8005e64:	f1ae 0502 	sub.w	r5, lr, #2
 8005e68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e6c:	1c44      	adds	r4, r0, #1
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4561      	cmp	r1, ip
 8005e72:	d30a      	bcc.n	8005e8a <__exponent+0x66>
 8005e74:	f10d 0209 	add.w	r2, sp, #9
 8005e78:	eba2 020e 	sub.w	r2, r2, lr
 8005e7c:	4565      	cmp	r5, ip
 8005e7e:	bf88      	it	hi
 8005e80:	2200      	movhi	r2, #0
 8005e82:	4413      	add	r3, r2
 8005e84:	1a18      	subs	r0, r3, r0
 8005e86:	b003      	add	sp, #12
 8005e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e92:	e7ed      	b.n	8005e70 <__exponent+0x4c>
 8005e94:	2330      	movs	r3, #48	; 0x30
 8005e96:	3130      	adds	r1, #48	; 0x30
 8005e98:	7083      	strb	r3, [r0, #2]
 8005e9a:	70c1      	strb	r1, [r0, #3]
 8005e9c:	1d03      	adds	r3, r0, #4
 8005e9e:	e7f1      	b.n	8005e84 <__exponent+0x60>

08005ea0 <_printf_float>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	b08b      	sub	sp, #44	; 0x2c
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005eac:	4616      	mov	r6, r2
 8005eae:	461f      	mov	r7, r3
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	f002 fd97 	bl	80089e4 <_localeconv_r>
 8005eb6:	f8d0 b000 	ldr.w	fp, [r0]
 8005eba:	4658      	mov	r0, fp
 8005ebc:	f7fa f9c0 	bl	8000240 <strlen>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9308      	str	r3, [sp, #32]
 8005ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	3307      	adds	r3, #7
 8005ed0:	f023 0307 	bic.w	r3, r3, #7
 8005ed4:	f103 0108 	add.w	r1, r3, #8
 8005ed8:	f8c8 1000 	str.w	r1, [r8]
 8005edc:	4682      	mov	sl, r0
 8005ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ee2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005ee6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006148 <_printf_float+0x2a8>
 8005eea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005eee:	eeb0 6bc0 	vabs.f64	d6, d0
 8005ef2:	eeb4 6b47 	vcmp.f64	d6, d7
 8005ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efa:	dd24      	ble.n	8005f46 <_printf_float+0xa6>
 8005efc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f04:	d502      	bpl.n	8005f0c <_printf_float+0x6c>
 8005f06:	232d      	movs	r3, #45	; 0x2d
 8005f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f0c:	4b90      	ldr	r3, [pc, #576]	; (8006150 <_printf_float+0x2b0>)
 8005f0e:	4891      	ldr	r0, [pc, #580]	; (8006154 <_printf_float+0x2b4>)
 8005f10:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005f14:	bf94      	ite	ls
 8005f16:	4698      	movls	r8, r3
 8005f18:	4680      	movhi	r8, r0
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	6123      	str	r3, [r4, #16]
 8005f1e:	f022 0204 	bic.w	r2, r2, #4
 8005f22:	2300      	movs	r3, #0
 8005f24:	6022      	str	r2, [r4, #0]
 8005f26:	9304      	str	r3, [sp, #16]
 8005f28:	9700      	str	r7, [sp, #0]
 8005f2a:	4633      	mov	r3, r6
 8005f2c:	aa09      	add	r2, sp, #36	; 0x24
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f000 f9d3 	bl	80062dc <_printf_common>
 8005f36:	3001      	adds	r0, #1
 8005f38:	f040 808a 	bne.w	8006050 <_printf_float+0x1b0>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b00b      	add	sp, #44	; 0x2c
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	eeb4 0b40 	vcmp.f64	d0, d0
 8005f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4e:	d709      	bvc.n	8005f64 <_printf_float+0xc4>
 8005f50:	ee10 3a90 	vmov	r3, s1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bfbc      	itt	lt
 8005f58:	232d      	movlt	r3, #45	; 0x2d
 8005f5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f5e:	487e      	ldr	r0, [pc, #504]	; (8006158 <_printf_float+0x2b8>)
 8005f60:	4b7e      	ldr	r3, [pc, #504]	; (800615c <_printf_float+0x2bc>)
 8005f62:	e7d5      	b.n	8005f10 <_printf_float+0x70>
 8005f64:	6863      	ldr	r3, [r4, #4]
 8005f66:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005f6a:	9104      	str	r1, [sp, #16]
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	d13c      	bne.n	8005fea <_printf_float+0x14a>
 8005f70:	2306      	movs	r3, #6
 8005f72:	6063      	str	r3, [r4, #4]
 8005f74:	2300      	movs	r3, #0
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	ab08      	add	r3, sp, #32
 8005f7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005f7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f82:	ab07      	add	r3, sp, #28
 8005f84:	6861      	ldr	r1, [r4, #4]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	6022      	str	r2, [r4, #0]
 8005f8a:	f10d 031b 	add.w	r3, sp, #27
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f7ff fef6 	bl	8005d80 <__cvt>
 8005f94:	9b04      	ldr	r3, [sp, #16]
 8005f96:	9907      	ldr	r1, [sp, #28]
 8005f98:	2b47      	cmp	r3, #71	; 0x47
 8005f9a:	4680      	mov	r8, r0
 8005f9c:	d108      	bne.n	8005fb0 <_printf_float+0x110>
 8005f9e:	1cc8      	adds	r0, r1, #3
 8005fa0:	db02      	blt.n	8005fa8 <_printf_float+0x108>
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	4299      	cmp	r1, r3
 8005fa6:	dd41      	ble.n	800602c <_printf_float+0x18c>
 8005fa8:	f1a9 0902 	sub.w	r9, r9, #2
 8005fac:	fa5f f989 	uxtb.w	r9, r9
 8005fb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005fb4:	d820      	bhi.n	8005ff8 <_printf_float+0x158>
 8005fb6:	3901      	subs	r1, #1
 8005fb8:	464a      	mov	r2, r9
 8005fba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fbe:	9107      	str	r1, [sp, #28]
 8005fc0:	f7ff ff30 	bl	8005e24 <__exponent>
 8005fc4:	9a08      	ldr	r2, [sp, #32]
 8005fc6:	9004      	str	r0, [sp, #16]
 8005fc8:	1813      	adds	r3, r2, r0
 8005fca:	2a01      	cmp	r2, #1
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	dc02      	bgt.n	8005fd6 <_printf_float+0x136>
 8005fd0:	6822      	ldr	r2, [r4, #0]
 8005fd2:	07d2      	lsls	r2, r2, #31
 8005fd4:	d501      	bpl.n	8005fda <_printf_float+0x13a>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0a2      	beq.n	8005f28 <_printf_float+0x88>
 8005fe2:	232d      	movs	r3, #45	; 0x2d
 8005fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe8:	e79e      	b.n	8005f28 <_printf_float+0x88>
 8005fea:	9904      	ldr	r1, [sp, #16]
 8005fec:	2947      	cmp	r1, #71	; 0x47
 8005fee:	d1c1      	bne.n	8005f74 <_printf_float+0xd4>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1bf      	bne.n	8005f74 <_printf_float+0xd4>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e7bc      	b.n	8005f72 <_printf_float+0xd2>
 8005ff8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005ffc:	d118      	bne.n	8006030 <_printf_float+0x190>
 8005ffe:	2900      	cmp	r1, #0
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	dd0b      	ble.n	800601c <_printf_float+0x17c>
 8006004:	6121      	str	r1, [r4, #16]
 8006006:	b913      	cbnz	r3, 800600e <_printf_float+0x16e>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	07d0      	lsls	r0, r2, #31
 800600c:	d502      	bpl.n	8006014 <_printf_float+0x174>
 800600e:	3301      	adds	r3, #1
 8006010:	440b      	add	r3, r1
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	2300      	movs	r3, #0
 8006016:	65a1      	str	r1, [r4, #88]	; 0x58
 8006018:	9304      	str	r3, [sp, #16]
 800601a:	e7de      	b.n	8005fda <_printf_float+0x13a>
 800601c:	b913      	cbnz	r3, 8006024 <_printf_float+0x184>
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	07d2      	lsls	r2, r2, #31
 8006022:	d501      	bpl.n	8006028 <_printf_float+0x188>
 8006024:	3302      	adds	r3, #2
 8006026:	e7f4      	b.n	8006012 <_printf_float+0x172>
 8006028:	2301      	movs	r3, #1
 800602a:	e7f2      	b.n	8006012 <_printf_float+0x172>
 800602c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006030:	9b08      	ldr	r3, [sp, #32]
 8006032:	4299      	cmp	r1, r3
 8006034:	db05      	blt.n	8006042 <_printf_float+0x1a2>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	6121      	str	r1, [r4, #16]
 800603a:	07d8      	lsls	r0, r3, #31
 800603c:	d5ea      	bpl.n	8006014 <_printf_float+0x174>
 800603e:	1c4b      	adds	r3, r1, #1
 8006040:	e7e7      	b.n	8006012 <_printf_float+0x172>
 8006042:	2900      	cmp	r1, #0
 8006044:	bfd4      	ite	le
 8006046:	f1c1 0202 	rsble	r2, r1, #2
 800604a:	2201      	movgt	r2, #1
 800604c:	4413      	add	r3, r2
 800604e:	e7e0      	b.n	8006012 <_printf_float+0x172>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	055a      	lsls	r2, r3, #21
 8006054:	d407      	bmi.n	8006066 <_printf_float+0x1c6>
 8006056:	6923      	ldr	r3, [r4, #16]
 8006058:	4642      	mov	r2, r8
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	d12a      	bne.n	80060ba <_printf_float+0x21a>
 8006064:	e76a      	b.n	8005f3c <_printf_float+0x9c>
 8006066:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800606a:	f240 80e2 	bls.w	8006232 <_printf_float+0x392>
 800606e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006072:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607a:	d133      	bne.n	80060e4 <_printf_float+0x244>
 800607c:	4a38      	ldr	r2, [pc, #224]	; (8006160 <_printf_float+0x2c0>)
 800607e:	2301      	movs	r3, #1
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f af58 	beq.w	8005f3c <_printf_float+0x9c>
 800608c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006090:	429a      	cmp	r2, r3
 8006092:	db02      	blt.n	800609a <_printf_float+0x1fa>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	07d8      	lsls	r0, r3, #31
 8006098:	d50f      	bpl.n	80060ba <_printf_float+0x21a>
 800609a:	4653      	mov	r3, sl
 800609c:	465a      	mov	r2, fp
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f af49 	beq.w	8005f3c <_printf_float+0x9c>
 80060aa:	f04f 0800 	mov.w	r8, #0
 80060ae:	f104 091a 	add.w	r9, r4, #26
 80060b2:	9b08      	ldr	r3, [sp, #32]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	4543      	cmp	r3, r8
 80060b8:	dc09      	bgt.n	80060ce <_printf_float+0x22e>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	079b      	lsls	r3, r3, #30
 80060be:	f100 8108 	bmi.w	80062d2 <_printf_float+0x432>
 80060c2:	68e0      	ldr	r0, [r4, #12]
 80060c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c6:	4298      	cmp	r0, r3
 80060c8:	bfb8      	it	lt
 80060ca:	4618      	movlt	r0, r3
 80060cc:	e738      	b.n	8005f40 <_printf_float+0xa0>
 80060ce:	2301      	movs	r3, #1
 80060d0:	464a      	mov	r2, r9
 80060d2:	4631      	mov	r1, r6
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b8      	blx	r7
 80060d8:	3001      	adds	r0, #1
 80060da:	f43f af2f 	beq.w	8005f3c <_printf_float+0x9c>
 80060de:	f108 0801 	add.w	r8, r8, #1
 80060e2:	e7e6      	b.n	80060b2 <_printf_float+0x212>
 80060e4:	9b07      	ldr	r3, [sp, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dc3c      	bgt.n	8006164 <_printf_float+0x2c4>
 80060ea:	4a1d      	ldr	r2, [pc, #116]	; (8006160 <_printf_float+0x2c0>)
 80060ec:	2301      	movs	r3, #1
 80060ee:	4631      	mov	r1, r6
 80060f0:	4628      	mov	r0, r5
 80060f2:	47b8      	blx	r7
 80060f4:	3001      	adds	r0, #1
 80060f6:	f43f af21 	beq.w	8005f3c <_printf_float+0x9c>
 80060fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80060fe:	4313      	orrs	r3, r2
 8006100:	d102      	bne.n	8006108 <_printf_float+0x268>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	07d9      	lsls	r1, r3, #31
 8006106:	d5d8      	bpl.n	80060ba <_printf_float+0x21a>
 8006108:	4653      	mov	r3, sl
 800610a:	465a      	mov	r2, fp
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f af12 	beq.w	8005f3c <_printf_float+0x9c>
 8006118:	f04f 0900 	mov.w	r9, #0
 800611c:	f104 0a1a 	add.w	sl, r4, #26
 8006120:	9b07      	ldr	r3, [sp, #28]
 8006122:	425b      	negs	r3, r3
 8006124:	454b      	cmp	r3, r9
 8006126:	dc01      	bgt.n	800612c <_printf_float+0x28c>
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	e795      	b.n	8006058 <_printf_float+0x1b8>
 800612c:	2301      	movs	r3, #1
 800612e:	4652      	mov	r2, sl
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f af00 	beq.w	8005f3c <_printf_float+0x9c>
 800613c:	f109 0901 	add.w	r9, r9, #1
 8006140:	e7ee      	b.n	8006120 <_printf_float+0x280>
 8006142:	bf00      	nop
 8006144:	f3af 8000 	nop.w
 8006148:	ffffffff 	.word	0xffffffff
 800614c:	7fefffff 	.word	0x7fefffff
 8006150:	0800a48c 	.word	0x0800a48c
 8006154:	0800a490 	.word	0x0800a490
 8006158:	0800a498 	.word	0x0800a498
 800615c:	0800a494 	.word	0x0800a494
 8006160:	0800a49c 	.word	0x0800a49c
 8006164:	9a08      	ldr	r2, [sp, #32]
 8006166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006168:	429a      	cmp	r2, r3
 800616a:	bfa8      	it	ge
 800616c:	461a      	movge	r2, r3
 800616e:	2a00      	cmp	r2, #0
 8006170:	4691      	mov	r9, r2
 8006172:	dc38      	bgt.n	80061e6 <_printf_float+0x346>
 8006174:	2300      	movs	r3, #0
 8006176:	9305      	str	r3, [sp, #20]
 8006178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800617c:	f104 021a 	add.w	r2, r4, #26
 8006180:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006182:	9905      	ldr	r1, [sp, #20]
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	eba3 0309 	sub.w	r3, r3, r9
 800618a:	428b      	cmp	r3, r1
 800618c:	dc33      	bgt.n	80061f6 <_printf_float+0x356>
 800618e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006192:	429a      	cmp	r2, r3
 8006194:	db3c      	blt.n	8006210 <_printf_float+0x370>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	07da      	lsls	r2, r3, #31
 800619a:	d439      	bmi.n	8006210 <_printf_float+0x370>
 800619c:	9b08      	ldr	r3, [sp, #32]
 800619e:	9a04      	ldr	r2, [sp, #16]
 80061a0:	9907      	ldr	r1, [sp, #28]
 80061a2:	1a9a      	subs	r2, r3, r2
 80061a4:	eba3 0901 	sub.w	r9, r3, r1
 80061a8:	4591      	cmp	r9, r2
 80061aa:	bfa8      	it	ge
 80061ac:	4691      	movge	r9, r2
 80061ae:	f1b9 0f00 	cmp.w	r9, #0
 80061b2:	dc35      	bgt.n	8006220 <_printf_float+0x380>
 80061b4:	f04f 0800 	mov.w	r8, #0
 80061b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061bc:	f104 0a1a 	add.w	sl, r4, #26
 80061c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	eba3 0309 	sub.w	r3, r3, r9
 80061ca:	4543      	cmp	r3, r8
 80061cc:	f77f af75 	ble.w	80060ba <_printf_float+0x21a>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4652      	mov	r2, sl
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f aeae 	beq.w	8005f3c <_printf_float+0x9c>
 80061e0:	f108 0801 	add.w	r8, r8, #1
 80061e4:	e7ec      	b.n	80061c0 <_printf_float+0x320>
 80061e6:	4613      	mov	r3, r2
 80061e8:	4631      	mov	r1, r6
 80061ea:	4642      	mov	r2, r8
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	d1bf      	bne.n	8006174 <_printf_float+0x2d4>
 80061f4:	e6a2      	b.n	8005f3c <_printf_float+0x9c>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	9204      	str	r2, [sp, #16]
 80061fe:	47b8      	blx	r7
 8006200:	3001      	adds	r0, #1
 8006202:	f43f ae9b 	beq.w	8005f3c <_printf_float+0x9c>
 8006206:	9b05      	ldr	r3, [sp, #20]
 8006208:	9a04      	ldr	r2, [sp, #16]
 800620a:	3301      	adds	r3, #1
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	e7b7      	b.n	8006180 <_printf_float+0x2e0>
 8006210:	4653      	mov	r3, sl
 8006212:	465a      	mov	r2, fp
 8006214:	4631      	mov	r1, r6
 8006216:	4628      	mov	r0, r5
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	d1be      	bne.n	800619c <_printf_float+0x2fc>
 800621e:	e68d      	b.n	8005f3c <_printf_float+0x9c>
 8006220:	9a04      	ldr	r2, [sp, #16]
 8006222:	464b      	mov	r3, r9
 8006224:	4442      	add	r2, r8
 8006226:	4631      	mov	r1, r6
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	d1c1      	bne.n	80061b4 <_printf_float+0x314>
 8006230:	e684      	b.n	8005f3c <_printf_float+0x9c>
 8006232:	9a08      	ldr	r2, [sp, #32]
 8006234:	2a01      	cmp	r2, #1
 8006236:	dc01      	bgt.n	800623c <_printf_float+0x39c>
 8006238:	07db      	lsls	r3, r3, #31
 800623a:	d537      	bpl.n	80062ac <_printf_float+0x40c>
 800623c:	2301      	movs	r3, #1
 800623e:	4642      	mov	r2, r8
 8006240:	4631      	mov	r1, r6
 8006242:	4628      	mov	r0, r5
 8006244:	47b8      	blx	r7
 8006246:	3001      	adds	r0, #1
 8006248:	f43f ae78 	beq.w	8005f3c <_printf_float+0x9c>
 800624c:	4653      	mov	r3, sl
 800624e:	465a      	mov	r2, fp
 8006250:	4631      	mov	r1, r6
 8006252:	4628      	mov	r0, r5
 8006254:	47b8      	blx	r7
 8006256:	3001      	adds	r0, #1
 8006258:	f43f ae70 	beq.w	8005f3c <_printf_float+0x9c>
 800625c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006260:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006268:	d01b      	beq.n	80062a2 <_printf_float+0x402>
 800626a:	9b08      	ldr	r3, [sp, #32]
 800626c:	f108 0201 	add.w	r2, r8, #1
 8006270:	3b01      	subs	r3, #1
 8006272:	4631      	mov	r1, r6
 8006274:	4628      	mov	r0, r5
 8006276:	47b8      	blx	r7
 8006278:	3001      	adds	r0, #1
 800627a:	d10e      	bne.n	800629a <_printf_float+0x3fa>
 800627c:	e65e      	b.n	8005f3c <_printf_float+0x9c>
 800627e:	2301      	movs	r3, #1
 8006280:	464a      	mov	r2, r9
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	f43f ae57 	beq.w	8005f3c <_printf_float+0x9c>
 800628e:	f108 0801 	add.w	r8, r8, #1
 8006292:	9b08      	ldr	r3, [sp, #32]
 8006294:	3b01      	subs	r3, #1
 8006296:	4543      	cmp	r3, r8
 8006298:	dcf1      	bgt.n	800627e <_printf_float+0x3de>
 800629a:	9b04      	ldr	r3, [sp, #16]
 800629c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062a0:	e6db      	b.n	800605a <_printf_float+0x1ba>
 80062a2:	f04f 0800 	mov.w	r8, #0
 80062a6:	f104 091a 	add.w	r9, r4, #26
 80062aa:	e7f2      	b.n	8006292 <_printf_float+0x3f2>
 80062ac:	2301      	movs	r3, #1
 80062ae:	4642      	mov	r2, r8
 80062b0:	e7df      	b.n	8006272 <_printf_float+0x3d2>
 80062b2:	2301      	movs	r3, #1
 80062b4:	464a      	mov	r2, r9
 80062b6:	4631      	mov	r1, r6
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b8      	blx	r7
 80062bc:	3001      	adds	r0, #1
 80062be:	f43f ae3d 	beq.w	8005f3c <_printf_float+0x9c>
 80062c2:	f108 0801 	add.w	r8, r8, #1
 80062c6:	68e3      	ldr	r3, [r4, #12]
 80062c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ca:	1a5b      	subs	r3, r3, r1
 80062cc:	4543      	cmp	r3, r8
 80062ce:	dcf0      	bgt.n	80062b2 <_printf_float+0x412>
 80062d0:	e6f7      	b.n	80060c2 <_printf_float+0x222>
 80062d2:	f04f 0800 	mov.w	r8, #0
 80062d6:	f104 0919 	add.w	r9, r4, #25
 80062da:	e7f4      	b.n	80062c6 <_printf_float+0x426>

080062dc <_printf_common>:
 80062dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e0:	4616      	mov	r6, r2
 80062e2:	4699      	mov	r9, r3
 80062e4:	688a      	ldr	r2, [r1, #8]
 80062e6:	690b      	ldr	r3, [r1, #16]
 80062e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062ec:	4293      	cmp	r3, r2
 80062ee:	bfb8      	it	lt
 80062f0:	4613      	movlt	r3, r2
 80062f2:	6033      	str	r3, [r6, #0]
 80062f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062f8:	4607      	mov	r7, r0
 80062fa:	460c      	mov	r4, r1
 80062fc:	b10a      	cbz	r2, 8006302 <_printf_common+0x26>
 80062fe:	3301      	adds	r3, #1
 8006300:	6033      	str	r3, [r6, #0]
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	0699      	lsls	r1, r3, #26
 8006306:	bf42      	ittt	mi
 8006308:	6833      	ldrmi	r3, [r6, #0]
 800630a:	3302      	addmi	r3, #2
 800630c:	6033      	strmi	r3, [r6, #0]
 800630e:	6825      	ldr	r5, [r4, #0]
 8006310:	f015 0506 	ands.w	r5, r5, #6
 8006314:	d106      	bne.n	8006324 <_printf_common+0x48>
 8006316:	f104 0a19 	add.w	sl, r4, #25
 800631a:	68e3      	ldr	r3, [r4, #12]
 800631c:	6832      	ldr	r2, [r6, #0]
 800631e:	1a9b      	subs	r3, r3, r2
 8006320:	42ab      	cmp	r3, r5
 8006322:	dc26      	bgt.n	8006372 <_printf_common+0x96>
 8006324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006328:	1e13      	subs	r3, r2, #0
 800632a:	6822      	ldr	r2, [r4, #0]
 800632c:	bf18      	it	ne
 800632e:	2301      	movne	r3, #1
 8006330:	0692      	lsls	r2, r2, #26
 8006332:	d42b      	bmi.n	800638c <_printf_common+0xb0>
 8006334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006338:	4649      	mov	r1, r9
 800633a:	4638      	mov	r0, r7
 800633c:	47c0      	blx	r8
 800633e:	3001      	adds	r0, #1
 8006340:	d01e      	beq.n	8006380 <_printf_common+0xa4>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	68e5      	ldr	r5, [r4, #12]
 8006346:	6832      	ldr	r2, [r6, #0]
 8006348:	f003 0306 	and.w	r3, r3, #6
 800634c:	2b04      	cmp	r3, #4
 800634e:	bf08      	it	eq
 8006350:	1aad      	subeq	r5, r5, r2
 8006352:	68a3      	ldr	r3, [r4, #8]
 8006354:	6922      	ldr	r2, [r4, #16]
 8006356:	bf0c      	ite	eq
 8006358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800635c:	2500      	movne	r5, #0
 800635e:	4293      	cmp	r3, r2
 8006360:	bfc4      	itt	gt
 8006362:	1a9b      	subgt	r3, r3, r2
 8006364:	18ed      	addgt	r5, r5, r3
 8006366:	2600      	movs	r6, #0
 8006368:	341a      	adds	r4, #26
 800636a:	42b5      	cmp	r5, r6
 800636c:	d11a      	bne.n	80063a4 <_printf_common+0xc8>
 800636e:	2000      	movs	r0, #0
 8006370:	e008      	b.n	8006384 <_printf_common+0xa8>
 8006372:	2301      	movs	r3, #1
 8006374:	4652      	mov	r2, sl
 8006376:	4649      	mov	r1, r9
 8006378:	4638      	mov	r0, r7
 800637a:	47c0      	blx	r8
 800637c:	3001      	adds	r0, #1
 800637e:	d103      	bne.n	8006388 <_printf_common+0xac>
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	3501      	adds	r5, #1
 800638a:	e7c6      	b.n	800631a <_printf_common+0x3e>
 800638c:	18e1      	adds	r1, r4, r3
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	2030      	movs	r0, #48	; 0x30
 8006392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006396:	4422      	add	r2, r4
 8006398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800639c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063a0:	3302      	adds	r3, #2
 80063a2:	e7c7      	b.n	8006334 <_printf_common+0x58>
 80063a4:	2301      	movs	r3, #1
 80063a6:	4622      	mov	r2, r4
 80063a8:	4649      	mov	r1, r9
 80063aa:	4638      	mov	r0, r7
 80063ac:	47c0      	blx	r8
 80063ae:	3001      	adds	r0, #1
 80063b0:	d0e6      	beq.n	8006380 <_printf_common+0xa4>
 80063b2:	3601      	adds	r6, #1
 80063b4:	e7d9      	b.n	800636a <_printf_common+0x8e>
	...

080063b8 <_printf_i>:
 80063b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	7e0f      	ldrb	r7, [r1, #24]
 80063be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063c0:	2f78      	cmp	r7, #120	; 0x78
 80063c2:	4691      	mov	r9, r2
 80063c4:	4680      	mov	r8, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	469a      	mov	sl, r3
 80063ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063ce:	d807      	bhi.n	80063e0 <_printf_i+0x28>
 80063d0:	2f62      	cmp	r7, #98	; 0x62
 80063d2:	d80a      	bhi.n	80063ea <_printf_i+0x32>
 80063d4:	2f00      	cmp	r7, #0
 80063d6:	f000 80d8 	beq.w	800658a <_printf_i+0x1d2>
 80063da:	2f58      	cmp	r7, #88	; 0x58
 80063dc:	f000 80a3 	beq.w	8006526 <_printf_i+0x16e>
 80063e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063e8:	e03a      	b.n	8006460 <_printf_i+0xa8>
 80063ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ee:	2b15      	cmp	r3, #21
 80063f0:	d8f6      	bhi.n	80063e0 <_printf_i+0x28>
 80063f2:	a101      	add	r1, pc, #4	; (adr r1, 80063f8 <_printf_i+0x40>)
 80063f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063f8:	08006451 	.word	0x08006451
 80063fc:	08006465 	.word	0x08006465
 8006400:	080063e1 	.word	0x080063e1
 8006404:	080063e1 	.word	0x080063e1
 8006408:	080063e1 	.word	0x080063e1
 800640c:	080063e1 	.word	0x080063e1
 8006410:	08006465 	.word	0x08006465
 8006414:	080063e1 	.word	0x080063e1
 8006418:	080063e1 	.word	0x080063e1
 800641c:	080063e1 	.word	0x080063e1
 8006420:	080063e1 	.word	0x080063e1
 8006424:	08006571 	.word	0x08006571
 8006428:	08006495 	.word	0x08006495
 800642c:	08006553 	.word	0x08006553
 8006430:	080063e1 	.word	0x080063e1
 8006434:	080063e1 	.word	0x080063e1
 8006438:	08006593 	.word	0x08006593
 800643c:	080063e1 	.word	0x080063e1
 8006440:	08006495 	.word	0x08006495
 8006444:	080063e1 	.word	0x080063e1
 8006448:	080063e1 	.word	0x080063e1
 800644c:	0800655b 	.word	0x0800655b
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	1d1a      	adds	r2, r3, #4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	602a      	str	r2, [r5, #0]
 8006458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800645c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006460:	2301      	movs	r3, #1
 8006462:	e0a3      	b.n	80065ac <_printf_i+0x1f4>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	6829      	ldr	r1, [r5, #0]
 8006468:	0606      	lsls	r6, r0, #24
 800646a:	f101 0304 	add.w	r3, r1, #4
 800646e:	d50a      	bpl.n	8006486 <_printf_i+0xce>
 8006470:	680e      	ldr	r6, [r1, #0]
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	2e00      	cmp	r6, #0
 8006476:	da03      	bge.n	8006480 <_printf_i+0xc8>
 8006478:	232d      	movs	r3, #45	; 0x2d
 800647a:	4276      	negs	r6, r6
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006480:	485e      	ldr	r0, [pc, #376]	; (80065fc <_printf_i+0x244>)
 8006482:	230a      	movs	r3, #10
 8006484:	e019      	b.n	80064ba <_printf_i+0x102>
 8006486:	680e      	ldr	r6, [r1, #0]
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800648e:	bf18      	it	ne
 8006490:	b236      	sxthne	r6, r6
 8006492:	e7ef      	b.n	8006474 <_printf_i+0xbc>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	6820      	ldr	r0, [r4, #0]
 8006498:	1d19      	adds	r1, r3, #4
 800649a:	6029      	str	r1, [r5, #0]
 800649c:	0601      	lsls	r1, r0, #24
 800649e:	d501      	bpl.n	80064a4 <_printf_i+0xec>
 80064a0:	681e      	ldr	r6, [r3, #0]
 80064a2:	e002      	b.n	80064aa <_printf_i+0xf2>
 80064a4:	0646      	lsls	r6, r0, #25
 80064a6:	d5fb      	bpl.n	80064a0 <_printf_i+0xe8>
 80064a8:	881e      	ldrh	r6, [r3, #0]
 80064aa:	4854      	ldr	r0, [pc, #336]	; (80065fc <_printf_i+0x244>)
 80064ac:	2f6f      	cmp	r7, #111	; 0x6f
 80064ae:	bf0c      	ite	eq
 80064b0:	2308      	moveq	r3, #8
 80064b2:	230a      	movne	r3, #10
 80064b4:	2100      	movs	r1, #0
 80064b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ba:	6865      	ldr	r5, [r4, #4]
 80064bc:	60a5      	str	r5, [r4, #8]
 80064be:	2d00      	cmp	r5, #0
 80064c0:	bfa2      	ittt	ge
 80064c2:	6821      	ldrge	r1, [r4, #0]
 80064c4:	f021 0104 	bicge.w	r1, r1, #4
 80064c8:	6021      	strge	r1, [r4, #0]
 80064ca:	b90e      	cbnz	r6, 80064d0 <_printf_i+0x118>
 80064cc:	2d00      	cmp	r5, #0
 80064ce:	d04d      	beq.n	800656c <_printf_i+0x1b4>
 80064d0:	4615      	mov	r5, r2
 80064d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80064d6:	fb03 6711 	mls	r7, r3, r1, r6
 80064da:	5dc7      	ldrb	r7, [r0, r7]
 80064dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064e0:	4637      	mov	r7, r6
 80064e2:	42bb      	cmp	r3, r7
 80064e4:	460e      	mov	r6, r1
 80064e6:	d9f4      	bls.n	80064d2 <_printf_i+0x11a>
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d10b      	bne.n	8006504 <_printf_i+0x14c>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	07de      	lsls	r6, r3, #31
 80064f0:	d508      	bpl.n	8006504 <_printf_i+0x14c>
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	6861      	ldr	r1, [r4, #4]
 80064f6:	4299      	cmp	r1, r3
 80064f8:	bfde      	ittt	le
 80064fa:	2330      	movle	r3, #48	; 0x30
 80064fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006500:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006504:	1b52      	subs	r2, r2, r5
 8006506:	6122      	str	r2, [r4, #16]
 8006508:	f8cd a000 	str.w	sl, [sp]
 800650c:	464b      	mov	r3, r9
 800650e:	aa03      	add	r2, sp, #12
 8006510:	4621      	mov	r1, r4
 8006512:	4640      	mov	r0, r8
 8006514:	f7ff fee2 	bl	80062dc <_printf_common>
 8006518:	3001      	adds	r0, #1
 800651a:	d14c      	bne.n	80065b6 <_printf_i+0x1fe>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	b004      	add	sp, #16
 8006522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006526:	4835      	ldr	r0, [pc, #212]	; (80065fc <_printf_i+0x244>)
 8006528:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800652c:	6829      	ldr	r1, [r5, #0]
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	f851 6b04 	ldr.w	r6, [r1], #4
 8006534:	6029      	str	r1, [r5, #0]
 8006536:	061d      	lsls	r5, r3, #24
 8006538:	d514      	bpl.n	8006564 <_printf_i+0x1ac>
 800653a:	07df      	lsls	r7, r3, #31
 800653c:	bf44      	itt	mi
 800653e:	f043 0320 	orrmi.w	r3, r3, #32
 8006542:	6023      	strmi	r3, [r4, #0]
 8006544:	b91e      	cbnz	r6, 800654e <_printf_i+0x196>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	f023 0320 	bic.w	r3, r3, #32
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	2310      	movs	r3, #16
 8006550:	e7b0      	b.n	80064b4 <_printf_i+0xfc>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	f043 0320 	orr.w	r3, r3, #32
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	2378      	movs	r3, #120	; 0x78
 800655c:	4828      	ldr	r0, [pc, #160]	; (8006600 <_printf_i+0x248>)
 800655e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006562:	e7e3      	b.n	800652c <_printf_i+0x174>
 8006564:	0659      	lsls	r1, r3, #25
 8006566:	bf48      	it	mi
 8006568:	b2b6      	uxthmi	r6, r6
 800656a:	e7e6      	b.n	800653a <_printf_i+0x182>
 800656c:	4615      	mov	r5, r2
 800656e:	e7bb      	b.n	80064e8 <_printf_i+0x130>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	6826      	ldr	r6, [r4, #0]
 8006574:	6961      	ldr	r1, [r4, #20]
 8006576:	1d18      	adds	r0, r3, #4
 8006578:	6028      	str	r0, [r5, #0]
 800657a:	0635      	lsls	r5, r6, #24
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	d501      	bpl.n	8006584 <_printf_i+0x1cc>
 8006580:	6019      	str	r1, [r3, #0]
 8006582:	e002      	b.n	800658a <_printf_i+0x1d2>
 8006584:	0670      	lsls	r0, r6, #25
 8006586:	d5fb      	bpl.n	8006580 <_printf_i+0x1c8>
 8006588:	8019      	strh	r1, [r3, #0]
 800658a:	2300      	movs	r3, #0
 800658c:	6123      	str	r3, [r4, #16]
 800658e:	4615      	mov	r5, r2
 8006590:	e7ba      	b.n	8006508 <_printf_i+0x150>
 8006592:	682b      	ldr	r3, [r5, #0]
 8006594:	1d1a      	adds	r2, r3, #4
 8006596:	602a      	str	r2, [r5, #0]
 8006598:	681d      	ldr	r5, [r3, #0]
 800659a:	6862      	ldr	r2, [r4, #4]
 800659c:	2100      	movs	r1, #0
 800659e:	4628      	mov	r0, r5
 80065a0:	f7f9 fe56 	bl	8000250 <memchr>
 80065a4:	b108      	cbz	r0, 80065aa <_printf_i+0x1f2>
 80065a6:	1b40      	subs	r0, r0, r5
 80065a8:	6060      	str	r0, [r4, #4]
 80065aa:	6863      	ldr	r3, [r4, #4]
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	2300      	movs	r3, #0
 80065b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b4:	e7a8      	b.n	8006508 <_printf_i+0x150>
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	462a      	mov	r2, r5
 80065ba:	4649      	mov	r1, r9
 80065bc:	4640      	mov	r0, r8
 80065be:	47d0      	blx	sl
 80065c0:	3001      	adds	r0, #1
 80065c2:	d0ab      	beq.n	800651c <_printf_i+0x164>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	079b      	lsls	r3, r3, #30
 80065c8:	d413      	bmi.n	80065f2 <_printf_i+0x23a>
 80065ca:	68e0      	ldr	r0, [r4, #12]
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	4298      	cmp	r0, r3
 80065d0:	bfb8      	it	lt
 80065d2:	4618      	movlt	r0, r3
 80065d4:	e7a4      	b.n	8006520 <_printf_i+0x168>
 80065d6:	2301      	movs	r3, #1
 80065d8:	4632      	mov	r2, r6
 80065da:	4649      	mov	r1, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	47d0      	blx	sl
 80065e0:	3001      	adds	r0, #1
 80065e2:	d09b      	beq.n	800651c <_printf_i+0x164>
 80065e4:	3501      	adds	r5, #1
 80065e6:	68e3      	ldr	r3, [r4, #12]
 80065e8:	9903      	ldr	r1, [sp, #12]
 80065ea:	1a5b      	subs	r3, r3, r1
 80065ec:	42ab      	cmp	r3, r5
 80065ee:	dcf2      	bgt.n	80065d6 <_printf_i+0x21e>
 80065f0:	e7eb      	b.n	80065ca <_printf_i+0x212>
 80065f2:	2500      	movs	r5, #0
 80065f4:	f104 0619 	add.w	r6, r4, #25
 80065f8:	e7f5      	b.n	80065e6 <_printf_i+0x22e>
 80065fa:	bf00      	nop
 80065fc:	0800a49e 	.word	0x0800a49e
 8006600:	0800a4af 	.word	0x0800a4af

08006604 <_scanf_float>:
 8006604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	b087      	sub	sp, #28
 800660a:	4617      	mov	r7, r2
 800660c:	9303      	str	r3, [sp, #12]
 800660e:	688b      	ldr	r3, [r1, #8]
 8006610:	1e5a      	subs	r2, r3, #1
 8006612:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006616:	bf83      	ittte	hi
 8006618:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800661c:	195b      	addhi	r3, r3, r5
 800661e:	9302      	strhi	r3, [sp, #8]
 8006620:	2300      	movls	r3, #0
 8006622:	bf86      	itte	hi
 8006624:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006628:	608b      	strhi	r3, [r1, #8]
 800662a:	9302      	strls	r3, [sp, #8]
 800662c:	680b      	ldr	r3, [r1, #0]
 800662e:	468b      	mov	fp, r1
 8006630:	2500      	movs	r5, #0
 8006632:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006636:	f84b 3b1c 	str.w	r3, [fp], #28
 800663a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800663e:	4680      	mov	r8, r0
 8006640:	460c      	mov	r4, r1
 8006642:	465e      	mov	r6, fp
 8006644:	46aa      	mov	sl, r5
 8006646:	46a9      	mov	r9, r5
 8006648:	9501      	str	r5, [sp, #4]
 800664a:	68a2      	ldr	r2, [r4, #8]
 800664c:	b152      	cbz	r2, 8006664 <_scanf_float+0x60>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b4e      	cmp	r3, #78	; 0x4e
 8006654:	d864      	bhi.n	8006720 <_scanf_float+0x11c>
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d83c      	bhi.n	80066d4 <_scanf_float+0xd0>
 800665a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800665e:	b2c8      	uxtb	r0, r1
 8006660:	280e      	cmp	r0, #14
 8006662:	d93a      	bls.n	80066da <_scanf_float+0xd6>
 8006664:	f1b9 0f00 	cmp.w	r9, #0
 8006668:	d003      	beq.n	8006672 <_scanf_float+0x6e>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006676:	f1ba 0f01 	cmp.w	sl, #1
 800667a:	f200 8113 	bhi.w	80068a4 <_scanf_float+0x2a0>
 800667e:	455e      	cmp	r6, fp
 8006680:	f200 8105 	bhi.w	800688e <_scanf_float+0x28a>
 8006684:	2501      	movs	r5, #1
 8006686:	4628      	mov	r0, r5
 8006688:	b007      	add	sp, #28
 800668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006692:	2a0d      	cmp	r2, #13
 8006694:	d8e6      	bhi.n	8006664 <_scanf_float+0x60>
 8006696:	a101      	add	r1, pc, #4	; (adr r1, 800669c <_scanf_float+0x98>)
 8006698:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800669c:	080067db 	.word	0x080067db
 80066a0:	08006665 	.word	0x08006665
 80066a4:	08006665 	.word	0x08006665
 80066a8:	08006665 	.word	0x08006665
 80066ac:	0800683b 	.word	0x0800683b
 80066b0:	08006813 	.word	0x08006813
 80066b4:	08006665 	.word	0x08006665
 80066b8:	08006665 	.word	0x08006665
 80066bc:	080067e9 	.word	0x080067e9
 80066c0:	08006665 	.word	0x08006665
 80066c4:	08006665 	.word	0x08006665
 80066c8:	08006665 	.word	0x08006665
 80066cc:	08006665 	.word	0x08006665
 80066d0:	080067a1 	.word	0x080067a1
 80066d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80066d8:	e7db      	b.n	8006692 <_scanf_float+0x8e>
 80066da:	290e      	cmp	r1, #14
 80066dc:	d8c2      	bhi.n	8006664 <_scanf_float+0x60>
 80066de:	a001      	add	r0, pc, #4	; (adr r0, 80066e4 <_scanf_float+0xe0>)
 80066e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80066e4:	08006793 	.word	0x08006793
 80066e8:	08006665 	.word	0x08006665
 80066ec:	08006793 	.word	0x08006793
 80066f0:	08006827 	.word	0x08006827
 80066f4:	08006665 	.word	0x08006665
 80066f8:	08006741 	.word	0x08006741
 80066fc:	0800677d 	.word	0x0800677d
 8006700:	0800677d 	.word	0x0800677d
 8006704:	0800677d 	.word	0x0800677d
 8006708:	0800677d 	.word	0x0800677d
 800670c:	0800677d 	.word	0x0800677d
 8006710:	0800677d 	.word	0x0800677d
 8006714:	0800677d 	.word	0x0800677d
 8006718:	0800677d 	.word	0x0800677d
 800671c:	0800677d 	.word	0x0800677d
 8006720:	2b6e      	cmp	r3, #110	; 0x6e
 8006722:	d809      	bhi.n	8006738 <_scanf_float+0x134>
 8006724:	2b60      	cmp	r3, #96	; 0x60
 8006726:	d8b2      	bhi.n	800668e <_scanf_float+0x8a>
 8006728:	2b54      	cmp	r3, #84	; 0x54
 800672a:	d077      	beq.n	800681c <_scanf_float+0x218>
 800672c:	2b59      	cmp	r3, #89	; 0x59
 800672e:	d199      	bne.n	8006664 <_scanf_float+0x60>
 8006730:	2d07      	cmp	r5, #7
 8006732:	d197      	bne.n	8006664 <_scanf_float+0x60>
 8006734:	2508      	movs	r5, #8
 8006736:	e029      	b.n	800678c <_scanf_float+0x188>
 8006738:	2b74      	cmp	r3, #116	; 0x74
 800673a:	d06f      	beq.n	800681c <_scanf_float+0x218>
 800673c:	2b79      	cmp	r3, #121	; 0x79
 800673e:	e7f6      	b.n	800672e <_scanf_float+0x12a>
 8006740:	6821      	ldr	r1, [r4, #0]
 8006742:	05c8      	lsls	r0, r1, #23
 8006744:	d51a      	bpl.n	800677c <_scanf_float+0x178>
 8006746:	9b02      	ldr	r3, [sp, #8]
 8006748:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800674c:	6021      	str	r1, [r4, #0]
 800674e:	f109 0901 	add.w	r9, r9, #1
 8006752:	b11b      	cbz	r3, 800675c <_scanf_float+0x158>
 8006754:	3b01      	subs	r3, #1
 8006756:	3201      	adds	r2, #1
 8006758:	9302      	str	r3, [sp, #8]
 800675a:	60a2      	str	r2, [r4, #8]
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	3b01      	subs	r3, #1
 8006760:	60a3      	str	r3, [r4, #8]
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	3301      	adds	r3, #1
 8006766:	6123      	str	r3, [r4, #16]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3b01      	subs	r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	f340 8084 	ble.w	800687c <_scanf_float+0x278>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	3301      	adds	r3, #1
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	e766      	b.n	800664a <_scanf_float+0x46>
 800677c:	eb1a 0f05 	cmn.w	sl, r5
 8006780:	f47f af70 	bne.w	8006664 <_scanf_float+0x60>
 8006784:	6822      	ldr	r2, [r4, #0]
 8006786:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800678a:	6022      	str	r2, [r4, #0]
 800678c:	f806 3b01 	strb.w	r3, [r6], #1
 8006790:	e7e4      	b.n	800675c <_scanf_float+0x158>
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	0610      	lsls	r0, r2, #24
 8006796:	f57f af65 	bpl.w	8006664 <_scanf_float+0x60>
 800679a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800679e:	e7f4      	b.n	800678a <_scanf_float+0x186>
 80067a0:	f1ba 0f00 	cmp.w	sl, #0
 80067a4:	d10e      	bne.n	80067c4 <_scanf_float+0x1c0>
 80067a6:	f1b9 0f00 	cmp.w	r9, #0
 80067aa:	d10e      	bne.n	80067ca <_scanf_float+0x1c6>
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067b6:	d108      	bne.n	80067ca <_scanf_float+0x1c6>
 80067b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067bc:	6022      	str	r2, [r4, #0]
 80067be:	f04f 0a01 	mov.w	sl, #1
 80067c2:	e7e3      	b.n	800678c <_scanf_float+0x188>
 80067c4:	f1ba 0f02 	cmp.w	sl, #2
 80067c8:	d055      	beq.n	8006876 <_scanf_float+0x272>
 80067ca:	2d01      	cmp	r5, #1
 80067cc:	d002      	beq.n	80067d4 <_scanf_float+0x1d0>
 80067ce:	2d04      	cmp	r5, #4
 80067d0:	f47f af48 	bne.w	8006664 <_scanf_float+0x60>
 80067d4:	3501      	adds	r5, #1
 80067d6:	b2ed      	uxtb	r5, r5
 80067d8:	e7d8      	b.n	800678c <_scanf_float+0x188>
 80067da:	f1ba 0f01 	cmp.w	sl, #1
 80067de:	f47f af41 	bne.w	8006664 <_scanf_float+0x60>
 80067e2:	f04f 0a02 	mov.w	sl, #2
 80067e6:	e7d1      	b.n	800678c <_scanf_float+0x188>
 80067e8:	b97d      	cbnz	r5, 800680a <_scanf_float+0x206>
 80067ea:	f1b9 0f00 	cmp.w	r9, #0
 80067ee:	f47f af3c 	bne.w	800666a <_scanf_float+0x66>
 80067f2:	6822      	ldr	r2, [r4, #0]
 80067f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067fc:	f47f af39 	bne.w	8006672 <_scanf_float+0x6e>
 8006800:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006804:	6022      	str	r2, [r4, #0]
 8006806:	2501      	movs	r5, #1
 8006808:	e7c0      	b.n	800678c <_scanf_float+0x188>
 800680a:	2d03      	cmp	r5, #3
 800680c:	d0e2      	beq.n	80067d4 <_scanf_float+0x1d0>
 800680e:	2d05      	cmp	r5, #5
 8006810:	e7de      	b.n	80067d0 <_scanf_float+0x1cc>
 8006812:	2d02      	cmp	r5, #2
 8006814:	f47f af26 	bne.w	8006664 <_scanf_float+0x60>
 8006818:	2503      	movs	r5, #3
 800681a:	e7b7      	b.n	800678c <_scanf_float+0x188>
 800681c:	2d06      	cmp	r5, #6
 800681e:	f47f af21 	bne.w	8006664 <_scanf_float+0x60>
 8006822:	2507      	movs	r5, #7
 8006824:	e7b2      	b.n	800678c <_scanf_float+0x188>
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	0591      	lsls	r1, r2, #22
 800682a:	f57f af1b 	bpl.w	8006664 <_scanf_float+0x60>
 800682e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006832:	6022      	str	r2, [r4, #0]
 8006834:	f8cd 9004 	str.w	r9, [sp, #4]
 8006838:	e7a8      	b.n	800678c <_scanf_float+0x188>
 800683a:	6822      	ldr	r2, [r4, #0]
 800683c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006840:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006844:	d006      	beq.n	8006854 <_scanf_float+0x250>
 8006846:	0550      	lsls	r0, r2, #21
 8006848:	f57f af0c 	bpl.w	8006664 <_scanf_float+0x60>
 800684c:	f1b9 0f00 	cmp.w	r9, #0
 8006850:	f43f af0f 	beq.w	8006672 <_scanf_float+0x6e>
 8006854:	0591      	lsls	r1, r2, #22
 8006856:	bf58      	it	pl
 8006858:	9901      	ldrpl	r1, [sp, #4]
 800685a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800685e:	bf58      	it	pl
 8006860:	eba9 0101 	subpl.w	r1, r9, r1
 8006864:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006868:	bf58      	it	pl
 800686a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	f04f 0900 	mov.w	r9, #0
 8006874:	e78a      	b.n	800678c <_scanf_float+0x188>
 8006876:	f04f 0a03 	mov.w	sl, #3
 800687a:	e787      	b.n	800678c <_scanf_float+0x188>
 800687c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006880:	4639      	mov	r1, r7
 8006882:	4640      	mov	r0, r8
 8006884:	4798      	blx	r3
 8006886:	2800      	cmp	r0, #0
 8006888:	f43f aedf 	beq.w	800664a <_scanf_float+0x46>
 800688c:	e6ea      	b.n	8006664 <_scanf_float+0x60>
 800688e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006896:	463a      	mov	r2, r7
 8006898:	4640      	mov	r0, r8
 800689a:	4798      	blx	r3
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	3b01      	subs	r3, #1
 80068a0:	6123      	str	r3, [r4, #16]
 80068a2:	e6ec      	b.n	800667e <_scanf_float+0x7a>
 80068a4:	1e6b      	subs	r3, r5, #1
 80068a6:	2b06      	cmp	r3, #6
 80068a8:	d825      	bhi.n	80068f6 <_scanf_float+0x2f2>
 80068aa:	2d02      	cmp	r5, #2
 80068ac:	d836      	bhi.n	800691c <_scanf_float+0x318>
 80068ae:	455e      	cmp	r6, fp
 80068b0:	f67f aee8 	bls.w	8006684 <_scanf_float+0x80>
 80068b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068bc:	463a      	mov	r2, r7
 80068be:	4640      	mov	r0, r8
 80068c0:	4798      	blx	r3
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	6123      	str	r3, [r4, #16]
 80068c8:	e7f1      	b.n	80068ae <_scanf_float+0x2aa>
 80068ca:	9802      	ldr	r0, [sp, #8]
 80068cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80068d4:	9002      	str	r0, [sp, #8]
 80068d6:	463a      	mov	r2, r7
 80068d8:	4640      	mov	r0, r8
 80068da:	4798      	blx	r3
 80068dc:	6923      	ldr	r3, [r4, #16]
 80068de:	3b01      	subs	r3, #1
 80068e0:	6123      	str	r3, [r4, #16]
 80068e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068e6:	fa5f fa8a 	uxtb.w	sl, sl
 80068ea:	f1ba 0f02 	cmp.w	sl, #2
 80068ee:	d1ec      	bne.n	80068ca <_scanf_float+0x2c6>
 80068f0:	3d03      	subs	r5, #3
 80068f2:	b2ed      	uxtb	r5, r5
 80068f4:	1b76      	subs	r6, r6, r5
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	05da      	lsls	r2, r3, #23
 80068fa:	d52f      	bpl.n	800695c <_scanf_float+0x358>
 80068fc:	055b      	lsls	r3, r3, #21
 80068fe:	d510      	bpl.n	8006922 <_scanf_float+0x31e>
 8006900:	455e      	cmp	r6, fp
 8006902:	f67f aebf 	bls.w	8006684 <_scanf_float+0x80>
 8006906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800690a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800690e:	463a      	mov	r2, r7
 8006910:	4640      	mov	r0, r8
 8006912:	4798      	blx	r3
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	3b01      	subs	r3, #1
 8006918:	6123      	str	r3, [r4, #16]
 800691a:	e7f1      	b.n	8006900 <_scanf_float+0x2fc>
 800691c:	46aa      	mov	sl, r5
 800691e:	9602      	str	r6, [sp, #8]
 8006920:	e7df      	b.n	80068e2 <_scanf_float+0x2de>
 8006922:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	2965      	cmp	r1, #101	; 0x65
 800692a:	f103 33ff 	add.w	r3, r3, #4294967295
 800692e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	d00c      	beq.n	8006950 <_scanf_float+0x34c>
 8006936:	2945      	cmp	r1, #69	; 0x45
 8006938:	d00a      	beq.n	8006950 <_scanf_float+0x34c>
 800693a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800693e:	463a      	mov	r2, r7
 8006940:	4640      	mov	r0, r8
 8006942:	4798      	blx	r3
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800694a:	3b01      	subs	r3, #1
 800694c:	1eb5      	subs	r5, r6, #2
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006954:	463a      	mov	r2, r7
 8006956:	4640      	mov	r0, r8
 8006958:	4798      	blx	r3
 800695a:	462e      	mov	r6, r5
 800695c:	6825      	ldr	r5, [r4, #0]
 800695e:	f015 0510 	ands.w	r5, r5, #16
 8006962:	d14e      	bne.n	8006a02 <_scanf_float+0x3fe>
 8006964:	7035      	strb	r5, [r6, #0]
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006970:	d119      	bne.n	80069a6 <_scanf_float+0x3a2>
 8006972:	9b01      	ldr	r3, [sp, #4]
 8006974:	454b      	cmp	r3, r9
 8006976:	eba3 0209 	sub.w	r2, r3, r9
 800697a:	d121      	bne.n	80069c0 <_scanf_float+0x3bc>
 800697c:	2200      	movs	r2, #0
 800697e:	4659      	mov	r1, fp
 8006980:	4640      	mov	r0, r8
 8006982:	f000 fe3b 	bl	80075fc <_strtod_r>
 8006986:	6822      	ldr	r2, [r4, #0]
 8006988:	9b03      	ldr	r3, [sp, #12]
 800698a:	f012 0f02 	tst.w	r2, #2
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	d021      	beq.n	80069d6 <_scanf_float+0x3d2>
 8006992:	9903      	ldr	r1, [sp, #12]
 8006994:	1d1a      	adds	r2, r3, #4
 8006996:	600a      	str	r2, [r1, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	ed83 0b00 	vstr	d0, [r3]
 800699e:	68e3      	ldr	r3, [r4, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60e3      	str	r3, [r4, #12]
 80069a4:	e66f      	b.n	8006686 <_scanf_float+0x82>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0e7      	beq.n	800697c <_scanf_float+0x378>
 80069ac:	9905      	ldr	r1, [sp, #20]
 80069ae:	230a      	movs	r3, #10
 80069b0:	462a      	mov	r2, r5
 80069b2:	3101      	adds	r1, #1
 80069b4:	4640      	mov	r0, r8
 80069b6:	f000 fea9 	bl	800770c <_strtol_r>
 80069ba:	9b04      	ldr	r3, [sp, #16]
 80069bc:	9e05      	ldr	r6, [sp, #20]
 80069be:	1ac2      	subs	r2, r0, r3
 80069c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80069c4:	429e      	cmp	r6, r3
 80069c6:	bf28      	it	cs
 80069c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80069cc:	490e      	ldr	r1, [pc, #56]	; (8006a08 <_scanf_float+0x404>)
 80069ce:	4630      	mov	r0, r6
 80069d0:	f000 f824 	bl	8006a1c <siprintf>
 80069d4:	e7d2      	b.n	800697c <_scanf_float+0x378>
 80069d6:	9903      	ldr	r1, [sp, #12]
 80069d8:	f012 0f04 	tst.w	r2, #4
 80069dc:	f103 0204 	add.w	r2, r3, #4
 80069e0:	600a      	str	r2, [r1, #0]
 80069e2:	d1d9      	bne.n	8006998 <_scanf_float+0x394>
 80069e4:	eeb4 0b40 	vcmp.f64	d0, d0
 80069e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ec:	681e      	ldr	r6, [r3, #0]
 80069ee:	d705      	bvc.n	80069fc <_scanf_float+0x3f8>
 80069f0:	4806      	ldr	r0, [pc, #24]	; (8006a0c <_scanf_float+0x408>)
 80069f2:	f000 f80d 	bl	8006a10 <nanf>
 80069f6:	ed86 0a00 	vstr	s0, [r6]
 80069fa:	e7d0      	b.n	800699e <_scanf_float+0x39a>
 80069fc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006a00:	e7f9      	b.n	80069f6 <_scanf_float+0x3f2>
 8006a02:	2500      	movs	r5, #0
 8006a04:	e63f      	b.n	8006686 <_scanf_float+0x82>
 8006a06:	bf00      	nop
 8006a08:	0800a4c0 	.word	0x0800a4c0
 8006a0c:	0800a8c8 	.word	0x0800a8c8

08006a10 <nanf>:
 8006a10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006a18 <nanf+0x8>
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	7fc00000 	.word	0x7fc00000

08006a1c <siprintf>:
 8006a1c:	b40e      	push	{r1, r2, r3}
 8006a1e:	b500      	push	{lr}
 8006a20:	b09c      	sub	sp, #112	; 0x70
 8006a22:	ab1d      	add	r3, sp, #116	; 0x74
 8006a24:	9002      	str	r0, [sp, #8]
 8006a26:	9006      	str	r0, [sp, #24]
 8006a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a2c:	4809      	ldr	r0, [pc, #36]	; (8006a54 <siprintf+0x38>)
 8006a2e:	9107      	str	r1, [sp, #28]
 8006a30:	9104      	str	r1, [sp, #16]
 8006a32:	4909      	ldr	r1, [pc, #36]	; (8006a58 <siprintf+0x3c>)
 8006a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a38:	9105      	str	r1, [sp, #20]
 8006a3a:	6800      	ldr	r0, [r0, #0]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	a902      	add	r1, sp, #8
 8006a40:	f002 fe0c 	bl	800965c <_svfiprintf_r>
 8006a44:	9b02      	ldr	r3, [sp, #8]
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	b01c      	add	sp, #112	; 0x70
 8006a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a50:	b003      	add	sp, #12
 8006a52:	4770      	bx	lr
 8006a54:	2000000c 	.word	0x2000000c
 8006a58:	ffff0208 	.word	0xffff0208

08006a5c <sulp>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4604      	mov	r4, r0
 8006a60:	460d      	mov	r5, r1
 8006a62:	4616      	mov	r6, r2
 8006a64:	ec45 4b10 	vmov	d0, r4, r5
 8006a68:	f002 fb5a 	bl	8009120 <__ulp>
 8006a6c:	b17e      	cbz	r6, 8006a8e <sulp+0x32>
 8006a6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dd09      	ble.n	8006a8e <sulp+0x32>
 8006a7a:	051b      	lsls	r3, r3, #20
 8006a7c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006a80:	2000      	movs	r0, #0
 8006a82:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006a86:	ec41 0b17 	vmov	d7, r0, r1
 8006a8a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}

08006a90 <_strtod_l>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	ed2d 8b0e 	vpush	{d8-d14}
 8006a98:	b097      	sub	sp, #92	; 0x5c
 8006a9a:	461f      	mov	r7, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9312      	str	r3, [sp, #72]	; 0x48
 8006aa0:	4ba1      	ldr	r3, [pc, #644]	; (8006d28 <_strtod_l+0x298>)
 8006aa2:	920d      	str	r2, [sp, #52]	; 0x34
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	9307      	str	r3, [sp, #28]
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	468b      	mov	fp, r1
 8006aae:	f7f9 fbc7 	bl	8000240 <strlen>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	f04f 0900 	mov.w	r9, #0
 8006abc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ac2:	7813      	ldrb	r3, [r2, #0]
 8006ac4:	2b2b      	cmp	r3, #43	; 0x2b
 8006ac6:	d04d      	beq.n	8006b64 <_strtod_l+0xd4>
 8006ac8:	d83a      	bhi.n	8006b40 <_strtod_l+0xb0>
 8006aca:	2b0d      	cmp	r3, #13
 8006acc:	d833      	bhi.n	8006b36 <_strtod_l+0xa6>
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d833      	bhi.n	8006b3a <_strtod_l+0xaa>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d03d      	beq.n	8006b52 <_strtod_l+0xc2>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9308      	str	r3, [sp, #32]
 8006ada:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006adc:	7833      	ldrb	r3, [r6, #0]
 8006ade:	2b30      	cmp	r3, #48	; 0x30
 8006ae0:	f040 80b0 	bne.w	8006c44 <_strtod_l+0x1b4>
 8006ae4:	7873      	ldrb	r3, [r6, #1]
 8006ae6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006aea:	2b58      	cmp	r3, #88	; 0x58
 8006aec:	d167      	bne.n	8006bbe <_strtod_l+0x12e>
 8006aee:	9b08      	ldr	r3, [sp, #32]
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	ab12      	add	r3, sp, #72	; 0x48
 8006af4:	9702      	str	r7, [sp, #8]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	4a8c      	ldr	r2, [pc, #560]	; (8006d2c <_strtod_l+0x29c>)
 8006afa:	ab13      	add	r3, sp, #76	; 0x4c
 8006afc:	a911      	add	r1, sp, #68	; 0x44
 8006afe:	4620      	mov	r0, r4
 8006b00:	f001 fc68 	bl	80083d4 <__gethex>
 8006b04:	f010 0507 	ands.w	r5, r0, #7
 8006b08:	4607      	mov	r7, r0
 8006b0a:	d005      	beq.n	8006b18 <_strtod_l+0x88>
 8006b0c:	2d06      	cmp	r5, #6
 8006b0e:	d12b      	bne.n	8006b68 <_strtod_l+0xd8>
 8006b10:	3601      	adds	r6, #1
 8006b12:	2300      	movs	r3, #0
 8006b14:	9611      	str	r6, [sp, #68]	; 0x44
 8006b16:	9308      	str	r3, [sp, #32]
 8006b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 854e 	bne.w	80075bc <_strtod_l+0xb2c>
 8006b20:	9b08      	ldr	r3, [sp, #32]
 8006b22:	b1e3      	cbz	r3, 8006b5e <_strtod_l+0xce>
 8006b24:	ec49 8b17 	vmov	d7, r8, r9
 8006b28:	eeb1 0b47 	vneg.f64	d0, d7
 8006b2c:	b017      	add	sp, #92	; 0x5c
 8006b2e:	ecbd 8b0e 	vpop	{d8-d14}
 8006b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d1cd      	bne.n	8006ad6 <_strtod_l+0x46>
 8006b3a:	3201      	adds	r2, #1
 8006b3c:	9211      	str	r2, [sp, #68]	; 0x44
 8006b3e:	e7bf      	b.n	8006ac0 <_strtod_l+0x30>
 8006b40:	2b2d      	cmp	r3, #45	; 0x2d
 8006b42:	d1c8      	bne.n	8006ad6 <_strtod_l+0x46>
 8006b44:	2301      	movs	r3, #1
 8006b46:	9308      	str	r3, [sp, #32]
 8006b48:	1c53      	adds	r3, r2, #1
 8006b4a:	9311      	str	r3, [sp, #68]	; 0x44
 8006b4c:	7853      	ldrb	r3, [r2, #1]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1c3      	bne.n	8006ada <_strtod_l+0x4a>
 8006b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b54:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 852d 	bne.w	80075b8 <_strtod_l+0xb28>
 8006b5e:	ec49 8b10 	vmov	d0, r8, r9
 8006b62:	e7e3      	b.n	8006b2c <_strtod_l+0x9c>
 8006b64:	2300      	movs	r3, #0
 8006b66:	e7ee      	b.n	8006b46 <_strtod_l+0xb6>
 8006b68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b6a:	b13a      	cbz	r2, 8006b7c <_strtod_l+0xec>
 8006b6c:	2135      	movs	r1, #53	; 0x35
 8006b6e:	a814      	add	r0, sp, #80	; 0x50
 8006b70:	f002 fbde 	bl	8009330 <__copybits>
 8006b74:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006b76:	4620      	mov	r0, r4
 8006b78:	f001 ffa0 	bl	8008abc <_Bfree>
 8006b7c:	3d01      	subs	r5, #1
 8006b7e:	2d04      	cmp	r5, #4
 8006b80:	d806      	bhi.n	8006b90 <_strtod_l+0x100>
 8006b82:	e8df f005 	tbb	[pc, r5]
 8006b86:	030a      	.short	0x030a
 8006b88:	1714      	.short	0x1714
 8006b8a:	0a          	.byte	0x0a
 8006b8b:	00          	.byte	0x00
 8006b8c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8006b90:	073f      	lsls	r7, r7, #28
 8006b92:	d5c1      	bpl.n	8006b18 <_strtod_l+0x88>
 8006b94:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006b98:	e7be      	b.n	8006b18 <_strtod_l+0x88>
 8006b9a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8006b9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ba0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ba4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006ba8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006bac:	e7f0      	b.n	8006b90 <_strtod_l+0x100>
 8006bae:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8006d30 <_strtod_l+0x2a0>
 8006bb2:	e7ed      	b.n	8006b90 <_strtod_l+0x100>
 8006bb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006bb8:	f04f 38ff 	mov.w	r8, #4294967295
 8006bbc:	e7e8      	b.n	8006b90 <_strtod_l+0x100>
 8006bbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	9211      	str	r2, [sp, #68]	; 0x44
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	2b30      	cmp	r3, #48	; 0x30
 8006bc8:	d0f9      	beq.n	8006bbe <_strtod_l+0x12e>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0a4      	beq.n	8006b18 <_strtod_l+0x88>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f04f 0a00 	mov.w	sl, #0
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bda:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006bde:	f8cd a018 	str.w	sl, [sp, #24]
 8006be2:	220a      	movs	r2, #10
 8006be4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006be6:	7807      	ldrb	r7, [r0, #0]
 8006be8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006bec:	b2d9      	uxtb	r1, r3
 8006bee:	2909      	cmp	r1, #9
 8006bf0:	d92a      	bls.n	8006c48 <_strtod_l+0x1b8>
 8006bf2:	9907      	ldr	r1, [sp, #28]
 8006bf4:	462a      	mov	r2, r5
 8006bf6:	f002 fe4b 	bl	8009890 <strncmp>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d033      	beq.n	8006c66 <_strtod_l+0x1d6>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	9b06      	ldr	r3, [sp, #24]
 8006c02:	463a      	mov	r2, r7
 8006c04:	4601      	mov	r1, r0
 8006c06:	4607      	mov	r7, r0
 8006c08:	2a65      	cmp	r2, #101	; 0x65
 8006c0a:	d001      	beq.n	8006c10 <_strtod_l+0x180>
 8006c0c:	2a45      	cmp	r2, #69	; 0x45
 8006c0e:	d117      	bne.n	8006c40 <_strtod_l+0x1b0>
 8006c10:	b91b      	cbnz	r3, 8006c1a <_strtod_l+0x18a>
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	4303      	orrs	r3, r0
 8006c16:	d09c      	beq.n	8006b52 <_strtod_l+0xc2>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8006c1e:	f10b 0201 	add.w	r2, fp, #1
 8006c22:	9211      	str	r2, [sp, #68]	; 0x44
 8006c24:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8006c28:	2a2b      	cmp	r2, #43	; 0x2b
 8006c2a:	d071      	beq.n	8006d10 <_strtod_l+0x280>
 8006c2c:	2a2d      	cmp	r2, #45	; 0x2d
 8006c2e:	d077      	beq.n	8006d20 <_strtod_l+0x290>
 8006c30:	f04f 0e00 	mov.w	lr, #0
 8006c34:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006c38:	2d09      	cmp	r5, #9
 8006c3a:	d97f      	bls.n	8006d3c <_strtod_l+0x2ac>
 8006c3c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006c40:	2500      	movs	r5, #0
 8006c42:	e09b      	b.n	8006d7c <_strtod_l+0x2ec>
 8006c44:	2300      	movs	r3, #0
 8006c46:	e7c3      	b.n	8006bd0 <_strtod_l+0x140>
 8006c48:	9906      	ldr	r1, [sp, #24]
 8006c4a:	2908      	cmp	r1, #8
 8006c4c:	bfdd      	ittte	le
 8006c4e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006c50:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c54:	9309      	strle	r3, [sp, #36]	; 0x24
 8006c56:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006c5a:	9b06      	ldr	r3, [sp, #24]
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	3301      	adds	r3, #1
 8006c60:	9306      	str	r3, [sp, #24]
 8006c62:	9011      	str	r0, [sp, #68]	; 0x44
 8006c64:	e7be      	b.n	8006be4 <_strtod_l+0x154>
 8006c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c68:	195a      	adds	r2, r3, r5
 8006c6a:	9211      	str	r2, [sp, #68]	; 0x44
 8006c6c:	5d5a      	ldrb	r2, [r3, r5]
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	b3a3      	cbz	r3, 8006cdc <_strtod_l+0x24c>
 8006c72:	4607      	mov	r7, r0
 8006c74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c78:	2909      	cmp	r1, #9
 8006c7a:	d912      	bls.n	8006ca2 <_strtod_l+0x212>
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	e7c3      	b.n	8006c08 <_strtod_l+0x178>
 8006c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	9211      	str	r2, [sp, #68]	; 0x44
 8006c86:	785a      	ldrb	r2, [r3, #1]
 8006c88:	3001      	adds	r0, #1
 8006c8a:	2a30      	cmp	r2, #48	; 0x30
 8006c8c:	d0f8      	beq.n	8006c80 <_strtod_l+0x1f0>
 8006c8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006c92:	2b08      	cmp	r3, #8
 8006c94:	f200 8497 	bhi.w	80075c6 <_strtod_l+0xb36>
 8006c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	3a30      	subs	r2, #48	; 0x30
 8006ca4:	f100 0101 	add.w	r1, r0, #1
 8006ca8:	d012      	beq.n	8006cd0 <_strtod_l+0x240>
 8006caa:	440f      	add	r7, r1
 8006cac:	eb00 0c03 	add.w	ip, r0, r3
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	250a      	movs	r5, #10
 8006cb4:	4561      	cmp	r1, ip
 8006cb6:	d113      	bne.n	8006ce0 <_strtod_l+0x250>
 8006cb8:	1819      	adds	r1, r3, r0
 8006cba:	2908      	cmp	r1, #8
 8006cbc:	f103 0301 	add.w	r3, r3, #1
 8006cc0:	4403      	add	r3, r0
 8006cc2:	dc1c      	bgt.n	8006cfe <_strtod_l+0x26e>
 8006cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cc6:	210a      	movs	r1, #10
 8006cc8:	fb01 2200 	mla	r2, r1, r0, r2
 8006ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cce:	2100      	movs	r1, #0
 8006cd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cd2:	1c50      	adds	r0, r2, #1
 8006cd4:	9011      	str	r0, [sp, #68]	; 0x44
 8006cd6:	7852      	ldrb	r2, [r2, #1]
 8006cd8:	4608      	mov	r0, r1
 8006cda:	e7cb      	b.n	8006c74 <_strtod_l+0x1e4>
 8006cdc:	9806      	ldr	r0, [sp, #24]
 8006cde:	e7d4      	b.n	8006c8a <_strtod_l+0x1fa>
 8006ce0:	2908      	cmp	r1, #8
 8006ce2:	dc04      	bgt.n	8006cee <_strtod_l+0x25e>
 8006ce4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ce6:	436e      	muls	r6, r5
 8006ce8:	9609      	str	r6, [sp, #36]	; 0x24
 8006cea:	3101      	adds	r1, #1
 8006cec:	e7e2      	b.n	8006cb4 <_strtod_l+0x224>
 8006cee:	f101 0e01 	add.w	lr, r1, #1
 8006cf2:	f1be 0f10 	cmp.w	lr, #16
 8006cf6:	bfd8      	it	le
 8006cf8:	fb05 fa0a 	mulle.w	sl, r5, sl
 8006cfc:	e7f5      	b.n	8006cea <_strtod_l+0x25a>
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	bfdc      	itt	le
 8006d02:	210a      	movle	r1, #10
 8006d04:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8006d08:	e7e1      	b.n	8006cce <_strtod_l+0x23e>
 8006d0a:	2700      	movs	r7, #0
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	e780      	b.n	8006c12 <_strtod_l+0x182>
 8006d10:	f04f 0e00 	mov.w	lr, #0
 8006d14:	f10b 0202 	add.w	r2, fp, #2
 8006d18:	9211      	str	r2, [sp, #68]	; 0x44
 8006d1a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8006d1e:	e789      	b.n	8006c34 <_strtod_l+0x1a4>
 8006d20:	f04f 0e01 	mov.w	lr, #1
 8006d24:	e7f6      	b.n	8006d14 <_strtod_l+0x284>
 8006d26:	bf00      	nop
 8006d28:	0800a710 	.word	0x0800a710
 8006d2c:	0800a4c8 	.word	0x0800a4c8
 8006d30:	7ff00000 	.word	0x7ff00000
 8006d34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d36:	1c55      	adds	r5, r2, #1
 8006d38:	9511      	str	r5, [sp, #68]	; 0x44
 8006d3a:	7852      	ldrb	r2, [r2, #1]
 8006d3c:	2a30      	cmp	r2, #48	; 0x30
 8006d3e:	d0f9      	beq.n	8006d34 <_strtod_l+0x2a4>
 8006d40:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006d44:	2d08      	cmp	r5, #8
 8006d46:	f63f af7b 	bhi.w	8006c40 <_strtod_l+0x1b0>
 8006d4a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006d4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d50:	9207      	str	r2, [sp, #28]
 8006d52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d54:	1c55      	adds	r5, r2, #1
 8006d56:	9511      	str	r5, [sp, #68]	; 0x44
 8006d58:	7852      	ldrb	r2, [r2, #1]
 8006d5a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006d5e:	2e09      	cmp	r6, #9
 8006d60:	d937      	bls.n	8006dd2 <_strtod_l+0x342>
 8006d62:	9e07      	ldr	r6, [sp, #28]
 8006d64:	1bad      	subs	r5, r5, r6
 8006d66:	2d08      	cmp	r5, #8
 8006d68:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006d6c:	dc02      	bgt.n	8006d74 <_strtod_l+0x2e4>
 8006d6e:	4565      	cmp	r5, ip
 8006d70:	bfa8      	it	ge
 8006d72:	4665      	movge	r5, ip
 8006d74:	f1be 0f00 	cmp.w	lr, #0
 8006d78:	d000      	beq.n	8006d7c <_strtod_l+0x2ec>
 8006d7a:	426d      	negs	r5, r5
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d14d      	bne.n	8006e1c <_strtod_l+0x38c>
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	4303      	orrs	r3, r0
 8006d84:	f47f aec8 	bne.w	8006b18 <_strtod_l+0x88>
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	f47f aee2 	bne.w	8006b52 <_strtod_l+0xc2>
 8006d8e:	2a69      	cmp	r2, #105	; 0x69
 8006d90:	d027      	beq.n	8006de2 <_strtod_l+0x352>
 8006d92:	dc24      	bgt.n	8006dde <_strtod_l+0x34e>
 8006d94:	2a49      	cmp	r2, #73	; 0x49
 8006d96:	d024      	beq.n	8006de2 <_strtod_l+0x352>
 8006d98:	2a4e      	cmp	r2, #78	; 0x4e
 8006d9a:	f47f aeda 	bne.w	8006b52 <_strtod_l+0xc2>
 8006d9e:	4996      	ldr	r1, [pc, #600]	; (8006ff8 <_strtod_l+0x568>)
 8006da0:	a811      	add	r0, sp, #68	; 0x44
 8006da2:	f001 fd6f 	bl	8008884 <__match>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f43f aed3 	beq.w	8006b52 <_strtod_l+0xc2>
 8006dac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b28      	cmp	r3, #40	; 0x28
 8006db2:	d12d      	bne.n	8006e10 <_strtod_l+0x380>
 8006db4:	4991      	ldr	r1, [pc, #580]	; (8006ffc <_strtod_l+0x56c>)
 8006db6:	aa14      	add	r2, sp, #80	; 0x50
 8006db8:	a811      	add	r0, sp, #68	; 0x44
 8006dba:	f001 fd77 	bl	80088ac <__hexnan>
 8006dbe:	2805      	cmp	r0, #5
 8006dc0:	d126      	bne.n	8006e10 <_strtod_l+0x380>
 8006dc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dc4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006dc8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006dcc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006dd0:	e6a2      	b.n	8006b18 <_strtod_l+0x88>
 8006dd2:	250a      	movs	r5, #10
 8006dd4:	fb05 250c 	mla	r5, r5, ip, r2
 8006dd8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8006ddc:	e7b9      	b.n	8006d52 <_strtod_l+0x2c2>
 8006dde:	2a6e      	cmp	r2, #110	; 0x6e
 8006de0:	e7db      	b.n	8006d9a <_strtod_l+0x30a>
 8006de2:	4987      	ldr	r1, [pc, #540]	; (8007000 <_strtod_l+0x570>)
 8006de4:	a811      	add	r0, sp, #68	; 0x44
 8006de6:	f001 fd4d 	bl	8008884 <__match>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	f43f aeb1 	beq.w	8006b52 <_strtod_l+0xc2>
 8006df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006df2:	4984      	ldr	r1, [pc, #528]	; (8007004 <_strtod_l+0x574>)
 8006df4:	3b01      	subs	r3, #1
 8006df6:	a811      	add	r0, sp, #68	; 0x44
 8006df8:	9311      	str	r3, [sp, #68]	; 0x44
 8006dfa:	f001 fd43 	bl	8008884 <__match>
 8006dfe:	b910      	cbnz	r0, 8006e06 <_strtod_l+0x376>
 8006e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e02:	3301      	adds	r3, #1
 8006e04:	9311      	str	r3, [sp, #68]	; 0x44
 8006e06:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8007018 <_strtod_l+0x588>
 8006e0a:	f04f 0800 	mov.w	r8, #0
 8006e0e:	e683      	b.n	8006b18 <_strtod_l+0x88>
 8006e10:	487d      	ldr	r0, [pc, #500]	; (8007008 <_strtod_l+0x578>)
 8006e12:	f002 fd25 	bl	8009860 <nan>
 8006e16:	ec59 8b10 	vmov	r8, r9, d0
 8006e1a:	e67d      	b.n	8006b18 <_strtod_l+0x88>
 8006e1c:	1bea      	subs	r2, r5, r7
 8006e1e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8006e22:	9207      	str	r2, [sp, #28]
 8006e24:	9a06      	ldr	r2, [sp, #24]
 8006e26:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	bf08      	it	eq
 8006e2e:	461a      	moveq	r2, r3
 8006e30:	2b10      	cmp	r3, #16
 8006e32:	9206      	str	r2, [sp, #24]
 8006e34:	461a      	mov	r2, r3
 8006e36:	bfa8      	it	ge
 8006e38:	2210      	movge	r2, #16
 8006e3a:	2b09      	cmp	r3, #9
 8006e3c:	ec59 8b17 	vmov	r8, r9, d7
 8006e40:	dd0c      	ble.n	8006e5c <_strtod_l+0x3cc>
 8006e42:	4972      	ldr	r1, [pc, #456]	; (800700c <_strtod_l+0x57c>)
 8006e44:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006e48:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8006e4c:	ee06 aa90 	vmov	s13, sl
 8006e50:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8006e54:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006e58:	ec59 8b16 	vmov	r8, r9, d6
 8006e5c:	2b0f      	cmp	r3, #15
 8006e5e:	dc36      	bgt.n	8006ece <_strtod_l+0x43e>
 8006e60:	9907      	ldr	r1, [sp, #28]
 8006e62:	2900      	cmp	r1, #0
 8006e64:	f43f ae58 	beq.w	8006b18 <_strtod_l+0x88>
 8006e68:	dd23      	ble.n	8006eb2 <_strtod_l+0x422>
 8006e6a:	2916      	cmp	r1, #22
 8006e6c:	dc0b      	bgt.n	8006e86 <_strtod_l+0x3f6>
 8006e6e:	4b67      	ldr	r3, [pc, #412]	; (800700c <_strtod_l+0x57c>)
 8006e70:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006e74:	ed93 7b00 	vldr	d7, [r3]
 8006e78:	ec49 8b16 	vmov	d6, r8, r9
 8006e7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e80:	ec59 8b17 	vmov	r8, r9, d7
 8006e84:	e648      	b.n	8006b18 <_strtod_l+0x88>
 8006e86:	9807      	ldr	r0, [sp, #28]
 8006e88:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006e8c:	4281      	cmp	r1, r0
 8006e8e:	db1e      	blt.n	8006ece <_strtod_l+0x43e>
 8006e90:	4a5e      	ldr	r2, [pc, #376]	; (800700c <_strtod_l+0x57c>)
 8006e92:	f1c3 030f 	rsb	r3, r3, #15
 8006e96:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006e9a:	ed91 7b00 	vldr	d7, [r1]
 8006e9e:	ec49 8b16 	vmov	d6, r8, r9
 8006ea2:	1ac3      	subs	r3, r0, r3
 8006ea4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006ea8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eac:	ed92 6b00 	vldr	d6, [r2]
 8006eb0:	e7e4      	b.n	8006e7c <_strtod_l+0x3ec>
 8006eb2:	9907      	ldr	r1, [sp, #28]
 8006eb4:	3116      	adds	r1, #22
 8006eb6:	db0a      	blt.n	8006ece <_strtod_l+0x43e>
 8006eb8:	4b54      	ldr	r3, [pc, #336]	; (800700c <_strtod_l+0x57c>)
 8006eba:	1b7d      	subs	r5, r7, r5
 8006ebc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006ec0:	ed95 7b00 	vldr	d7, [r5]
 8006ec4:	ec49 8b16 	vmov	d6, r8, r9
 8006ec8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006ecc:	e7d8      	b.n	8006e80 <_strtod_l+0x3f0>
 8006ece:	9907      	ldr	r1, [sp, #28]
 8006ed0:	1a9a      	subs	r2, r3, r2
 8006ed2:	440a      	add	r2, r1
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	dd6f      	ble.n	8006fb8 <_strtod_l+0x528>
 8006ed8:	f012 000f 	ands.w	r0, r2, #15
 8006edc:	d00a      	beq.n	8006ef4 <_strtod_l+0x464>
 8006ede:	494b      	ldr	r1, [pc, #300]	; (800700c <_strtod_l+0x57c>)
 8006ee0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006ee4:	ed91 7b00 	vldr	d7, [r1]
 8006ee8:	ec49 8b16 	vmov	d6, r8, r9
 8006eec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ef0:	ec59 8b17 	vmov	r8, r9, d7
 8006ef4:	f032 020f 	bics.w	r2, r2, #15
 8006ef8:	d04f      	beq.n	8006f9a <_strtod_l+0x50a>
 8006efa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006efe:	dd22      	ble.n	8006f46 <_strtod_l+0x4b6>
 8006f00:	2500      	movs	r5, #0
 8006f02:	462e      	mov	r6, r5
 8006f04:	9506      	str	r5, [sp, #24]
 8006f06:	462f      	mov	r7, r5
 8006f08:	2322      	movs	r3, #34	; 0x22
 8006f0a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8007018 <_strtod_l+0x588>
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	f04f 0800 	mov.w	r8, #0
 8006f14:	9b06      	ldr	r3, [sp, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f43f adfe 	beq.w	8006b18 <_strtod_l+0x88>
 8006f1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f001 fdcc 	bl	8008abc <_Bfree>
 8006f24:	4639      	mov	r1, r7
 8006f26:	4620      	mov	r0, r4
 8006f28:	f001 fdc8 	bl	8008abc <_Bfree>
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f001 fdc4 	bl	8008abc <_Bfree>
 8006f34:	9906      	ldr	r1, [sp, #24]
 8006f36:	4620      	mov	r0, r4
 8006f38:	f001 fdc0 	bl	8008abc <_Bfree>
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f001 fdbc 	bl	8008abc <_Bfree>
 8006f44:	e5e8      	b.n	8006b18 <_strtod_l+0x88>
 8006f46:	2000      	movs	r0, #0
 8006f48:	ec49 8b17 	vmov	d7, r8, r9
 8006f4c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8007010 <_strtod_l+0x580>
 8006f50:	1112      	asrs	r2, r2, #4
 8006f52:	4601      	mov	r1, r0
 8006f54:	2a01      	cmp	r2, #1
 8006f56:	dc23      	bgt.n	8006fa0 <_strtod_l+0x510>
 8006f58:	b108      	cbz	r0, 8006f5e <_strtod_l+0x4ce>
 8006f5a:	ec59 8b17 	vmov	r8, r9, d7
 8006f5e:	4a2c      	ldr	r2, [pc, #176]	; (8007010 <_strtod_l+0x580>)
 8006f60:	482c      	ldr	r0, [pc, #176]	; (8007014 <_strtod_l+0x584>)
 8006f62:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006f66:	ed92 7b00 	vldr	d7, [r2]
 8006f6a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006f6e:	ec49 8b16 	vmov	d6, r8, r9
 8006f72:	4a29      	ldr	r2, [pc, #164]	; (8007018 <_strtod_l+0x588>)
 8006f74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f78:	ee17 1a90 	vmov	r1, s15
 8006f7c:	400a      	ands	r2, r1
 8006f7e:	4282      	cmp	r2, r0
 8006f80:	ec59 8b17 	vmov	r8, r9, d7
 8006f84:	d8bc      	bhi.n	8006f00 <_strtod_l+0x470>
 8006f86:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8006f8a:	4282      	cmp	r2, r0
 8006f8c:	bf86      	itte	hi
 8006f8e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800701c <_strtod_l+0x58c>
 8006f92:	f04f 38ff 	movhi.w	r8, #4294967295
 8006f96:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	9204      	str	r2, [sp, #16]
 8006f9e:	e078      	b.n	8007092 <_strtod_l+0x602>
 8006fa0:	07d6      	lsls	r6, r2, #31
 8006fa2:	d504      	bpl.n	8006fae <_strtod_l+0x51e>
 8006fa4:	ed9c 6b00 	vldr	d6, [ip]
 8006fa8:	2001      	movs	r0, #1
 8006faa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fae:	3101      	adds	r1, #1
 8006fb0:	1052      	asrs	r2, r2, #1
 8006fb2:	f10c 0c08 	add.w	ip, ip, #8
 8006fb6:	e7cd      	b.n	8006f54 <_strtod_l+0x4c4>
 8006fb8:	d0ef      	beq.n	8006f9a <_strtod_l+0x50a>
 8006fba:	4252      	negs	r2, r2
 8006fbc:	f012 000f 	ands.w	r0, r2, #15
 8006fc0:	d00a      	beq.n	8006fd8 <_strtod_l+0x548>
 8006fc2:	4912      	ldr	r1, [pc, #72]	; (800700c <_strtod_l+0x57c>)
 8006fc4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006fc8:	ed91 7b00 	vldr	d7, [r1]
 8006fcc:	ec49 8b16 	vmov	d6, r8, r9
 8006fd0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006fd4:	ec59 8b17 	vmov	r8, r9, d7
 8006fd8:	1112      	asrs	r2, r2, #4
 8006fda:	d0de      	beq.n	8006f9a <_strtod_l+0x50a>
 8006fdc:	2a1f      	cmp	r2, #31
 8006fde:	dd1f      	ble.n	8007020 <_strtod_l+0x590>
 8006fe0:	2500      	movs	r5, #0
 8006fe2:	462e      	mov	r6, r5
 8006fe4:	9506      	str	r5, [sp, #24]
 8006fe6:	462f      	mov	r7, r5
 8006fe8:	2322      	movs	r3, #34	; 0x22
 8006fea:	f04f 0800 	mov.w	r8, #0
 8006fee:	f04f 0900 	mov.w	r9, #0
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	e78e      	b.n	8006f14 <_strtod_l+0x484>
 8006ff6:	bf00      	nop
 8006ff8:	0800a499 	.word	0x0800a499
 8006ffc:	0800a4dc 	.word	0x0800a4dc
 8007000:	0800a491 	.word	0x0800a491
 8007004:	0800a61c 	.word	0x0800a61c
 8007008:	0800a8c8 	.word	0x0800a8c8
 800700c:	0800a7a8 	.word	0x0800a7a8
 8007010:	0800a780 	.word	0x0800a780
 8007014:	7ca00000 	.word	0x7ca00000
 8007018:	7ff00000 	.word	0x7ff00000
 800701c:	7fefffff 	.word	0x7fefffff
 8007020:	f012 0110 	ands.w	r1, r2, #16
 8007024:	bf18      	it	ne
 8007026:	216a      	movne	r1, #106	; 0x6a
 8007028:	9104      	str	r1, [sp, #16]
 800702a:	ec49 8b17 	vmov	d7, r8, r9
 800702e:	49be      	ldr	r1, [pc, #760]	; (8007328 <_strtod_l+0x898>)
 8007030:	2000      	movs	r0, #0
 8007032:	07d6      	lsls	r6, r2, #31
 8007034:	d504      	bpl.n	8007040 <_strtod_l+0x5b0>
 8007036:	ed91 6b00 	vldr	d6, [r1]
 800703a:	2001      	movs	r0, #1
 800703c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007040:	1052      	asrs	r2, r2, #1
 8007042:	f101 0108 	add.w	r1, r1, #8
 8007046:	d1f4      	bne.n	8007032 <_strtod_l+0x5a2>
 8007048:	b108      	cbz	r0, 800704e <_strtod_l+0x5be>
 800704a:	ec59 8b17 	vmov	r8, r9, d7
 800704e:	9a04      	ldr	r2, [sp, #16]
 8007050:	b1c2      	cbz	r2, 8007084 <_strtod_l+0x5f4>
 8007052:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8007056:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800705a:	2a00      	cmp	r2, #0
 800705c:	4648      	mov	r0, r9
 800705e:	dd11      	ble.n	8007084 <_strtod_l+0x5f4>
 8007060:	2a1f      	cmp	r2, #31
 8007062:	f340 812e 	ble.w	80072c2 <_strtod_l+0x832>
 8007066:	2a34      	cmp	r2, #52	; 0x34
 8007068:	bfde      	ittt	le
 800706a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800706e:	f04f 32ff 	movle.w	r2, #4294967295
 8007072:	fa02 f101 	lslle.w	r1, r2, r1
 8007076:	f04f 0800 	mov.w	r8, #0
 800707a:	bfcc      	ite	gt
 800707c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007080:	ea01 0900 	andle.w	r9, r1, r0
 8007084:	ec49 8b17 	vmov	d7, r8, r9
 8007088:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	d0a6      	beq.n	8006fe0 <_strtod_l+0x550>
 8007092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007094:	9200      	str	r2, [sp, #0]
 8007096:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007098:	9a06      	ldr	r2, [sp, #24]
 800709a:	4620      	mov	r0, r4
 800709c:	f001 fd76 	bl	8008b8c <__s2b>
 80070a0:	9006      	str	r0, [sp, #24]
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f43f af2c 	beq.w	8006f00 <_strtod_l+0x470>
 80070a8:	9b07      	ldr	r3, [sp, #28]
 80070aa:	1b7d      	subs	r5, r7, r5
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	bfb4      	ite	lt
 80070b0:	462b      	movlt	r3, r5
 80070b2:	2300      	movge	r3, #0
 80070b4:	9309      	str	r3, [sp, #36]	; 0x24
 80070b6:	9b07      	ldr	r3, [sp, #28]
 80070b8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8007308 <_strtod_l+0x878>
 80070bc:	ed9f ab94 	vldr	d10, [pc, #592]	; 8007310 <_strtod_l+0x880>
 80070c0:	ed9f bb95 	vldr	d11, [pc, #596]	; 8007318 <_strtod_l+0x888>
 80070c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070c8:	2500      	movs	r5, #0
 80070ca:	930c      	str	r3, [sp, #48]	; 0x30
 80070cc:	462e      	mov	r6, r5
 80070ce:	9b06      	ldr	r3, [sp, #24]
 80070d0:	4620      	mov	r0, r4
 80070d2:	6859      	ldr	r1, [r3, #4]
 80070d4:	f001 fcb2 	bl	8008a3c <_Balloc>
 80070d8:	4607      	mov	r7, r0
 80070da:	2800      	cmp	r0, #0
 80070dc:	f43f af14 	beq.w	8006f08 <_strtod_l+0x478>
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	3202      	adds	r2, #2
 80070e6:	f103 010c 	add.w	r1, r3, #12
 80070ea:	0092      	lsls	r2, r2, #2
 80070ec:	300c      	adds	r0, #12
 80070ee:	f001 fc97 	bl	8008a20 <memcpy>
 80070f2:	ec49 8b10 	vmov	d0, r8, r9
 80070f6:	aa14      	add	r2, sp, #80	; 0x50
 80070f8:	a913      	add	r1, sp, #76	; 0x4c
 80070fa:	4620      	mov	r0, r4
 80070fc:	f002 f88c 	bl	8009218 <__d2b>
 8007100:	ec49 8b18 	vmov	d8, r8, r9
 8007104:	9012      	str	r0, [sp, #72]	; 0x48
 8007106:	2800      	cmp	r0, #0
 8007108:	f43f aefe 	beq.w	8006f08 <_strtod_l+0x478>
 800710c:	2101      	movs	r1, #1
 800710e:	4620      	mov	r0, r4
 8007110:	f001 fdd6 	bl	8008cc0 <__i2b>
 8007114:	4606      	mov	r6, r0
 8007116:	2800      	cmp	r0, #0
 8007118:	f43f aef6 	beq.w	8006f08 <_strtod_l+0x478>
 800711c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800711e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007120:	2b00      	cmp	r3, #0
 8007122:	bfab      	itete	ge
 8007124:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8007126:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8007128:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800712c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8007130:	bfac      	ite	ge
 8007132:	eb03 0b02 	addge.w	fp, r3, r2
 8007136:	eba2 0a03 	sublt.w	sl, r2, r3
 800713a:	9a04      	ldr	r2, [sp, #16]
 800713c:	1a9b      	subs	r3, r3, r2
 800713e:	440b      	add	r3, r1
 8007140:	4a7a      	ldr	r2, [pc, #488]	; (800732c <_strtod_l+0x89c>)
 8007142:	3b01      	subs	r3, #1
 8007144:	4293      	cmp	r3, r2
 8007146:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800714a:	f280 80cd 	bge.w	80072e8 <_strtod_l+0x858>
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	2a1f      	cmp	r2, #31
 8007152:	eba1 0102 	sub.w	r1, r1, r2
 8007156:	f04f 0001 	mov.w	r0, #1
 800715a:	f300 80b9 	bgt.w	80072d0 <_strtod_l+0x840>
 800715e:	fa00 f302 	lsl.w	r3, r0, r2
 8007162:	930b      	str	r3, [sp, #44]	; 0x2c
 8007164:	2300      	movs	r3, #0
 8007166:	930a      	str	r3, [sp, #40]	; 0x28
 8007168:	eb0b 0301 	add.w	r3, fp, r1
 800716c:	9a04      	ldr	r2, [sp, #16]
 800716e:	459b      	cmp	fp, r3
 8007170:	448a      	add	sl, r1
 8007172:	4492      	add	sl, r2
 8007174:	465a      	mov	r2, fp
 8007176:	bfa8      	it	ge
 8007178:	461a      	movge	r2, r3
 800717a:	4552      	cmp	r2, sl
 800717c:	bfa8      	it	ge
 800717e:	4652      	movge	r2, sl
 8007180:	2a00      	cmp	r2, #0
 8007182:	bfc2      	ittt	gt
 8007184:	1a9b      	subgt	r3, r3, r2
 8007186:	ebaa 0a02 	subgt.w	sl, sl, r2
 800718a:	ebab 0b02 	subgt.w	fp, fp, r2
 800718e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007190:	2a00      	cmp	r2, #0
 8007192:	dd18      	ble.n	80071c6 <_strtod_l+0x736>
 8007194:	4631      	mov	r1, r6
 8007196:	4620      	mov	r0, r4
 8007198:	930f      	str	r3, [sp, #60]	; 0x3c
 800719a:	f001 fe51 	bl	8008e40 <__pow5mult>
 800719e:	4606      	mov	r6, r0
 80071a0:	2800      	cmp	r0, #0
 80071a2:	f43f aeb1 	beq.w	8006f08 <_strtod_l+0x478>
 80071a6:	4601      	mov	r1, r0
 80071a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071aa:	4620      	mov	r0, r4
 80071ac:	f001 fd9e 	bl	8008cec <__multiply>
 80071b0:	900e      	str	r0, [sp, #56]	; 0x38
 80071b2:	2800      	cmp	r0, #0
 80071b4:	f43f aea8 	beq.w	8006f08 <_strtod_l+0x478>
 80071b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80071ba:	4620      	mov	r0, r4
 80071bc:	f001 fc7e 	bl	8008abc <_Bfree>
 80071c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071c4:	9212      	str	r2, [sp, #72]	; 0x48
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f300 8093 	bgt.w	80072f2 <_strtod_l+0x862>
 80071cc:	9b07      	ldr	r3, [sp, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	dd08      	ble.n	80071e4 <_strtod_l+0x754>
 80071d2:	4639      	mov	r1, r7
 80071d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071d6:	4620      	mov	r0, r4
 80071d8:	f001 fe32 	bl	8008e40 <__pow5mult>
 80071dc:	4607      	mov	r7, r0
 80071de:	2800      	cmp	r0, #0
 80071e0:	f43f ae92 	beq.w	8006f08 <_strtod_l+0x478>
 80071e4:	f1ba 0f00 	cmp.w	sl, #0
 80071e8:	dd08      	ble.n	80071fc <_strtod_l+0x76c>
 80071ea:	4639      	mov	r1, r7
 80071ec:	4652      	mov	r2, sl
 80071ee:	4620      	mov	r0, r4
 80071f0:	f001 fe80 	bl	8008ef4 <__lshift>
 80071f4:	4607      	mov	r7, r0
 80071f6:	2800      	cmp	r0, #0
 80071f8:	f43f ae86 	beq.w	8006f08 <_strtod_l+0x478>
 80071fc:	f1bb 0f00 	cmp.w	fp, #0
 8007200:	dd08      	ble.n	8007214 <_strtod_l+0x784>
 8007202:	4631      	mov	r1, r6
 8007204:	465a      	mov	r2, fp
 8007206:	4620      	mov	r0, r4
 8007208:	f001 fe74 	bl	8008ef4 <__lshift>
 800720c:	4606      	mov	r6, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f ae7a 	beq.w	8006f08 <_strtod_l+0x478>
 8007214:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007216:	463a      	mov	r2, r7
 8007218:	4620      	mov	r0, r4
 800721a:	f001 fef7 	bl	800900c <__mdiff>
 800721e:	4605      	mov	r5, r0
 8007220:	2800      	cmp	r0, #0
 8007222:	f43f ae71 	beq.w	8006f08 <_strtod_l+0x478>
 8007226:	2300      	movs	r3, #0
 8007228:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800722c:	60c3      	str	r3, [r0, #12]
 800722e:	4631      	mov	r1, r6
 8007230:	f001 fed0 	bl	8008fd4 <__mcmp>
 8007234:	2800      	cmp	r0, #0
 8007236:	da7d      	bge.n	8007334 <_strtod_l+0x8a4>
 8007238:	ea5a 0308 	orrs.w	r3, sl, r8
 800723c:	f040 80a3 	bne.w	8007386 <_strtod_l+0x8f6>
 8007240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007244:	2b00      	cmp	r3, #0
 8007246:	f040 809e 	bne.w	8007386 <_strtod_l+0x8f6>
 800724a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800724e:	0d1b      	lsrs	r3, r3, #20
 8007250:	051b      	lsls	r3, r3, #20
 8007252:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007256:	f240 8096 	bls.w	8007386 <_strtod_l+0x8f6>
 800725a:	696b      	ldr	r3, [r5, #20]
 800725c:	b91b      	cbnz	r3, 8007266 <_strtod_l+0x7d6>
 800725e:	692b      	ldr	r3, [r5, #16]
 8007260:	2b01      	cmp	r3, #1
 8007262:	f340 8090 	ble.w	8007386 <_strtod_l+0x8f6>
 8007266:	4629      	mov	r1, r5
 8007268:	2201      	movs	r2, #1
 800726a:	4620      	mov	r0, r4
 800726c:	f001 fe42 	bl	8008ef4 <__lshift>
 8007270:	4631      	mov	r1, r6
 8007272:	4605      	mov	r5, r0
 8007274:	f001 feae 	bl	8008fd4 <__mcmp>
 8007278:	2800      	cmp	r0, #0
 800727a:	f340 8084 	ble.w	8007386 <_strtod_l+0x8f6>
 800727e:	9904      	ldr	r1, [sp, #16]
 8007280:	4a2b      	ldr	r2, [pc, #172]	; (8007330 <_strtod_l+0x8a0>)
 8007282:	464b      	mov	r3, r9
 8007284:	2900      	cmp	r1, #0
 8007286:	f000 809d 	beq.w	80073c4 <_strtod_l+0x934>
 800728a:	ea02 0109 	and.w	r1, r2, r9
 800728e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007292:	f300 8097 	bgt.w	80073c4 <_strtod_l+0x934>
 8007296:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800729a:	f77f aea5 	ble.w	8006fe8 <_strtod_l+0x558>
 800729e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007320 <_strtod_l+0x890>
 80072a2:	ec49 8b16 	vmov	d6, r8, r9
 80072a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80072aa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80072ae:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	bf08      	it	eq
 80072b6:	2322      	moveq	r3, #34	; 0x22
 80072b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80072bc:	bf08      	it	eq
 80072be:	6023      	streq	r3, [r4, #0]
 80072c0:	e62c      	b.n	8006f1c <_strtod_l+0x48c>
 80072c2:	f04f 31ff 	mov.w	r1, #4294967295
 80072c6:	fa01 f202 	lsl.w	r2, r1, r2
 80072ca:	ea02 0808 	and.w	r8, r2, r8
 80072ce:	e6d9      	b.n	8007084 <_strtod_l+0x5f4>
 80072d0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80072d4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80072d8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80072dc:	33e2      	adds	r3, #226	; 0xe2
 80072de:	fa00 f303 	lsl.w	r3, r0, r3
 80072e2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80072e6:	e73f      	b.n	8007168 <_strtod_l+0x6d8>
 80072e8:	2200      	movs	r2, #0
 80072ea:	2301      	movs	r3, #1
 80072ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80072f0:	e73a      	b.n	8007168 <_strtod_l+0x6d8>
 80072f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80072f4:	461a      	mov	r2, r3
 80072f6:	4620      	mov	r0, r4
 80072f8:	f001 fdfc 	bl	8008ef4 <__lshift>
 80072fc:	9012      	str	r0, [sp, #72]	; 0x48
 80072fe:	2800      	cmp	r0, #0
 8007300:	f47f af64 	bne.w	80071cc <_strtod_l+0x73c>
 8007304:	e600      	b.n	8006f08 <_strtod_l+0x478>
 8007306:	bf00      	nop
 8007308:	94a03595 	.word	0x94a03595
 800730c:	3fcfffff 	.word	0x3fcfffff
 8007310:	94a03595 	.word	0x94a03595
 8007314:	3fdfffff 	.word	0x3fdfffff
 8007318:	35afe535 	.word	0x35afe535
 800731c:	3fe00000 	.word	0x3fe00000
 8007320:	00000000 	.word	0x00000000
 8007324:	39500000 	.word	0x39500000
 8007328:	0800a4f0 	.word	0x0800a4f0
 800732c:	fffffc02 	.word	0xfffffc02
 8007330:	7ff00000 	.word	0x7ff00000
 8007334:	46cb      	mov	fp, r9
 8007336:	d15f      	bne.n	80073f8 <_strtod_l+0x968>
 8007338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800733c:	f1ba 0f00 	cmp.w	sl, #0
 8007340:	d02a      	beq.n	8007398 <_strtod_l+0x908>
 8007342:	4aa7      	ldr	r2, [pc, #668]	; (80075e0 <_strtod_l+0xb50>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d12b      	bne.n	80073a0 <_strtod_l+0x910>
 8007348:	9b04      	ldr	r3, [sp, #16]
 800734a:	4642      	mov	r2, r8
 800734c:	b1fb      	cbz	r3, 800738e <_strtod_l+0x8fe>
 800734e:	4ba5      	ldr	r3, [pc, #660]	; (80075e4 <_strtod_l+0xb54>)
 8007350:	ea09 0303 	and.w	r3, r9, r3
 8007354:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007358:	f04f 31ff 	mov.w	r1, #4294967295
 800735c:	d81a      	bhi.n	8007394 <_strtod_l+0x904>
 800735e:	0d1b      	lsrs	r3, r3, #20
 8007360:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007364:	fa01 f303 	lsl.w	r3, r1, r3
 8007368:	429a      	cmp	r2, r3
 800736a:	d119      	bne.n	80073a0 <_strtod_l+0x910>
 800736c:	4b9e      	ldr	r3, [pc, #632]	; (80075e8 <_strtod_l+0xb58>)
 800736e:	459b      	cmp	fp, r3
 8007370:	d102      	bne.n	8007378 <_strtod_l+0x8e8>
 8007372:	3201      	adds	r2, #1
 8007374:	f43f adc8 	beq.w	8006f08 <_strtod_l+0x478>
 8007378:	4b9a      	ldr	r3, [pc, #616]	; (80075e4 <_strtod_l+0xb54>)
 800737a:	ea0b 0303 	and.w	r3, fp, r3
 800737e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007382:	f04f 0800 	mov.w	r8, #0
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d188      	bne.n	800729e <_strtod_l+0x80e>
 800738c:	e5c6      	b.n	8006f1c <_strtod_l+0x48c>
 800738e:	f04f 33ff 	mov.w	r3, #4294967295
 8007392:	e7e9      	b.n	8007368 <_strtod_l+0x8d8>
 8007394:	460b      	mov	r3, r1
 8007396:	e7e7      	b.n	8007368 <_strtod_l+0x8d8>
 8007398:	ea53 0308 	orrs.w	r3, r3, r8
 800739c:	f43f af6f 	beq.w	800727e <_strtod_l+0x7ee>
 80073a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a2:	b1cb      	cbz	r3, 80073d8 <_strtod_l+0x948>
 80073a4:	ea13 0f0b 	tst.w	r3, fp
 80073a8:	d0ed      	beq.n	8007386 <_strtod_l+0x8f6>
 80073aa:	9a04      	ldr	r2, [sp, #16]
 80073ac:	4640      	mov	r0, r8
 80073ae:	4649      	mov	r1, r9
 80073b0:	f1ba 0f00 	cmp.w	sl, #0
 80073b4:	d014      	beq.n	80073e0 <_strtod_l+0x950>
 80073b6:	f7ff fb51 	bl	8006a5c <sulp>
 80073ba:	ee38 7b00 	vadd.f64	d7, d8, d0
 80073be:	ec59 8b17 	vmov	r8, r9, d7
 80073c2:	e7e0      	b.n	8007386 <_strtod_l+0x8f6>
 80073c4:	4013      	ands	r3, r2
 80073c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80073ca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80073ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80073d2:	f04f 38ff 	mov.w	r8, #4294967295
 80073d6:	e7d6      	b.n	8007386 <_strtod_l+0x8f6>
 80073d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073da:	ea13 0f08 	tst.w	r3, r8
 80073de:	e7e3      	b.n	80073a8 <_strtod_l+0x918>
 80073e0:	f7ff fb3c 	bl	8006a5c <sulp>
 80073e4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80073e8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	ec59 8b10 	vmov	r8, r9, d0
 80073f4:	d1c7      	bne.n	8007386 <_strtod_l+0x8f6>
 80073f6:	e5f7      	b.n	8006fe8 <_strtod_l+0x558>
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	f001 ff68 	bl	80092d0 <__ratio>
 8007400:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007404:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740c:	d865      	bhi.n	80074da <_strtod_l+0xa4a>
 800740e:	f1ba 0f00 	cmp.w	sl, #0
 8007412:	d042      	beq.n	800749a <_strtod_l+0xa0a>
 8007414:	4b75      	ldr	r3, [pc, #468]	; (80075ec <_strtod_l+0xb5c>)
 8007416:	2200      	movs	r2, #0
 8007418:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800741c:	4871      	ldr	r0, [pc, #452]	; (80075e4 <_strtod_l+0xb54>)
 800741e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80075f8 <_strtod_l+0xb68>
 8007422:	ea0b 0100 	and.w	r1, fp, r0
 8007426:	4561      	cmp	r1, ip
 8007428:	f040 808e 	bne.w	8007548 <_strtod_l+0xab8>
 800742c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007430:	ec49 8b10 	vmov	d0, r8, r9
 8007434:	ec43 2b1c 	vmov	d12, r2, r3
 8007438:	910a      	str	r1, [sp, #40]	; 0x28
 800743a:	f001 fe71 	bl	8009120 <__ulp>
 800743e:	ec49 8b1e 	vmov	d14, r8, r9
 8007442:	4868      	ldr	r0, [pc, #416]	; (80075e4 <_strtod_l+0xb54>)
 8007444:	eeac eb00 	vfma.f64	d14, d12, d0
 8007448:	ee1e 3a90 	vmov	r3, s29
 800744c:	4a68      	ldr	r2, [pc, #416]	; (80075f0 <_strtod_l+0xb60>)
 800744e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007450:	4018      	ands	r0, r3
 8007452:	4290      	cmp	r0, r2
 8007454:	ec59 8b1e 	vmov	r8, r9, d14
 8007458:	d94e      	bls.n	80074f8 <_strtod_l+0xa68>
 800745a:	ee18 3a90 	vmov	r3, s17
 800745e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007462:	4293      	cmp	r3, r2
 8007464:	d104      	bne.n	8007470 <_strtod_l+0x9e0>
 8007466:	ee18 3a10 	vmov	r3, s16
 800746a:	3301      	adds	r3, #1
 800746c:	f43f ad4c 	beq.w	8006f08 <_strtod_l+0x478>
 8007470:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80075e8 <_strtod_l+0xb58>
 8007474:	f04f 38ff 	mov.w	r8, #4294967295
 8007478:	9912      	ldr	r1, [sp, #72]	; 0x48
 800747a:	4620      	mov	r0, r4
 800747c:	f001 fb1e 	bl	8008abc <_Bfree>
 8007480:	4639      	mov	r1, r7
 8007482:	4620      	mov	r0, r4
 8007484:	f001 fb1a 	bl	8008abc <_Bfree>
 8007488:	4631      	mov	r1, r6
 800748a:	4620      	mov	r0, r4
 800748c:	f001 fb16 	bl	8008abc <_Bfree>
 8007490:	4629      	mov	r1, r5
 8007492:	4620      	mov	r0, r4
 8007494:	f001 fb12 	bl	8008abc <_Bfree>
 8007498:	e619      	b.n	80070ce <_strtod_l+0x63e>
 800749a:	f1b8 0f00 	cmp.w	r8, #0
 800749e:	d112      	bne.n	80074c6 <_strtod_l+0xa36>
 80074a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074a4:	b9b3      	cbnz	r3, 80074d4 <_strtod_l+0xa44>
 80074a6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80074aa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80074b6:	bf58      	it	pl
 80074b8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80074bc:	eeb1 7b4d 	vneg.f64	d7, d13
 80074c0:	ec53 2b17 	vmov	r2, r3, d7
 80074c4:	e7aa      	b.n	800741c <_strtod_l+0x98c>
 80074c6:	f1b8 0f01 	cmp.w	r8, #1
 80074ca:	d103      	bne.n	80074d4 <_strtod_l+0xa44>
 80074cc:	f1b9 0f00 	cmp.w	r9, #0
 80074d0:	f43f ad8a 	beq.w	8006fe8 <_strtod_l+0x558>
 80074d4:	4b47      	ldr	r3, [pc, #284]	; (80075f4 <_strtod_l+0xb64>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	e79e      	b.n	8007418 <_strtod_l+0x988>
 80074da:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80074de:	ee20 db0d 	vmul.f64	d13, d0, d13
 80074e2:	f1ba 0f00 	cmp.w	sl, #0
 80074e6:	d104      	bne.n	80074f2 <_strtod_l+0xa62>
 80074e8:	eeb1 7b4d 	vneg.f64	d7, d13
 80074ec:	ec53 2b17 	vmov	r2, r3, d7
 80074f0:	e794      	b.n	800741c <_strtod_l+0x98c>
 80074f2:	eeb0 7b4d 	vmov.f64	d7, d13
 80074f6:	e7f9      	b.n	80074ec <_strtod_l+0xa5c>
 80074f8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80074fc:	9b04      	ldr	r3, [sp, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1ba      	bne.n	8007478 <_strtod_l+0x9e8>
 8007502:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007506:	0d1b      	lsrs	r3, r3, #20
 8007508:	051b      	lsls	r3, r3, #20
 800750a:	4299      	cmp	r1, r3
 800750c:	d1b4      	bne.n	8007478 <_strtod_l+0x9e8>
 800750e:	ec51 0b1d 	vmov	r0, r1, d13
 8007512:	f7f9 f8c1 	bl	8000698 <__aeabi_d2lz>
 8007516:	f7f9 f879 	bl	800060c <__aeabi_l2d>
 800751a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800751e:	ec41 0b17 	vmov	d7, r0, r1
 8007522:	ea43 0308 	orr.w	r3, r3, r8
 8007526:	ea53 030a 	orrs.w	r3, r3, sl
 800752a:	ee3d db47 	vsub.f64	d13, d13, d7
 800752e:	d03c      	beq.n	80075aa <_strtod_l+0xb1a>
 8007530:	eeb4 dbca 	vcmpe.f64	d13, d10
 8007534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007538:	f53f acf0 	bmi.w	8006f1c <_strtod_l+0x48c>
 800753c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8007540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007544:	dd98      	ble.n	8007478 <_strtod_l+0x9e8>
 8007546:	e4e9      	b.n	8006f1c <_strtod_l+0x48c>
 8007548:	9804      	ldr	r0, [sp, #16]
 800754a:	b1f0      	cbz	r0, 800758a <_strtod_l+0xafa>
 800754c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007550:	d81b      	bhi.n	800758a <_strtod_l+0xafa>
 8007552:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80075d8 <_strtod_l+0xb48>
 8007556:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800755a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755e:	d811      	bhi.n	8007584 <_strtod_l+0xaf4>
 8007560:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8007564:	ee1d 3a10 	vmov	r3, s26
 8007568:	2b01      	cmp	r3, #1
 800756a:	bf38      	it	cc
 800756c:	2301      	movcc	r3, #1
 800756e:	ee0d 3a10 	vmov	s26, r3
 8007572:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8007576:	f1ba 0f00 	cmp.w	sl, #0
 800757a:	d113      	bne.n	80075a4 <_strtod_l+0xb14>
 800757c:	eeb1 7b4d 	vneg.f64	d7, d13
 8007580:	ec53 2b17 	vmov	r2, r3, d7
 8007584:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8007588:	1a43      	subs	r3, r0, r1
 800758a:	eeb0 0b48 	vmov.f64	d0, d8
 800758e:	ec43 2b1c 	vmov	d12, r2, r3
 8007592:	910a      	str	r1, [sp, #40]	; 0x28
 8007594:	f001 fdc4 	bl	8009120 <__ulp>
 8007598:	990a      	ldr	r1, [sp, #40]	; 0x28
 800759a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800759e:	ec59 8b18 	vmov	r8, r9, d8
 80075a2:	e7ab      	b.n	80074fc <_strtod_l+0xa6c>
 80075a4:	eeb0 7b4d 	vmov.f64	d7, d13
 80075a8:	e7ea      	b.n	8007580 <_strtod_l+0xaf0>
 80075aa:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80075ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b2:	f57f af61 	bpl.w	8007478 <_strtod_l+0x9e8>
 80075b6:	e4b1      	b.n	8006f1c <_strtod_l+0x48c>
 80075b8:	2300      	movs	r3, #0
 80075ba:	9308      	str	r3, [sp, #32]
 80075bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	f7ff baad 	b.w	8006b20 <_strtod_l+0x90>
 80075c6:	2a65      	cmp	r2, #101	; 0x65
 80075c8:	f43f ab9f 	beq.w	8006d0a <_strtod_l+0x27a>
 80075cc:	2a45      	cmp	r2, #69	; 0x45
 80075ce:	f43f ab9c 	beq.w	8006d0a <_strtod_l+0x27a>
 80075d2:	2101      	movs	r1, #1
 80075d4:	f7ff bbd4 	b.w	8006d80 <_strtod_l+0x2f0>
 80075d8:	ffc00000 	.word	0xffc00000
 80075dc:	41dfffff 	.word	0x41dfffff
 80075e0:	000fffff 	.word	0x000fffff
 80075e4:	7ff00000 	.word	0x7ff00000
 80075e8:	7fefffff 	.word	0x7fefffff
 80075ec:	3ff00000 	.word	0x3ff00000
 80075f0:	7c9fffff 	.word	0x7c9fffff
 80075f4:	bff00000 	.word	0xbff00000
 80075f8:	7fe00000 	.word	0x7fe00000

080075fc <_strtod_r>:
 80075fc:	4b01      	ldr	r3, [pc, #4]	; (8007604 <_strtod_r+0x8>)
 80075fe:	f7ff ba47 	b.w	8006a90 <_strtod_l>
 8007602:	bf00      	nop
 8007604:	20000074 	.word	0x20000074

08007608 <_strtol_l.constprop.0>:
 8007608:	2b01      	cmp	r3, #1
 800760a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760e:	d001      	beq.n	8007614 <_strtol_l.constprop.0+0xc>
 8007610:	2b24      	cmp	r3, #36	; 0x24
 8007612:	d906      	bls.n	8007622 <_strtol_l.constprop.0+0x1a>
 8007614:	f7fe fb82 	bl	8005d1c <__errno>
 8007618:	2316      	movs	r3, #22
 800761a:	6003      	str	r3, [r0, #0]
 800761c:	2000      	movs	r0, #0
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007708 <_strtol_l.constprop.0+0x100>
 8007626:	460d      	mov	r5, r1
 8007628:	462e      	mov	r6, r5
 800762a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800762e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007632:	f017 0708 	ands.w	r7, r7, #8
 8007636:	d1f7      	bne.n	8007628 <_strtol_l.constprop.0+0x20>
 8007638:	2c2d      	cmp	r4, #45	; 0x2d
 800763a:	d132      	bne.n	80076a2 <_strtol_l.constprop.0+0x9a>
 800763c:	782c      	ldrb	r4, [r5, #0]
 800763e:	2701      	movs	r7, #1
 8007640:	1cb5      	adds	r5, r6, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d05b      	beq.n	80076fe <_strtol_l.constprop.0+0xf6>
 8007646:	2b10      	cmp	r3, #16
 8007648:	d109      	bne.n	800765e <_strtol_l.constprop.0+0x56>
 800764a:	2c30      	cmp	r4, #48	; 0x30
 800764c:	d107      	bne.n	800765e <_strtol_l.constprop.0+0x56>
 800764e:	782c      	ldrb	r4, [r5, #0]
 8007650:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007654:	2c58      	cmp	r4, #88	; 0x58
 8007656:	d14d      	bne.n	80076f4 <_strtol_l.constprop.0+0xec>
 8007658:	786c      	ldrb	r4, [r5, #1]
 800765a:	2310      	movs	r3, #16
 800765c:	3502      	adds	r5, #2
 800765e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007662:	f108 38ff 	add.w	r8, r8, #4294967295
 8007666:	f04f 0c00 	mov.w	ip, #0
 800766a:	fbb8 f9f3 	udiv	r9, r8, r3
 800766e:	4666      	mov	r6, ip
 8007670:	fb03 8a19 	mls	sl, r3, r9, r8
 8007674:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007678:	f1be 0f09 	cmp.w	lr, #9
 800767c:	d816      	bhi.n	80076ac <_strtol_l.constprop.0+0xa4>
 800767e:	4674      	mov	r4, lr
 8007680:	42a3      	cmp	r3, r4
 8007682:	dd24      	ble.n	80076ce <_strtol_l.constprop.0+0xc6>
 8007684:	f1bc 0f00 	cmp.w	ip, #0
 8007688:	db1e      	blt.n	80076c8 <_strtol_l.constprop.0+0xc0>
 800768a:	45b1      	cmp	r9, r6
 800768c:	d31c      	bcc.n	80076c8 <_strtol_l.constprop.0+0xc0>
 800768e:	d101      	bne.n	8007694 <_strtol_l.constprop.0+0x8c>
 8007690:	45a2      	cmp	sl, r4
 8007692:	db19      	blt.n	80076c8 <_strtol_l.constprop.0+0xc0>
 8007694:	fb06 4603 	mla	r6, r6, r3, r4
 8007698:	f04f 0c01 	mov.w	ip, #1
 800769c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076a0:	e7e8      	b.n	8007674 <_strtol_l.constprop.0+0x6c>
 80076a2:	2c2b      	cmp	r4, #43	; 0x2b
 80076a4:	bf04      	itt	eq
 80076a6:	782c      	ldrbeq	r4, [r5, #0]
 80076a8:	1cb5      	addeq	r5, r6, #2
 80076aa:	e7ca      	b.n	8007642 <_strtol_l.constprop.0+0x3a>
 80076ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80076b0:	f1be 0f19 	cmp.w	lr, #25
 80076b4:	d801      	bhi.n	80076ba <_strtol_l.constprop.0+0xb2>
 80076b6:	3c37      	subs	r4, #55	; 0x37
 80076b8:	e7e2      	b.n	8007680 <_strtol_l.constprop.0+0x78>
 80076ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80076be:	f1be 0f19 	cmp.w	lr, #25
 80076c2:	d804      	bhi.n	80076ce <_strtol_l.constprop.0+0xc6>
 80076c4:	3c57      	subs	r4, #87	; 0x57
 80076c6:	e7db      	b.n	8007680 <_strtol_l.constprop.0+0x78>
 80076c8:	f04f 3cff 	mov.w	ip, #4294967295
 80076cc:	e7e6      	b.n	800769c <_strtol_l.constprop.0+0x94>
 80076ce:	f1bc 0f00 	cmp.w	ip, #0
 80076d2:	da05      	bge.n	80076e0 <_strtol_l.constprop.0+0xd8>
 80076d4:	2322      	movs	r3, #34	; 0x22
 80076d6:	6003      	str	r3, [r0, #0]
 80076d8:	4646      	mov	r6, r8
 80076da:	b942      	cbnz	r2, 80076ee <_strtol_l.constprop.0+0xe6>
 80076dc:	4630      	mov	r0, r6
 80076de:	e79e      	b.n	800761e <_strtol_l.constprop.0+0x16>
 80076e0:	b107      	cbz	r7, 80076e4 <_strtol_l.constprop.0+0xdc>
 80076e2:	4276      	negs	r6, r6
 80076e4:	2a00      	cmp	r2, #0
 80076e6:	d0f9      	beq.n	80076dc <_strtol_l.constprop.0+0xd4>
 80076e8:	f1bc 0f00 	cmp.w	ip, #0
 80076ec:	d000      	beq.n	80076f0 <_strtol_l.constprop.0+0xe8>
 80076ee:	1e69      	subs	r1, r5, #1
 80076f0:	6011      	str	r1, [r2, #0]
 80076f2:	e7f3      	b.n	80076dc <_strtol_l.constprop.0+0xd4>
 80076f4:	2430      	movs	r4, #48	; 0x30
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1b1      	bne.n	800765e <_strtol_l.constprop.0+0x56>
 80076fa:	2308      	movs	r3, #8
 80076fc:	e7af      	b.n	800765e <_strtol_l.constprop.0+0x56>
 80076fe:	2c30      	cmp	r4, #48	; 0x30
 8007700:	d0a5      	beq.n	800764e <_strtol_l.constprop.0+0x46>
 8007702:	230a      	movs	r3, #10
 8007704:	e7ab      	b.n	800765e <_strtol_l.constprop.0+0x56>
 8007706:	bf00      	nop
 8007708:	0800a519 	.word	0x0800a519

0800770c <_strtol_r>:
 800770c:	f7ff bf7c 	b.w	8007608 <_strtol_l.constprop.0>

08007710 <quorem>:
 8007710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	6903      	ldr	r3, [r0, #16]
 8007716:	690c      	ldr	r4, [r1, #16]
 8007718:	42a3      	cmp	r3, r4
 800771a:	4607      	mov	r7, r0
 800771c:	f2c0 8081 	blt.w	8007822 <quorem+0x112>
 8007720:	3c01      	subs	r4, #1
 8007722:	f101 0814 	add.w	r8, r1, #20
 8007726:	f100 0514 	add.w	r5, r0, #20
 800772a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007738:	3301      	adds	r3, #1
 800773a:	429a      	cmp	r2, r3
 800773c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007744:	fbb2 f6f3 	udiv	r6, r2, r3
 8007748:	d331      	bcc.n	80077ae <quorem+0x9e>
 800774a:	f04f 0e00 	mov.w	lr, #0
 800774e:	4640      	mov	r0, r8
 8007750:	46ac      	mov	ip, r5
 8007752:	46f2      	mov	sl, lr
 8007754:	f850 2b04 	ldr.w	r2, [r0], #4
 8007758:	b293      	uxth	r3, r2
 800775a:	fb06 e303 	mla	r3, r6, r3, lr
 800775e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007762:	b29b      	uxth	r3, r3
 8007764:	ebaa 0303 	sub.w	r3, sl, r3
 8007768:	f8dc a000 	ldr.w	sl, [ip]
 800776c:	0c12      	lsrs	r2, r2, #16
 800776e:	fa13 f38a 	uxtah	r3, r3, sl
 8007772:	fb06 e202 	mla	r2, r6, r2, lr
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	9b00      	ldr	r3, [sp, #0]
 800777a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800777e:	b292      	uxth	r2, r2
 8007780:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007788:	f8bd 3000 	ldrh.w	r3, [sp]
 800778c:	4581      	cmp	r9, r0
 800778e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007792:	f84c 3b04 	str.w	r3, [ip], #4
 8007796:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800779a:	d2db      	bcs.n	8007754 <quorem+0x44>
 800779c:	f855 300b 	ldr.w	r3, [r5, fp]
 80077a0:	b92b      	cbnz	r3, 80077ae <quorem+0x9e>
 80077a2:	9b01      	ldr	r3, [sp, #4]
 80077a4:	3b04      	subs	r3, #4
 80077a6:	429d      	cmp	r5, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	d32e      	bcc.n	800780a <quorem+0xfa>
 80077ac:	613c      	str	r4, [r7, #16]
 80077ae:	4638      	mov	r0, r7
 80077b0:	f001 fc10 	bl	8008fd4 <__mcmp>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	db24      	blt.n	8007802 <quorem+0xf2>
 80077b8:	3601      	adds	r6, #1
 80077ba:	4628      	mov	r0, r5
 80077bc:	f04f 0c00 	mov.w	ip, #0
 80077c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80077c4:	f8d0 e000 	ldr.w	lr, [r0]
 80077c8:	b293      	uxth	r3, r2
 80077ca:	ebac 0303 	sub.w	r3, ip, r3
 80077ce:	0c12      	lsrs	r2, r2, #16
 80077d0:	fa13 f38e 	uxtah	r3, r3, lr
 80077d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077dc:	b29b      	uxth	r3, r3
 80077de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077e2:	45c1      	cmp	r9, r8
 80077e4:	f840 3b04 	str.w	r3, [r0], #4
 80077e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077ec:	d2e8      	bcs.n	80077c0 <quorem+0xb0>
 80077ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077f6:	b922      	cbnz	r2, 8007802 <quorem+0xf2>
 80077f8:	3b04      	subs	r3, #4
 80077fa:	429d      	cmp	r5, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	d30a      	bcc.n	8007816 <quorem+0x106>
 8007800:	613c      	str	r4, [r7, #16]
 8007802:	4630      	mov	r0, r6
 8007804:	b003      	add	sp, #12
 8007806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780a:	6812      	ldr	r2, [r2, #0]
 800780c:	3b04      	subs	r3, #4
 800780e:	2a00      	cmp	r2, #0
 8007810:	d1cc      	bne.n	80077ac <quorem+0x9c>
 8007812:	3c01      	subs	r4, #1
 8007814:	e7c7      	b.n	80077a6 <quorem+0x96>
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	3b04      	subs	r3, #4
 800781a:	2a00      	cmp	r2, #0
 800781c:	d1f0      	bne.n	8007800 <quorem+0xf0>
 800781e:	3c01      	subs	r4, #1
 8007820:	e7eb      	b.n	80077fa <quorem+0xea>
 8007822:	2000      	movs	r0, #0
 8007824:	e7ee      	b.n	8007804 <quorem+0xf4>
	...

08007828 <_dtoa_r>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	ed2d 8b02 	vpush	{d8}
 8007830:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007832:	b091      	sub	sp, #68	; 0x44
 8007834:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007838:	ec59 8b10 	vmov	r8, r9, d0
 800783c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800783e:	9106      	str	r1, [sp, #24]
 8007840:	4606      	mov	r6, r0
 8007842:	9208      	str	r2, [sp, #32]
 8007844:	930c      	str	r3, [sp, #48]	; 0x30
 8007846:	b975      	cbnz	r5, 8007866 <_dtoa_r+0x3e>
 8007848:	2010      	movs	r0, #16
 800784a:	f001 f8cf 	bl	80089ec <malloc>
 800784e:	4602      	mov	r2, r0
 8007850:	6270      	str	r0, [r6, #36]	; 0x24
 8007852:	b920      	cbnz	r0, 800785e <_dtoa_r+0x36>
 8007854:	4baa      	ldr	r3, [pc, #680]	; (8007b00 <_dtoa_r+0x2d8>)
 8007856:	21ea      	movs	r1, #234	; 0xea
 8007858:	48aa      	ldr	r0, [pc, #680]	; (8007b04 <_dtoa_r+0x2dc>)
 800785a:	f002 f83b 	bl	80098d4 <__assert_func>
 800785e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007862:	6005      	str	r5, [r0, #0]
 8007864:	60c5      	str	r5, [r0, #12]
 8007866:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007868:	6819      	ldr	r1, [r3, #0]
 800786a:	b151      	cbz	r1, 8007882 <_dtoa_r+0x5a>
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	604a      	str	r2, [r1, #4]
 8007870:	2301      	movs	r3, #1
 8007872:	4093      	lsls	r3, r2
 8007874:	608b      	str	r3, [r1, #8]
 8007876:	4630      	mov	r0, r6
 8007878:	f001 f920 	bl	8008abc <_Bfree>
 800787c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	f1b9 0300 	subs.w	r3, r9, #0
 8007886:	bfbb      	ittet	lt
 8007888:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800788c:	9303      	strlt	r3, [sp, #12]
 800788e:	2300      	movge	r3, #0
 8007890:	2201      	movlt	r2, #1
 8007892:	bfac      	ite	ge
 8007894:	6023      	strge	r3, [r4, #0]
 8007896:	6022      	strlt	r2, [r4, #0]
 8007898:	4b9b      	ldr	r3, [pc, #620]	; (8007b08 <_dtoa_r+0x2e0>)
 800789a:	9c03      	ldr	r4, [sp, #12]
 800789c:	43a3      	bics	r3, r4
 800789e:	d11c      	bne.n	80078da <_dtoa_r+0xb2>
 80078a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80078ac:	ea53 0308 	orrs.w	r3, r3, r8
 80078b0:	f000 84fd 	beq.w	80082ae <_dtoa_r+0xa86>
 80078b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078b6:	b963      	cbnz	r3, 80078d2 <_dtoa_r+0xaa>
 80078b8:	4b94      	ldr	r3, [pc, #592]	; (8007b0c <_dtoa_r+0x2e4>)
 80078ba:	e01f      	b.n	80078fc <_dtoa_r+0xd4>
 80078bc:	4b94      	ldr	r3, [pc, #592]	; (8007b10 <_dtoa_r+0x2e8>)
 80078be:	9301      	str	r3, [sp, #4]
 80078c0:	3308      	adds	r3, #8
 80078c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	9801      	ldr	r0, [sp, #4]
 80078c8:	b011      	add	sp, #68	; 0x44
 80078ca:	ecbd 8b02 	vpop	{d8}
 80078ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d2:	4b8e      	ldr	r3, [pc, #568]	; (8007b0c <_dtoa_r+0x2e4>)
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	3303      	adds	r3, #3
 80078d8:	e7f3      	b.n	80078c2 <_dtoa_r+0x9a>
 80078da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80078de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80078e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e6:	d10b      	bne.n	8007900 <_dtoa_r+0xd8>
 80078e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ea:	2301      	movs	r3, #1
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 84d9 	beq.w	80082a8 <_dtoa_r+0xa80>
 80078f6:	4887      	ldr	r0, [pc, #540]	; (8007b14 <_dtoa_r+0x2ec>)
 80078f8:	6018      	str	r0, [r3, #0]
 80078fa:	1e43      	subs	r3, r0, #1
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	e7e2      	b.n	80078c6 <_dtoa_r+0x9e>
 8007900:	a90f      	add	r1, sp, #60	; 0x3c
 8007902:	aa0e      	add	r2, sp, #56	; 0x38
 8007904:	4630      	mov	r0, r6
 8007906:	eeb0 0b48 	vmov.f64	d0, d8
 800790a:	f001 fc85 	bl	8009218 <__d2b>
 800790e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007912:	4605      	mov	r5, r0
 8007914:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007916:	2900      	cmp	r1, #0
 8007918:	d046      	beq.n	80079a8 <_dtoa_r+0x180>
 800791a:	ee18 4a90 	vmov	r4, s17
 800791e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007922:	ec53 2b18 	vmov	r2, r3, d8
 8007926:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800792a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800792e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007932:	2400      	movs	r4, #0
 8007934:	ec43 2b16 	vmov	d6, r2, r3
 8007938:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800793c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007ae8 <_dtoa_r+0x2c0>
 8007940:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007944:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007af0 <_dtoa_r+0x2c8>
 8007948:	eea7 6b05 	vfma.f64	d6, d7, d5
 800794c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007af8 <_dtoa_r+0x2d0>
 8007950:	ee07 1a90 	vmov	s15, r1
 8007954:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007958:	eeb0 7b46 	vmov.f64	d7, d6
 800795c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007960:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007964:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796c:	ee16 ba90 	vmov	fp, s13
 8007970:	940a      	str	r4, [sp, #40]	; 0x28
 8007972:	d508      	bpl.n	8007986 <_dtoa_r+0x15e>
 8007974:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007978:	eeb4 6b47 	vcmp.f64	d6, d7
 800797c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007980:	bf18      	it	ne
 8007982:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007986:	f1bb 0f16 	cmp.w	fp, #22
 800798a:	d82f      	bhi.n	80079ec <_dtoa_r+0x1c4>
 800798c:	4b62      	ldr	r3, [pc, #392]	; (8007b18 <_dtoa_r+0x2f0>)
 800798e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007992:	ed93 7b00 	vldr	d7, [r3]
 8007996:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800799a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799e:	d501      	bpl.n	80079a4 <_dtoa_r+0x17c>
 80079a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079a4:	2300      	movs	r3, #0
 80079a6:	e022      	b.n	80079ee <_dtoa_r+0x1c6>
 80079a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079aa:	4401      	add	r1, r0
 80079ac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	bfc1      	itttt	gt
 80079b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079b8:	fa04 f303 	lslgt.w	r3, r4, r3
 80079bc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80079c0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80079c4:	bfd6      	itet	le
 80079c6:	f1c3 0320 	rsble	r3, r3, #32
 80079ca:	ea43 0808 	orrgt.w	r8, r3, r8
 80079ce:	fa08 f803 	lslle.w	r8, r8, r3
 80079d2:	ee07 8a90 	vmov	s15, r8
 80079d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80079da:	3901      	subs	r1, #1
 80079dc:	ee17 4a90 	vmov	r4, s15
 80079e0:	ec53 2b17 	vmov	r2, r3, d7
 80079e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80079e8:	2401      	movs	r4, #1
 80079ea:	e7a3      	b.n	8007934 <_dtoa_r+0x10c>
 80079ec:	2301      	movs	r3, #1
 80079ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80079f0:	1a43      	subs	r3, r0, r1
 80079f2:	1e5a      	subs	r2, r3, #1
 80079f4:	bf45      	ittet	mi
 80079f6:	f1c3 0301 	rsbmi	r3, r3, #1
 80079fa:	9304      	strmi	r3, [sp, #16]
 80079fc:	2300      	movpl	r3, #0
 80079fe:	2300      	movmi	r3, #0
 8007a00:	9205      	str	r2, [sp, #20]
 8007a02:	bf54      	ite	pl
 8007a04:	9304      	strpl	r3, [sp, #16]
 8007a06:	9305      	strmi	r3, [sp, #20]
 8007a08:	f1bb 0f00 	cmp.w	fp, #0
 8007a0c:	db18      	blt.n	8007a40 <_dtoa_r+0x218>
 8007a0e:	9b05      	ldr	r3, [sp, #20]
 8007a10:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007a14:	445b      	add	r3, fp
 8007a16:	9305      	str	r3, [sp, #20]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9a06      	ldr	r2, [sp, #24]
 8007a1c:	2a09      	cmp	r2, #9
 8007a1e:	d849      	bhi.n	8007ab4 <_dtoa_r+0x28c>
 8007a20:	2a05      	cmp	r2, #5
 8007a22:	bfc4      	itt	gt
 8007a24:	3a04      	subgt	r2, #4
 8007a26:	9206      	strgt	r2, [sp, #24]
 8007a28:	9a06      	ldr	r2, [sp, #24]
 8007a2a:	f1a2 0202 	sub.w	r2, r2, #2
 8007a2e:	bfcc      	ite	gt
 8007a30:	2400      	movgt	r4, #0
 8007a32:	2401      	movle	r4, #1
 8007a34:	2a03      	cmp	r2, #3
 8007a36:	d848      	bhi.n	8007aca <_dtoa_r+0x2a2>
 8007a38:	e8df f002 	tbb	[pc, r2]
 8007a3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007a40:	9b04      	ldr	r3, [sp, #16]
 8007a42:	2200      	movs	r2, #0
 8007a44:	eba3 030b 	sub.w	r3, r3, fp
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a4c:	f1cb 0300 	rsb	r3, fp, #0
 8007a50:	e7e3      	b.n	8007a1a <_dtoa_r+0x1f2>
 8007a52:	2200      	movs	r2, #0
 8007a54:	9207      	str	r2, [sp, #28]
 8007a56:	9a08      	ldr	r2, [sp, #32]
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	dc39      	bgt.n	8007ad0 <_dtoa_r+0x2a8>
 8007a5c:	f04f 0a01 	mov.w	sl, #1
 8007a60:	46d1      	mov	r9, sl
 8007a62:	4652      	mov	r2, sl
 8007a64:	f8cd a020 	str.w	sl, [sp, #32]
 8007a68:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	6079      	str	r1, [r7, #4]
 8007a6e:	2004      	movs	r0, #4
 8007a70:	f100 0c14 	add.w	ip, r0, #20
 8007a74:	4594      	cmp	ip, r2
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	d92f      	bls.n	8007ada <_dtoa_r+0x2b2>
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a7e:	f000 ffdd 	bl	8008a3c <_Balloc>
 8007a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a84:	9001      	str	r0, [sp, #4]
 8007a86:	4602      	mov	r2, r0
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d149      	bne.n	8007b20 <_dtoa_r+0x2f8>
 8007a8c:	4b23      	ldr	r3, [pc, #140]	; (8007b1c <_dtoa_r+0x2f4>)
 8007a8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a92:	e6e1      	b.n	8007858 <_dtoa_r+0x30>
 8007a94:	2201      	movs	r2, #1
 8007a96:	e7dd      	b.n	8007a54 <_dtoa_r+0x22c>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	9207      	str	r2, [sp, #28]
 8007a9c:	9a08      	ldr	r2, [sp, #32]
 8007a9e:	eb0b 0a02 	add.w	sl, fp, r2
 8007aa2:	f10a 0901 	add.w	r9, sl, #1
 8007aa6:	464a      	mov	r2, r9
 8007aa8:	2a01      	cmp	r2, #1
 8007aaa:	bfb8      	it	lt
 8007aac:	2201      	movlt	r2, #1
 8007aae:	e7db      	b.n	8007a68 <_dtoa_r+0x240>
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	e7f2      	b.n	8007a9a <_dtoa_r+0x272>
 8007ab4:	2401      	movs	r4, #1
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007abc:	f04f 3aff 	mov.w	sl, #4294967295
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	46d1      	mov	r9, sl
 8007ac4:	2212      	movs	r2, #18
 8007ac6:	9108      	str	r1, [sp, #32]
 8007ac8:	e7ce      	b.n	8007a68 <_dtoa_r+0x240>
 8007aca:	2201      	movs	r2, #1
 8007acc:	9207      	str	r2, [sp, #28]
 8007ace:	e7f5      	b.n	8007abc <_dtoa_r+0x294>
 8007ad0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007ad4:	46d1      	mov	r9, sl
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	e7c6      	b.n	8007a68 <_dtoa_r+0x240>
 8007ada:	3101      	adds	r1, #1
 8007adc:	6079      	str	r1, [r7, #4]
 8007ade:	0040      	lsls	r0, r0, #1
 8007ae0:	e7c6      	b.n	8007a70 <_dtoa_r+0x248>
 8007ae2:	bf00      	nop
 8007ae4:	f3af 8000 	nop.w
 8007ae8:	636f4361 	.word	0x636f4361
 8007aec:	3fd287a7 	.word	0x3fd287a7
 8007af0:	8b60c8b3 	.word	0x8b60c8b3
 8007af4:	3fc68a28 	.word	0x3fc68a28
 8007af8:	509f79fb 	.word	0x509f79fb
 8007afc:	3fd34413 	.word	0x3fd34413
 8007b00:	0800a626 	.word	0x0800a626
 8007b04:	0800a63d 	.word	0x0800a63d
 8007b08:	7ff00000 	.word	0x7ff00000
 8007b0c:	0800a622 	.word	0x0800a622
 8007b10:	0800a619 	.word	0x0800a619
 8007b14:	0800a49d 	.word	0x0800a49d
 8007b18:	0800a7a8 	.word	0x0800a7a8
 8007b1c:	0800a698 	.word	0x0800a698
 8007b20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007b22:	9901      	ldr	r1, [sp, #4]
 8007b24:	6011      	str	r1, [r2, #0]
 8007b26:	f1b9 0f0e 	cmp.w	r9, #14
 8007b2a:	d86c      	bhi.n	8007c06 <_dtoa_r+0x3de>
 8007b2c:	2c00      	cmp	r4, #0
 8007b2e:	d06a      	beq.n	8007c06 <_dtoa_r+0x3de>
 8007b30:	f1bb 0f00 	cmp.w	fp, #0
 8007b34:	f340 80a0 	ble.w	8007c78 <_dtoa_r+0x450>
 8007b38:	49c1      	ldr	r1, [pc, #772]	; (8007e40 <_dtoa_r+0x618>)
 8007b3a:	f00b 020f 	and.w	r2, fp, #15
 8007b3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007b42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b46:	ed92 7b00 	vldr	d7, [r2]
 8007b4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007b4e:	f000 8087 	beq.w	8007c60 <_dtoa_r+0x438>
 8007b52:	4abc      	ldr	r2, [pc, #752]	; (8007e44 <_dtoa_r+0x61c>)
 8007b54:	ed92 6b08 	vldr	d6, [r2, #32]
 8007b58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007b5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007b60:	f001 010f 	and.w	r1, r1, #15
 8007b64:	2203      	movs	r2, #3
 8007b66:	48b7      	ldr	r0, [pc, #732]	; (8007e44 <_dtoa_r+0x61c>)
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	d17b      	bne.n	8007c64 <_dtoa_r+0x43c>
 8007b6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007b74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b7a:	2900      	cmp	r1, #0
 8007b7c:	f000 80a2 	beq.w	8007cc4 <_dtoa_r+0x49c>
 8007b80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b90:	f140 8098 	bpl.w	8007cc4 <_dtoa_r+0x49c>
 8007b94:	f1b9 0f00 	cmp.w	r9, #0
 8007b98:	f000 8094 	beq.w	8007cc4 <_dtoa_r+0x49c>
 8007b9c:	f1ba 0f00 	cmp.w	sl, #0
 8007ba0:	dd2f      	ble.n	8007c02 <_dtoa_r+0x3da>
 8007ba2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007baa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bae:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007bb2:	3201      	adds	r2, #1
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007bba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007bbe:	ee07 2a90 	vmov	s15, r2
 8007bc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007bc6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007bca:	ee15 4a90 	vmov	r4, s11
 8007bce:	ec52 1b15 	vmov	r1, r2, d5
 8007bd2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d177      	bne.n	8007cca <_dtoa_r+0x4a2>
 8007bda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007bde:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007be2:	ec42 1b17 	vmov	d7, r1, r2
 8007be6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bee:	f300 8263 	bgt.w	80080b8 <_dtoa_r+0x890>
 8007bf2:	eeb1 7b47 	vneg.f64	d7, d7
 8007bf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfe:	f100 8258 	bmi.w	80080b2 <_dtoa_r+0x88a>
 8007c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c08:	2a00      	cmp	r2, #0
 8007c0a:	f2c0 811d 	blt.w	8007e48 <_dtoa_r+0x620>
 8007c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8007c12:	f300 8119 	bgt.w	8007e48 <_dtoa_r+0x620>
 8007c16:	4b8a      	ldr	r3, [pc, #552]	; (8007e40 <_dtoa_r+0x618>)
 8007c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c1c:	ed93 6b00 	vldr	d6, [r3]
 8007c20:	9b08      	ldr	r3, [sp, #32]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f280 80b7 	bge.w	8007d96 <_dtoa_r+0x56e>
 8007c28:	f1b9 0f00 	cmp.w	r9, #0
 8007c2c:	f300 80b3 	bgt.w	8007d96 <_dtoa_r+0x56e>
 8007c30:	f040 823f 	bne.w	80080b2 <_dtoa_r+0x88a>
 8007c34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c48:	464c      	mov	r4, r9
 8007c4a:	464f      	mov	r7, r9
 8007c4c:	f280 8215 	bge.w	800807a <_dtoa_r+0x852>
 8007c50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c54:	2331      	movs	r3, #49	; 0x31
 8007c56:	f808 3b01 	strb.w	r3, [r8], #1
 8007c5a:	f10b 0b01 	add.w	fp, fp, #1
 8007c5e:	e211      	b.n	8008084 <_dtoa_r+0x85c>
 8007c60:	2202      	movs	r2, #2
 8007c62:	e780      	b.n	8007b66 <_dtoa_r+0x33e>
 8007c64:	07cc      	lsls	r4, r1, #31
 8007c66:	d504      	bpl.n	8007c72 <_dtoa_r+0x44a>
 8007c68:	ed90 6b00 	vldr	d6, [r0]
 8007c6c:	3201      	adds	r2, #1
 8007c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c72:	1049      	asrs	r1, r1, #1
 8007c74:	3008      	adds	r0, #8
 8007c76:	e777      	b.n	8007b68 <_dtoa_r+0x340>
 8007c78:	d022      	beq.n	8007cc0 <_dtoa_r+0x498>
 8007c7a:	f1cb 0100 	rsb	r1, fp, #0
 8007c7e:	4a70      	ldr	r2, [pc, #448]	; (8007e40 <_dtoa_r+0x618>)
 8007c80:	f001 000f 	and.w	r0, r1, #15
 8007c84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007c88:	ed92 7b00 	vldr	d7, [r2]
 8007c8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c94:	486b      	ldr	r0, [pc, #428]	; (8007e44 <_dtoa_r+0x61c>)
 8007c96:	1109      	asrs	r1, r1, #4
 8007c98:	2400      	movs	r4, #0
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	b929      	cbnz	r1, 8007caa <_dtoa_r+0x482>
 8007c9e:	2c00      	cmp	r4, #0
 8007ca0:	f43f af6a 	beq.w	8007b78 <_dtoa_r+0x350>
 8007ca4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ca8:	e766      	b.n	8007b78 <_dtoa_r+0x350>
 8007caa:	07cf      	lsls	r7, r1, #31
 8007cac:	d505      	bpl.n	8007cba <_dtoa_r+0x492>
 8007cae:	ed90 6b00 	vldr	d6, [r0]
 8007cb2:	3201      	adds	r2, #1
 8007cb4:	2401      	movs	r4, #1
 8007cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cba:	1049      	asrs	r1, r1, #1
 8007cbc:	3008      	adds	r0, #8
 8007cbe:	e7ed      	b.n	8007c9c <_dtoa_r+0x474>
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	e759      	b.n	8007b78 <_dtoa_r+0x350>
 8007cc4:	465f      	mov	r7, fp
 8007cc6:	4648      	mov	r0, r9
 8007cc8:	e775      	b.n	8007bb6 <_dtoa_r+0x38e>
 8007cca:	ec42 1b17 	vmov	d7, r1, r2
 8007cce:	4a5c      	ldr	r2, [pc, #368]	; (8007e40 <_dtoa_r+0x618>)
 8007cd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007cd4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007cd8:	9a01      	ldr	r2, [sp, #4]
 8007cda:	1814      	adds	r4, r2, r0
 8007cdc:	9a07      	ldr	r2, [sp, #28]
 8007cde:	b352      	cbz	r2, 8007d36 <_dtoa_r+0x50e>
 8007ce0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007ce4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007ce8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007cec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007cf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007cf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007cf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007cfc:	ee14 2a90 	vmov	r2, s9
 8007d00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d04:	3230      	adds	r2, #48	; 0x30
 8007d06:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d12:	f808 2b01 	strb.w	r2, [r8], #1
 8007d16:	d439      	bmi.n	8007d8c <_dtoa_r+0x564>
 8007d18:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007d1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d24:	d472      	bmi.n	8007e0c <_dtoa_r+0x5e4>
 8007d26:	45a0      	cmp	r8, r4
 8007d28:	f43f af6b 	beq.w	8007c02 <_dtoa_r+0x3da>
 8007d2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007d30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d34:	e7e0      	b.n	8007cf8 <_dtoa_r+0x4d0>
 8007d36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d3e:	4621      	mov	r1, r4
 8007d40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007d44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d48:	ee14 2a90 	vmov	r2, s9
 8007d4c:	3230      	adds	r2, #48	; 0x30
 8007d4e:	f808 2b01 	strb.w	r2, [r8], #1
 8007d52:	45a0      	cmp	r8, r4
 8007d54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d5c:	d118      	bne.n	8007d90 <_dtoa_r+0x568>
 8007d5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007d62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007d66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6e:	dc4d      	bgt.n	8007e0c <_dtoa_r+0x5e4>
 8007d70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7c:	f57f af41 	bpl.w	8007c02 <_dtoa_r+0x3da>
 8007d80:	4688      	mov	r8, r1
 8007d82:	3901      	subs	r1, #1
 8007d84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007d88:	2b30      	cmp	r3, #48	; 0x30
 8007d8a:	d0f9      	beq.n	8007d80 <_dtoa_r+0x558>
 8007d8c:	46bb      	mov	fp, r7
 8007d8e:	e02a      	b.n	8007de6 <_dtoa_r+0x5be>
 8007d90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d94:	e7d6      	b.n	8007d44 <_dtoa_r+0x51c>
 8007d96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007d9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007da2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007da6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007daa:	ee15 3a10 	vmov	r3, s10
 8007dae:	3330      	adds	r3, #48	; 0x30
 8007db0:	f808 3b01 	strb.w	r3, [r8], #1
 8007db4:	9b01      	ldr	r3, [sp, #4]
 8007db6:	eba8 0303 	sub.w	r3, r8, r3
 8007dba:	4599      	cmp	r9, r3
 8007dbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007dc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007dc4:	d133      	bne.n	8007e2e <_dtoa_r+0x606>
 8007dc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007dca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd2:	dc1a      	bgt.n	8007e0a <_dtoa_r+0x5e2>
 8007dd4:	eeb4 7b46 	vcmp.f64	d7, d6
 8007dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ddc:	d103      	bne.n	8007de6 <_dtoa_r+0x5be>
 8007dde:	ee15 3a10 	vmov	r3, s10
 8007de2:	07d9      	lsls	r1, r3, #31
 8007de4:	d411      	bmi.n	8007e0a <_dtoa_r+0x5e2>
 8007de6:	4629      	mov	r1, r5
 8007de8:	4630      	mov	r0, r6
 8007dea:	f000 fe67 	bl	8008abc <_Bfree>
 8007dee:	2300      	movs	r3, #0
 8007df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007df2:	f888 3000 	strb.w	r3, [r8]
 8007df6:	f10b 0301 	add.w	r3, fp, #1
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f43f ad61 	beq.w	80078c6 <_dtoa_r+0x9e>
 8007e04:	f8c3 8000 	str.w	r8, [r3]
 8007e08:	e55d      	b.n	80078c6 <_dtoa_r+0x9e>
 8007e0a:	465f      	mov	r7, fp
 8007e0c:	4643      	mov	r3, r8
 8007e0e:	4698      	mov	r8, r3
 8007e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e14:	2a39      	cmp	r2, #57	; 0x39
 8007e16:	d106      	bne.n	8007e26 <_dtoa_r+0x5fe>
 8007e18:	9a01      	ldr	r2, [sp, #4]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d1f7      	bne.n	8007e0e <_dtoa_r+0x5e6>
 8007e1e:	9901      	ldr	r1, [sp, #4]
 8007e20:	2230      	movs	r2, #48	; 0x30
 8007e22:	3701      	adds	r7, #1
 8007e24:	700a      	strb	r2, [r1, #0]
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	3201      	adds	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	e7ae      	b.n	8007d8c <_dtoa_r+0x564>
 8007e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3a:	d1b2      	bne.n	8007da2 <_dtoa_r+0x57a>
 8007e3c:	e7d3      	b.n	8007de6 <_dtoa_r+0x5be>
 8007e3e:	bf00      	nop
 8007e40:	0800a7a8 	.word	0x0800a7a8
 8007e44:	0800a780 	.word	0x0800a780
 8007e48:	9907      	ldr	r1, [sp, #28]
 8007e4a:	2900      	cmp	r1, #0
 8007e4c:	f000 80d0 	beq.w	8007ff0 <_dtoa_r+0x7c8>
 8007e50:	9906      	ldr	r1, [sp, #24]
 8007e52:	2901      	cmp	r1, #1
 8007e54:	f300 80b4 	bgt.w	8007fc0 <_dtoa_r+0x798>
 8007e58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	f000 80ac 	beq.w	8007fb8 <_dtoa_r+0x790>
 8007e60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007e68:	461c      	mov	r4, r3
 8007e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e6c:	9b04      	ldr	r3, [sp, #16]
 8007e6e:	4413      	add	r3, r2
 8007e70:	9304      	str	r3, [sp, #16]
 8007e72:	9b05      	ldr	r3, [sp, #20]
 8007e74:	2101      	movs	r1, #1
 8007e76:	4413      	add	r3, r2
 8007e78:	4630      	mov	r0, r6
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	f000 ff20 	bl	8008cc0 <__i2b>
 8007e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e82:	4607      	mov	r7, r0
 8007e84:	f1b8 0f00 	cmp.w	r8, #0
 8007e88:	dd0d      	ble.n	8007ea6 <_dtoa_r+0x67e>
 8007e8a:	9a05      	ldr	r2, [sp, #20]
 8007e8c:	2a00      	cmp	r2, #0
 8007e8e:	dd0a      	ble.n	8007ea6 <_dtoa_r+0x67e>
 8007e90:	4542      	cmp	r2, r8
 8007e92:	9904      	ldr	r1, [sp, #16]
 8007e94:	bfa8      	it	ge
 8007e96:	4642      	movge	r2, r8
 8007e98:	1a89      	subs	r1, r1, r2
 8007e9a:	9104      	str	r1, [sp, #16]
 8007e9c:	9905      	ldr	r1, [sp, #20]
 8007e9e:	eba8 0802 	sub.w	r8, r8, r2
 8007ea2:	1a8a      	subs	r2, r1, r2
 8007ea4:	9205      	str	r2, [sp, #20]
 8007ea6:	b303      	cbz	r3, 8007eea <_dtoa_r+0x6c2>
 8007ea8:	9a07      	ldr	r2, [sp, #28]
 8007eaa:	2a00      	cmp	r2, #0
 8007eac:	f000 80a5 	beq.w	8007ffa <_dtoa_r+0x7d2>
 8007eb0:	2c00      	cmp	r4, #0
 8007eb2:	dd13      	ble.n	8007edc <_dtoa_r+0x6b4>
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	4630      	mov	r0, r6
 8007eba:	930d      	str	r3, [sp, #52]	; 0x34
 8007ebc:	f000 ffc0 	bl	8008e40 <__pow5mult>
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f000 ff10 	bl	8008cec <__multiply>
 8007ecc:	4629      	mov	r1, r5
 8007ece:	900a      	str	r0, [sp, #40]	; 0x28
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 fdf3 	bl	8008abc <_Bfree>
 8007ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eda:	4615      	mov	r5, r2
 8007edc:	1b1a      	subs	r2, r3, r4
 8007ede:	d004      	beq.n	8007eea <_dtoa_r+0x6c2>
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 ffac 	bl	8008e40 <__pow5mult>
 8007ee8:	4605      	mov	r5, r0
 8007eea:	2101      	movs	r1, #1
 8007eec:	4630      	mov	r0, r6
 8007eee:	f000 fee7 	bl	8008cc0 <__i2b>
 8007ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	f340 8081 	ble.w	8007ffe <_dtoa_r+0x7d6>
 8007efc:	461a      	mov	r2, r3
 8007efe:	4601      	mov	r1, r0
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 ff9d 	bl	8008e40 <__pow5mult>
 8007f06:	9b06      	ldr	r3, [sp, #24]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	dd7a      	ble.n	8008004 <_dtoa_r+0x7dc>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	930a      	str	r3, [sp, #40]	; 0x28
 8007f12:	6922      	ldr	r2, [r4, #16]
 8007f14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007f18:	6910      	ldr	r0, [r2, #16]
 8007f1a:	f000 fe81 	bl	8008c20 <__hi0bits>
 8007f1e:	f1c0 0020 	rsb	r0, r0, #32
 8007f22:	9b05      	ldr	r3, [sp, #20]
 8007f24:	4418      	add	r0, r3
 8007f26:	f010 001f 	ands.w	r0, r0, #31
 8007f2a:	f000 808c 	beq.w	8008046 <_dtoa_r+0x81e>
 8007f2e:	f1c0 0220 	rsb	r2, r0, #32
 8007f32:	2a04      	cmp	r2, #4
 8007f34:	f340 8085 	ble.w	8008042 <_dtoa_r+0x81a>
 8007f38:	f1c0 001c 	rsb	r0, r0, #28
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	4403      	add	r3, r0
 8007f40:	9304      	str	r3, [sp, #16]
 8007f42:	9b05      	ldr	r3, [sp, #20]
 8007f44:	4403      	add	r3, r0
 8007f46:	4480      	add	r8, r0
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	9b04      	ldr	r3, [sp, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dd05      	ble.n	8007f5c <_dtoa_r+0x734>
 8007f50:	4629      	mov	r1, r5
 8007f52:	461a      	mov	r2, r3
 8007f54:	4630      	mov	r0, r6
 8007f56:	f000 ffcd 	bl	8008ef4 <__lshift>
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	9b05      	ldr	r3, [sp, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dd05      	ble.n	8007f6e <_dtoa_r+0x746>
 8007f62:	4621      	mov	r1, r4
 8007f64:	461a      	mov	r2, r3
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 ffc4 	bl	8008ef4 <__lshift>
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d06a      	beq.n	800804a <_dtoa_r+0x822>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4628      	mov	r0, r5
 8007f78:	f001 f82c 	bl	8008fd4 <__mcmp>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	da64      	bge.n	800804a <_dtoa_r+0x822>
 8007f80:	2300      	movs	r3, #0
 8007f82:	4629      	mov	r1, r5
 8007f84:	220a      	movs	r2, #10
 8007f86:	4630      	mov	r0, r6
 8007f88:	f000 fdba 	bl	8008b00 <__multadd>
 8007f8c:	9b07      	ldr	r3, [sp, #28]
 8007f8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f92:	4605      	mov	r5, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 8191 	beq.w	80082bc <_dtoa_r+0xa94>
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 fdad 	bl	8008b00 <__multadd>
 8007fa6:	f1ba 0f00 	cmp.w	sl, #0
 8007faa:	4607      	mov	r7, r0
 8007fac:	f300 808d 	bgt.w	80080ca <_dtoa_r+0x8a2>
 8007fb0:	9b06      	ldr	r3, [sp, #24]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	dc50      	bgt.n	8008058 <_dtoa_r+0x830>
 8007fb6:	e088      	b.n	80080ca <_dtoa_r+0x8a2>
 8007fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fbe:	e751      	b.n	8007e64 <_dtoa_r+0x63c>
 8007fc0:	f109 34ff 	add.w	r4, r9, #4294967295
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	bfbf      	itttt	lt
 8007fc8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007fca:	1ae3      	sublt	r3, r4, r3
 8007fcc:	18d2      	addlt	r2, r2, r3
 8007fce:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007fd0:	bfb6      	itet	lt
 8007fd2:	4623      	movlt	r3, r4
 8007fd4:	1b1c      	subge	r4, r3, r4
 8007fd6:	2400      	movlt	r4, #0
 8007fd8:	f1b9 0f00 	cmp.w	r9, #0
 8007fdc:	bfb5      	itete	lt
 8007fde:	9a04      	ldrlt	r2, [sp, #16]
 8007fe0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007fe4:	eba2 0809 	sublt.w	r8, r2, r9
 8007fe8:	464a      	movge	r2, r9
 8007fea:	bfb8      	it	lt
 8007fec:	2200      	movlt	r2, #0
 8007fee:	e73c      	b.n	8007e6a <_dtoa_r+0x642>
 8007ff0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007ff4:	9f07      	ldr	r7, [sp, #28]
 8007ff6:	461c      	mov	r4, r3
 8007ff8:	e744      	b.n	8007e84 <_dtoa_r+0x65c>
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	e770      	b.n	8007ee0 <_dtoa_r+0x6b8>
 8007ffe:	9b06      	ldr	r3, [sp, #24]
 8008000:	2b01      	cmp	r3, #1
 8008002:	dc18      	bgt.n	8008036 <_dtoa_r+0x80e>
 8008004:	9b02      	ldr	r3, [sp, #8]
 8008006:	b9b3      	cbnz	r3, 8008036 <_dtoa_r+0x80e>
 8008008:	9b03      	ldr	r3, [sp, #12]
 800800a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800800e:	b9a2      	cbnz	r2, 800803a <_dtoa_r+0x812>
 8008010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008014:	0d12      	lsrs	r2, r2, #20
 8008016:	0512      	lsls	r2, r2, #20
 8008018:	b18a      	cbz	r2, 800803e <_dtoa_r+0x816>
 800801a:	9b04      	ldr	r3, [sp, #16]
 800801c:	3301      	adds	r3, #1
 800801e:	9304      	str	r3, [sp, #16]
 8008020:	9b05      	ldr	r3, [sp, #20]
 8008022:	3301      	adds	r3, #1
 8008024:	9305      	str	r3, [sp, #20]
 8008026:	2301      	movs	r3, #1
 8008028:	930a      	str	r3, [sp, #40]	; 0x28
 800802a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	f47f af70 	bne.w	8007f12 <_dtoa_r+0x6ea>
 8008032:	2001      	movs	r0, #1
 8008034:	e775      	b.n	8007f22 <_dtoa_r+0x6fa>
 8008036:	2300      	movs	r3, #0
 8008038:	e7f6      	b.n	8008028 <_dtoa_r+0x800>
 800803a:	9b02      	ldr	r3, [sp, #8]
 800803c:	e7f4      	b.n	8008028 <_dtoa_r+0x800>
 800803e:	920a      	str	r2, [sp, #40]	; 0x28
 8008040:	e7f3      	b.n	800802a <_dtoa_r+0x802>
 8008042:	d082      	beq.n	8007f4a <_dtoa_r+0x722>
 8008044:	4610      	mov	r0, r2
 8008046:	301c      	adds	r0, #28
 8008048:	e778      	b.n	8007f3c <_dtoa_r+0x714>
 800804a:	f1b9 0f00 	cmp.w	r9, #0
 800804e:	dc37      	bgt.n	80080c0 <_dtoa_r+0x898>
 8008050:	9b06      	ldr	r3, [sp, #24]
 8008052:	2b02      	cmp	r3, #2
 8008054:	dd34      	ble.n	80080c0 <_dtoa_r+0x898>
 8008056:	46ca      	mov	sl, r9
 8008058:	f1ba 0f00 	cmp.w	sl, #0
 800805c:	d10d      	bne.n	800807a <_dtoa_r+0x852>
 800805e:	4621      	mov	r1, r4
 8008060:	4653      	mov	r3, sl
 8008062:	2205      	movs	r2, #5
 8008064:	4630      	mov	r0, r6
 8008066:	f000 fd4b 	bl	8008b00 <__multadd>
 800806a:	4601      	mov	r1, r0
 800806c:	4604      	mov	r4, r0
 800806e:	4628      	mov	r0, r5
 8008070:	f000 ffb0 	bl	8008fd4 <__mcmp>
 8008074:	2800      	cmp	r0, #0
 8008076:	f73f adeb 	bgt.w	8007c50 <_dtoa_r+0x428>
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008080:	ea6f 0b03 	mvn.w	fp, r3
 8008084:	f04f 0900 	mov.w	r9, #0
 8008088:	4621      	mov	r1, r4
 800808a:	4630      	mov	r0, r6
 800808c:	f000 fd16 	bl	8008abc <_Bfree>
 8008090:	2f00      	cmp	r7, #0
 8008092:	f43f aea8 	beq.w	8007de6 <_dtoa_r+0x5be>
 8008096:	f1b9 0f00 	cmp.w	r9, #0
 800809a:	d005      	beq.n	80080a8 <_dtoa_r+0x880>
 800809c:	45b9      	cmp	r9, r7
 800809e:	d003      	beq.n	80080a8 <_dtoa_r+0x880>
 80080a0:	4649      	mov	r1, r9
 80080a2:	4630      	mov	r0, r6
 80080a4:	f000 fd0a 	bl	8008abc <_Bfree>
 80080a8:	4639      	mov	r1, r7
 80080aa:	4630      	mov	r0, r6
 80080ac:	f000 fd06 	bl	8008abc <_Bfree>
 80080b0:	e699      	b.n	8007de6 <_dtoa_r+0x5be>
 80080b2:	2400      	movs	r4, #0
 80080b4:	4627      	mov	r7, r4
 80080b6:	e7e0      	b.n	800807a <_dtoa_r+0x852>
 80080b8:	46bb      	mov	fp, r7
 80080ba:	4604      	mov	r4, r0
 80080bc:	4607      	mov	r7, r0
 80080be:	e5c7      	b.n	8007c50 <_dtoa_r+0x428>
 80080c0:	9b07      	ldr	r3, [sp, #28]
 80080c2:	46ca      	mov	sl, r9
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8100 	beq.w	80082ca <_dtoa_r+0xaa2>
 80080ca:	f1b8 0f00 	cmp.w	r8, #0
 80080ce:	dd05      	ble.n	80080dc <_dtoa_r+0x8b4>
 80080d0:	4639      	mov	r1, r7
 80080d2:	4642      	mov	r2, r8
 80080d4:	4630      	mov	r0, r6
 80080d6:	f000 ff0d 	bl	8008ef4 <__lshift>
 80080da:	4607      	mov	r7, r0
 80080dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d05d      	beq.n	800819e <_dtoa_r+0x976>
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 fca9 	bl	8008a3c <_Balloc>
 80080ea:	4680      	mov	r8, r0
 80080ec:	b928      	cbnz	r0, 80080fa <_dtoa_r+0x8d2>
 80080ee:	4b82      	ldr	r3, [pc, #520]	; (80082f8 <_dtoa_r+0xad0>)
 80080f0:	4602      	mov	r2, r0
 80080f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080f6:	f7ff bbaf 	b.w	8007858 <_dtoa_r+0x30>
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	3202      	adds	r2, #2
 80080fe:	0092      	lsls	r2, r2, #2
 8008100:	f107 010c 	add.w	r1, r7, #12
 8008104:	300c      	adds	r0, #12
 8008106:	f000 fc8b 	bl	8008a20 <memcpy>
 800810a:	2201      	movs	r2, #1
 800810c:	4641      	mov	r1, r8
 800810e:	4630      	mov	r0, r6
 8008110:	f000 fef0 	bl	8008ef4 <__lshift>
 8008114:	9b01      	ldr	r3, [sp, #4]
 8008116:	3301      	adds	r3, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	9b01      	ldr	r3, [sp, #4]
 800811c:	4453      	add	r3, sl
 800811e:	9308      	str	r3, [sp, #32]
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	46b9      	mov	r9, r7
 8008128:	9307      	str	r3, [sp, #28]
 800812a:	4607      	mov	r7, r0
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	4621      	mov	r1, r4
 8008130:	3b01      	subs	r3, #1
 8008132:	4628      	mov	r0, r5
 8008134:	9302      	str	r3, [sp, #8]
 8008136:	f7ff faeb 	bl	8007710 <quorem>
 800813a:	4603      	mov	r3, r0
 800813c:	3330      	adds	r3, #48	; 0x30
 800813e:	9005      	str	r0, [sp, #20]
 8008140:	4649      	mov	r1, r9
 8008142:	4628      	mov	r0, r5
 8008144:	9309      	str	r3, [sp, #36]	; 0x24
 8008146:	f000 ff45 	bl	8008fd4 <__mcmp>
 800814a:	463a      	mov	r2, r7
 800814c:	4682      	mov	sl, r0
 800814e:	4621      	mov	r1, r4
 8008150:	4630      	mov	r0, r6
 8008152:	f000 ff5b 	bl	800900c <__mdiff>
 8008156:	68c2      	ldr	r2, [r0, #12]
 8008158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815a:	4680      	mov	r8, r0
 800815c:	bb0a      	cbnz	r2, 80081a2 <_dtoa_r+0x97a>
 800815e:	4601      	mov	r1, r0
 8008160:	4628      	mov	r0, r5
 8008162:	f000 ff37 	bl	8008fd4 <__mcmp>
 8008166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008168:	4602      	mov	r2, r0
 800816a:	4641      	mov	r1, r8
 800816c:	4630      	mov	r0, r6
 800816e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008172:	f000 fca3 	bl	8008abc <_Bfree>
 8008176:	9b06      	ldr	r3, [sp, #24]
 8008178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800817a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800817e:	ea43 0102 	orr.w	r1, r3, r2
 8008182:	9b07      	ldr	r3, [sp, #28]
 8008184:	430b      	orrs	r3, r1
 8008186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008188:	d10d      	bne.n	80081a6 <_dtoa_r+0x97e>
 800818a:	2b39      	cmp	r3, #57	; 0x39
 800818c:	d029      	beq.n	80081e2 <_dtoa_r+0x9ba>
 800818e:	f1ba 0f00 	cmp.w	sl, #0
 8008192:	dd01      	ble.n	8008198 <_dtoa_r+0x970>
 8008194:	9b05      	ldr	r3, [sp, #20]
 8008196:	3331      	adds	r3, #49	; 0x31
 8008198:	9a02      	ldr	r2, [sp, #8]
 800819a:	7013      	strb	r3, [r2, #0]
 800819c:	e774      	b.n	8008088 <_dtoa_r+0x860>
 800819e:	4638      	mov	r0, r7
 80081a0:	e7b8      	b.n	8008114 <_dtoa_r+0x8ec>
 80081a2:	2201      	movs	r2, #1
 80081a4:	e7e1      	b.n	800816a <_dtoa_r+0x942>
 80081a6:	f1ba 0f00 	cmp.w	sl, #0
 80081aa:	db06      	blt.n	80081ba <_dtoa_r+0x992>
 80081ac:	9906      	ldr	r1, [sp, #24]
 80081ae:	ea41 0a0a 	orr.w	sl, r1, sl
 80081b2:	9907      	ldr	r1, [sp, #28]
 80081b4:	ea5a 0101 	orrs.w	r1, sl, r1
 80081b8:	d120      	bne.n	80081fc <_dtoa_r+0x9d4>
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	ddec      	ble.n	8008198 <_dtoa_r+0x970>
 80081be:	4629      	mov	r1, r5
 80081c0:	2201      	movs	r2, #1
 80081c2:	4630      	mov	r0, r6
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	f000 fe95 	bl	8008ef4 <__lshift>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4605      	mov	r5, r0
 80081ce:	f000 ff01 	bl	8008fd4 <__mcmp>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	9b04      	ldr	r3, [sp, #16]
 80081d6:	dc02      	bgt.n	80081de <_dtoa_r+0x9b6>
 80081d8:	d1de      	bne.n	8008198 <_dtoa_r+0x970>
 80081da:	07da      	lsls	r2, r3, #31
 80081dc:	d5dc      	bpl.n	8008198 <_dtoa_r+0x970>
 80081de:	2b39      	cmp	r3, #57	; 0x39
 80081e0:	d1d8      	bne.n	8008194 <_dtoa_r+0x96c>
 80081e2:	9a02      	ldr	r2, [sp, #8]
 80081e4:	2339      	movs	r3, #57	; 0x39
 80081e6:	7013      	strb	r3, [r2, #0]
 80081e8:	4643      	mov	r3, r8
 80081ea:	4698      	mov	r8, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80081f2:	2a39      	cmp	r2, #57	; 0x39
 80081f4:	d051      	beq.n	800829a <_dtoa_r+0xa72>
 80081f6:	3201      	adds	r2, #1
 80081f8:	701a      	strb	r2, [r3, #0]
 80081fa:	e745      	b.n	8008088 <_dtoa_r+0x860>
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	dd03      	ble.n	8008208 <_dtoa_r+0x9e0>
 8008200:	2b39      	cmp	r3, #57	; 0x39
 8008202:	d0ee      	beq.n	80081e2 <_dtoa_r+0x9ba>
 8008204:	3301      	adds	r3, #1
 8008206:	e7c7      	b.n	8008198 <_dtoa_r+0x970>
 8008208:	9a04      	ldr	r2, [sp, #16]
 800820a:	9908      	ldr	r1, [sp, #32]
 800820c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008210:	428a      	cmp	r2, r1
 8008212:	d02b      	beq.n	800826c <_dtoa_r+0xa44>
 8008214:	4629      	mov	r1, r5
 8008216:	2300      	movs	r3, #0
 8008218:	220a      	movs	r2, #10
 800821a:	4630      	mov	r0, r6
 800821c:	f000 fc70 	bl	8008b00 <__multadd>
 8008220:	45b9      	cmp	r9, r7
 8008222:	4605      	mov	r5, r0
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	f04f 020a 	mov.w	r2, #10
 800822c:	4649      	mov	r1, r9
 800822e:	4630      	mov	r0, r6
 8008230:	d107      	bne.n	8008242 <_dtoa_r+0xa1a>
 8008232:	f000 fc65 	bl	8008b00 <__multadd>
 8008236:	4681      	mov	r9, r0
 8008238:	4607      	mov	r7, r0
 800823a:	9b04      	ldr	r3, [sp, #16]
 800823c:	3301      	adds	r3, #1
 800823e:	9304      	str	r3, [sp, #16]
 8008240:	e774      	b.n	800812c <_dtoa_r+0x904>
 8008242:	f000 fc5d 	bl	8008b00 <__multadd>
 8008246:	4639      	mov	r1, r7
 8008248:	4681      	mov	r9, r0
 800824a:	2300      	movs	r3, #0
 800824c:	220a      	movs	r2, #10
 800824e:	4630      	mov	r0, r6
 8008250:	f000 fc56 	bl	8008b00 <__multadd>
 8008254:	4607      	mov	r7, r0
 8008256:	e7f0      	b.n	800823a <_dtoa_r+0xa12>
 8008258:	f1ba 0f00 	cmp.w	sl, #0
 800825c:	9a01      	ldr	r2, [sp, #4]
 800825e:	bfcc      	ite	gt
 8008260:	46d0      	movgt	r8, sl
 8008262:	f04f 0801 	movle.w	r8, #1
 8008266:	4490      	add	r8, r2
 8008268:	f04f 0900 	mov.w	r9, #0
 800826c:	4629      	mov	r1, r5
 800826e:	2201      	movs	r2, #1
 8008270:	4630      	mov	r0, r6
 8008272:	9302      	str	r3, [sp, #8]
 8008274:	f000 fe3e 	bl	8008ef4 <__lshift>
 8008278:	4621      	mov	r1, r4
 800827a:	4605      	mov	r5, r0
 800827c:	f000 feaa 	bl	8008fd4 <__mcmp>
 8008280:	2800      	cmp	r0, #0
 8008282:	dcb1      	bgt.n	80081e8 <_dtoa_r+0x9c0>
 8008284:	d102      	bne.n	800828c <_dtoa_r+0xa64>
 8008286:	9b02      	ldr	r3, [sp, #8]
 8008288:	07db      	lsls	r3, r3, #31
 800828a:	d4ad      	bmi.n	80081e8 <_dtoa_r+0x9c0>
 800828c:	4643      	mov	r3, r8
 800828e:	4698      	mov	r8, r3
 8008290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008294:	2a30      	cmp	r2, #48	; 0x30
 8008296:	d0fa      	beq.n	800828e <_dtoa_r+0xa66>
 8008298:	e6f6      	b.n	8008088 <_dtoa_r+0x860>
 800829a:	9a01      	ldr	r2, [sp, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d1a4      	bne.n	80081ea <_dtoa_r+0x9c2>
 80082a0:	f10b 0b01 	add.w	fp, fp, #1
 80082a4:	2331      	movs	r3, #49	; 0x31
 80082a6:	e778      	b.n	800819a <_dtoa_r+0x972>
 80082a8:	4b14      	ldr	r3, [pc, #80]	; (80082fc <_dtoa_r+0xad4>)
 80082aa:	f7ff bb27 	b.w	80078fc <_dtoa_r+0xd4>
 80082ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f47f ab03 	bne.w	80078bc <_dtoa_r+0x94>
 80082b6:	4b12      	ldr	r3, [pc, #72]	; (8008300 <_dtoa_r+0xad8>)
 80082b8:	f7ff bb20 	b.w	80078fc <_dtoa_r+0xd4>
 80082bc:	f1ba 0f00 	cmp.w	sl, #0
 80082c0:	dc03      	bgt.n	80082ca <_dtoa_r+0xaa2>
 80082c2:	9b06      	ldr	r3, [sp, #24]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	f73f aec7 	bgt.w	8008058 <_dtoa_r+0x830>
 80082ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80082ce:	4621      	mov	r1, r4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7ff fa1d 	bl	8007710 <quorem>
 80082d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80082da:	f808 3b01 	strb.w	r3, [r8], #1
 80082de:	9a01      	ldr	r2, [sp, #4]
 80082e0:	eba8 0202 	sub.w	r2, r8, r2
 80082e4:	4592      	cmp	sl, r2
 80082e6:	ddb7      	ble.n	8008258 <_dtoa_r+0xa30>
 80082e8:	4629      	mov	r1, r5
 80082ea:	2300      	movs	r3, #0
 80082ec:	220a      	movs	r2, #10
 80082ee:	4630      	mov	r0, r6
 80082f0:	f000 fc06 	bl	8008b00 <__multadd>
 80082f4:	4605      	mov	r5, r0
 80082f6:	e7ea      	b.n	80082ce <_dtoa_r+0xaa6>
 80082f8:	0800a698 	.word	0x0800a698
 80082fc:	0800a49c 	.word	0x0800a49c
 8008300:	0800a619 	.word	0x0800a619

08008304 <rshift>:
 8008304:	6903      	ldr	r3, [r0, #16]
 8008306:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800830a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800830e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008312:	f100 0414 	add.w	r4, r0, #20
 8008316:	dd45      	ble.n	80083a4 <rshift+0xa0>
 8008318:	f011 011f 	ands.w	r1, r1, #31
 800831c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008320:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008324:	d10c      	bne.n	8008340 <rshift+0x3c>
 8008326:	f100 0710 	add.w	r7, r0, #16
 800832a:	4629      	mov	r1, r5
 800832c:	42b1      	cmp	r1, r6
 800832e:	d334      	bcc.n	800839a <rshift+0x96>
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	1eea      	subs	r2, r5, #3
 8008336:	4296      	cmp	r6, r2
 8008338:	bf38      	it	cc
 800833a:	2300      	movcc	r3, #0
 800833c:	4423      	add	r3, r4
 800833e:	e015      	b.n	800836c <rshift+0x68>
 8008340:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008344:	f1c1 0820 	rsb	r8, r1, #32
 8008348:	40cf      	lsrs	r7, r1
 800834a:	f105 0e04 	add.w	lr, r5, #4
 800834e:	46a1      	mov	r9, r4
 8008350:	4576      	cmp	r6, lr
 8008352:	46f4      	mov	ip, lr
 8008354:	d815      	bhi.n	8008382 <rshift+0x7e>
 8008356:	1a9a      	subs	r2, r3, r2
 8008358:	0092      	lsls	r2, r2, #2
 800835a:	3a04      	subs	r2, #4
 800835c:	3501      	adds	r5, #1
 800835e:	42ae      	cmp	r6, r5
 8008360:	bf38      	it	cc
 8008362:	2200      	movcc	r2, #0
 8008364:	18a3      	adds	r3, r4, r2
 8008366:	50a7      	str	r7, [r4, r2]
 8008368:	b107      	cbz	r7, 800836c <rshift+0x68>
 800836a:	3304      	adds	r3, #4
 800836c:	1b1a      	subs	r2, r3, r4
 800836e:	42a3      	cmp	r3, r4
 8008370:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008374:	bf08      	it	eq
 8008376:	2300      	moveq	r3, #0
 8008378:	6102      	str	r2, [r0, #16]
 800837a:	bf08      	it	eq
 800837c:	6143      	streq	r3, [r0, #20]
 800837e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008382:	f8dc c000 	ldr.w	ip, [ip]
 8008386:	fa0c fc08 	lsl.w	ip, ip, r8
 800838a:	ea4c 0707 	orr.w	r7, ip, r7
 800838e:	f849 7b04 	str.w	r7, [r9], #4
 8008392:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008396:	40cf      	lsrs	r7, r1
 8008398:	e7da      	b.n	8008350 <rshift+0x4c>
 800839a:	f851 cb04 	ldr.w	ip, [r1], #4
 800839e:	f847 cf04 	str.w	ip, [r7, #4]!
 80083a2:	e7c3      	b.n	800832c <rshift+0x28>
 80083a4:	4623      	mov	r3, r4
 80083a6:	e7e1      	b.n	800836c <rshift+0x68>

080083a8 <__hexdig_fun>:
 80083a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80083ac:	2b09      	cmp	r3, #9
 80083ae:	d802      	bhi.n	80083b6 <__hexdig_fun+0xe>
 80083b0:	3820      	subs	r0, #32
 80083b2:	b2c0      	uxtb	r0, r0
 80083b4:	4770      	bx	lr
 80083b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	d801      	bhi.n	80083c2 <__hexdig_fun+0x1a>
 80083be:	3847      	subs	r0, #71	; 0x47
 80083c0:	e7f7      	b.n	80083b2 <__hexdig_fun+0xa>
 80083c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80083c6:	2b05      	cmp	r3, #5
 80083c8:	d801      	bhi.n	80083ce <__hexdig_fun+0x26>
 80083ca:	3827      	subs	r0, #39	; 0x27
 80083cc:	e7f1      	b.n	80083b2 <__hexdig_fun+0xa>
 80083ce:	2000      	movs	r0, #0
 80083d0:	4770      	bx	lr
	...

080083d4 <__gethex>:
 80083d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d8:	ed2d 8b02 	vpush	{d8}
 80083dc:	b089      	sub	sp, #36	; 0x24
 80083de:	ee08 0a10 	vmov	s16, r0
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	4bb4      	ldr	r3, [pc, #720]	; (80086b8 <__gethex+0x2e4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	4618      	mov	r0, r3
 80083ec:	468b      	mov	fp, r1
 80083ee:	4690      	mov	r8, r2
 80083f0:	f7f7 ff26 	bl	8000240 <strlen>
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	f8db 2000 	ldr.w	r2, [fp]
 80083fa:	4403      	add	r3, r0
 80083fc:	4682      	mov	sl, r0
 80083fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	1c93      	adds	r3, r2, #2
 8008406:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800840a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800840e:	32fe      	adds	r2, #254	; 0xfe
 8008410:	18d1      	adds	r1, r2, r3
 8008412:	461f      	mov	r7, r3
 8008414:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008418:	9100      	str	r1, [sp, #0]
 800841a:	2830      	cmp	r0, #48	; 0x30
 800841c:	d0f8      	beq.n	8008410 <__gethex+0x3c>
 800841e:	f7ff ffc3 	bl	80083a8 <__hexdig_fun>
 8008422:	4604      	mov	r4, r0
 8008424:	2800      	cmp	r0, #0
 8008426:	d13a      	bne.n	800849e <__gethex+0xca>
 8008428:	9901      	ldr	r1, [sp, #4]
 800842a:	4652      	mov	r2, sl
 800842c:	4638      	mov	r0, r7
 800842e:	f001 fa2f 	bl	8009890 <strncmp>
 8008432:	4605      	mov	r5, r0
 8008434:	2800      	cmp	r0, #0
 8008436:	d168      	bne.n	800850a <__gethex+0x136>
 8008438:	f817 000a 	ldrb.w	r0, [r7, sl]
 800843c:	eb07 060a 	add.w	r6, r7, sl
 8008440:	f7ff ffb2 	bl	80083a8 <__hexdig_fun>
 8008444:	2800      	cmp	r0, #0
 8008446:	d062      	beq.n	800850e <__gethex+0x13a>
 8008448:	4633      	mov	r3, r6
 800844a:	7818      	ldrb	r0, [r3, #0]
 800844c:	2830      	cmp	r0, #48	; 0x30
 800844e:	461f      	mov	r7, r3
 8008450:	f103 0301 	add.w	r3, r3, #1
 8008454:	d0f9      	beq.n	800844a <__gethex+0x76>
 8008456:	f7ff ffa7 	bl	80083a8 <__hexdig_fun>
 800845a:	2301      	movs	r3, #1
 800845c:	fab0 f480 	clz	r4, r0
 8008460:	0964      	lsrs	r4, r4, #5
 8008462:	4635      	mov	r5, r6
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	463a      	mov	r2, r7
 8008468:	4616      	mov	r6, r2
 800846a:	3201      	adds	r2, #1
 800846c:	7830      	ldrb	r0, [r6, #0]
 800846e:	f7ff ff9b 	bl	80083a8 <__hexdig_fun>
 8008472:	2800      	cmp	r0, #0
 8008474:	d1f8      	bne.n	8008468 <__gethex+0x94>
 8008476:	9901      	ldr	r1, [sp, #4]
 8008478:	4652      	mov	r2, sl
 800847a:	4630      	mov	r0, r6
 800847c:	f001 fa08 	bl	8009890 <strncmp>
 8008480:	b980      	cbnz	r0, 80084a4 <__gethex+0xd0>
 8008482:	b94d      	cbnz	r5, 8008498 <__gethex+0xc4>
 8008484:	eb06 050a 	add.w	r5, r6, sl
 8008488:	462a      	mov	r2, r5
 800848a:	4616      	mov	r6, r2
 800848c:	3201      	adds	r2, #1
 800848e:	7830      	ldrb	r0, [r6, #0]
 8008490:	f7ff ff8a 	bl	80083a8 <__hexdig_fun>
 8008494:	2800      	cmp	r0, #0
 8008496:	d1f8      	bne.n	800848a <__gethex+0xb6>
 8008498:	1bad      	subs	r5, r5, r6
 800849a:	00ad      	lsls	r5, r5, #2
 800849c:	e004      	b.n	80084a8 <__gethex+0xd4>
 800849e:	2400      	movs	r4, #0
 80084a0:	4625      	mov	r5, r4
 80084a2:	e7e0      	b.n	8008466 <__gethex+0x92>
 80084a4:	2d00      	cmp	r5, #0
 80084a6:	d1f7      	bne.n	8008498 <__gethex+0xc4>
 80084a8:	7833      	ldrb	r3, [r6, #0]
 80084aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084ae:	2b50      	cmp	r3, #80	; 0x50
 80084b0:	d13b      	bne.n	800852a <__gethex+0x156>
 80084b2:	7873      	ldrb	r3, [r6, #1]
 80084b4:	2b2b      	cmp	r3, #43	; 0x2b
 80084b6:	d02c      	beq.n	8008512 <__gethex+0x13e>
 80084b8:	2b2d      	cmp	r3, #45	; 0x2d
 80084ba:	d02e      	beq.n	800851a <__gethex+0x146>
 80084bc:	1c71      	adds	r1, r6, #1
 80084be:	f04f 0900 	mov.w	r9, #0
 80084c2:	7808      	ldrb	r0, [r1, #0]
 80084c4:	f7ff ff70 	bl	80083a8 <__hexdig_fun>
 80084c8:	1e43      	subs	r3, r0, #1
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b18      	cmp	r3, #24
 80084ce:	d82c      	bhi.n	800852a <__gethex+0x156>
 80084d0:	f1a0 0210 	sub.w	r2, r0, #16
 80084d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084d8:	f7ff ff66 	bl	80083a8 <__hexdig_fun>
 80084dc:	1e43      	subs	r3, r0, #1
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b18      	cmp	r3, #24
 80084e2:	d91d      	bls.n	8008520 <__gethex+0x14c>
 80084e4:	f1b9 0f00 	cmp.w	r9, #0
 80084e8:	d000      	beq.n	80084ec <__gethex+0x118>
 80084ea:	4252      	negs	r2, r2
 80084ec:	4415      	add	r5, r2
 80084ee:	f8cb 1000 	str.w	r1, [fp]
 80084f2:	b1e4      	cbz	r4, 800852e <__gethex+0x15a>
 80084f4:	9b00      	ldr	r3, [sp, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bf14      	ite	ne
 80084fa:	2700      	movne	r7, #0
 80084fc:	2706      	moveq	r7, #6
 80084fe:	4638      	mov	r0, r7
 8008500:	b009      	add	sp, #36	; 0x24
 8008502:	ecbd 8b02 	vpop	{d8}
 8008506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850a:	463e      	mov	r6, r7
 800850c:	4625      	mov	r5, r4
 800850e:	2401      	movs	r4, #1
 8008510:	e7ca      	b.n	80084a8 <__gethex+0xd4>
 8008512:	f04f 0900 	mov.w	r9, #0
 8008516:	1cb1      	adds	r1, r6, #2
 8008518:	e7d3      	b.n	80084c2 <__gethex+0xee>
 800851a:	f04f 0901 	mov.w	r9, #1
 800851e:	e7fa      	b.n	8008516 <__gethex+0x142>
 8008520:	230a      	movs	r3, #10
 8008522:	fb03 0202 	mla	r2, r3, r2, r0
 8008526:	3a10      	subs	r2, #16
 8008528:	e7d4      	b.n	80084d4 <__gethex+0x100>
 800852a:	4631      	mov	r1, r6
 800852c:	e7df      	b.n	80084ee <__gethex+0x11a>
 800852e:	1bf3      	subs	r3, r6, r7
 8008530:	3b01      	subs	r3, #1
 8008532:	4621      	mov	r1, r4
 8008534:	2b07      	cmp	r3, #7
 8008536:	dc0b      	bgt.n	8008550 <__gethex+0x17c>
 8008538:	ee18 0a10 	vmov	r0, s16
 800853c:	f000 fa7e 	bl	8008a3c <_Balloc>
 8008540:	4604      	mov	r4, r0
 8008542:	b940      	cbnz	r0, 8008556 <__gethex+0x182>
 8008544:	4b5d      	ldr	r3, [pc, #372]	; (80086bc <__gethex+0x2e8>)
 8008546:	4602      	mov	r2, r0
 8008548:	21de      	movs	r1, #222	; 0xde
 800854a:	485d      	ldr	r0, [pc, #372]	; (80086c0 <__gethex+0x2ec>)
 800854c:	f001 f9c2 	bl	80098d4 <__assert_func>
 8008550:	3101      	adds	r1, #1
 8008552:	105b      	asrs	r3, r3, #1
 8008554:	e7ee      	b.n	8008534 <__gethex+0x160>
 8008556:	f100 0914 	add.w	r9, r0, #20
 800855a:	f04f 0b00 	mov.w	fp, #0
 800855e:	f1ca 0301 	rsb	r3, sl, #1
 8008562:	f8cd 9008 	str.w	r9, [sp, #8]
 8008566:	f8cd b000 	str.w	fp, [sp]
 800856a:	9306      	str	r3, [sp, #24]
 800856c:	42b7      	cmp	r7, r6
 800856e:	d340      	bcc.n	80085f2 <__gethex+0x21e>
 8008570:	9802      	ldr	r0, [sp, #8]
 8008572:	9b00      	ldr	r3, [sp, #0]
 8008574:	f840 3b04 	str.w	r3, [r0], #4
 8008578:	eba0 0009 	sub.w	r0, r0, r9
 800857c:	1080      	asrs	r0, r0, #2
 800857e:	0146      	lsls	r6, r0, #5
 8008580:	6120      	str	r0, [r4, #16]
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fb4c 	bl	8008c20 <__hi0bits>
 8008588:	1a30      	subs	r0, r6, r0
 800858a:	f8d8 6000 	ldr.w	r6, [r8]
 800858e:	42b0      	cmp	r0, r6
 8008590:	dd63      	ble.n	800865a <__gethex+0x286>
 8008592:	1b87      	subs	r7, r0, r6
 8008594:	4639      	mov	r1, r7
 8008596:	4620      	mov	r0, r4
 8008598:	f000 feed 	bl	8009376 <__any_on>
 800859c:	4682      	mov	sl, r0
 800859e:	b1a8      	cbz	r0, 80085cc <__gethex+0x1f8>
 80085a0:	1e7b      	subs	r3, r7, #1
 80085a2:	1159      	asrs	r1, r3, #5
 80085a4:	f003 021f 	and.w	r2, r3, #31
 80085a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80085ac:	f04f 0a01 	mov.w	sl, #1
 80085b0:	fa0a f202 	lsl.w	r2, sl, r2
 80085b4:	420a      	tst	r2, r1
 80085b6:	d009      	beq.n	80085cc <__gethex+0x1f8>
 80085b8:	4553      	cmp	r3, sl
 80085ba:	dd05      	ble.n	80085c8 <__gethex+0x1f4>
 80085bc:	1eb9      	subs	r1, r7, #2
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 fed9 	bl	8009376 <__any_on>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d145      	bne.n	8008654 <__gethex+0x280>
 80085c8:	f04f 0a02 	mov.w	sl, #2
 80085cc:	4639      	mov	r1, r7
 80085ce:	4620      	mov	r0, r4
 80085d0:	f7ff fe98 	bl	8008304 <rshift>
 80085d4:	443d      	add	r5, r7
 80085d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085da:	42ab      	cmp	r3, r5
 80085dc:	da4c      	bge.n	8008678 <__gethex+0x2a4>
 80085de:	ee18 0a10 	vmov	r0, s16
 80085e2:	4621      	mov	r1, r4
 80085e4:	f000 fa6a 	bl	8008abc <_Bfree>
 80085e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085ea:	2300      	movs	r3, #0
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	27a3      	movs	r7, #163	; 0xa3
 80085f0:	e785      	b.n	80084fe <__gethex+0x12a>
 80085f2:	1e73      	subs	r3, r6, #1
 80085f4:	9a05      	ldr	r2, [sp, #20]
 80085f6:	9303      	str	r3, [sp, #12]
 80085f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d019      	beq.n	8008634 <__gethex+0x260>
 8008600:	f1bb 0f20 	cmp.w	fp, #32
 8008604:	d107      	bne.n	8008616 <__gethex+0x242>
 8008606:	9b02      	ldr	r3, [sp, #8]
 8008608:	9a00      	ldr	r2, [sp, #0]
 800860a:	f843 2b04 	str.w	r2, [r3], #4
 800860e:	9302      	str	r3, [sp, #8]
 8008610:	2300      	movs	r3, #0
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	469b      	mov	fp, r3
 8008616:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800861a:	f7ff fec5 	bl	80083a8 <__hexdig_fun>
 800861e:	9b00      	ldr	r3, [sp, #0]
 8008620:	f000 000f 	and.w	r0, r0, #15
 8008624:	fa00 f00b 	lsl.w	r0, r0, fp
 8008628:	4303      	orrs	r3, r0
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	f10b 0b04 	add.w	fp, fp, #4
 8008630:	9b03      	ldr	r3, [sp, #12]
 8008632:	e00d      	b.n	8008650 <__gethex+0x27c>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	9a06      	ldr	r2, [sp, #24]
 8008638:	4413      	add	r3, r2
 800863a:	42bb      	cmp	r3, r7
 800863c:	d3e0      	bcc.n	8008600 <__gethex+0x22c>
 800863e:	4618      	mov	r0, r3
 8008640:	9901      	ldr	r1, [sp, #4]
 8008642:	9307      	str	r3, [sp, #28]
 8008644:	4652      	mov	r2, sl
 8008646:	f001 f923 	bl	8009890 <strncmp>
 800864a:	9b07      	ldr	r3, [sp, #28]
 800864c:	2800      	cmp	r0, #0
 800864e:	d1d7      	bne.n	8008600 <__gethex+0x22c>
 8008650:	461e      	mov	r6, r3
 8008652:	e78b      	b.n	800856c <__gethex+0x198>
 8008654:	f04f 0a03 	mov.w	sl, #3
 8008658:	e7b8      	b.n	80085cc <__gethex+0x1f8>
 800865a:	da0a      	bge.n	8008672 <__gethex+0x29e>
 800865c:	1a37      	subs	r7, r6, r0
 800865e:	4621      	mov	r1, r4
 8008660:	ee18 0a10 	vmov	r0, s16
 8008664:	463a      	mov	r2, r7
 8008666:	f000 fc45 	bl	8008ef4 <__lshift>
 800866a:	1bed      	subs	r5, r5, r7
 800866c:	4604      	mov	r4, r0
 800866e:	f100 0914 	add.w	r9, r0, #20
 8008672:	f04f 0a00 	mov.w	sl, #0
 8008676:	e7ae      	b.n	80085d6 <__gethex+0x202>
 8008678:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800867c:	42a8      	cmp	r0, r5
 800867e:	dd72      	ble.n	8008766 <__gethex+0x392>
 8008680:	1b45      	subs	r5, r0, r5
 8008682:	42ae      	cmp	r6, r5
 8008684:	dc36      	bgt.n	80086f4 <__gethex+0x320>
 8008686:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d02a      	beq.n	80086e4 <__gethex+0x310>
 800868e:	2b03      	cmp	r3, #3
 8008690:	d02c      	beq.n	80086ec <__gethex+0x318>
 8008692:	2b01      	cmp	r3, #1
 8008694:	d11c      	bne.n	80086d0 <__gethex+0x2fc>
 8008696:	42ae      	cmp	r6, r5
 8008698:	d11a      	bne.n	80086d0 <__gethex+0x2fc>
 800869a:	2e01      	cmp	r6, #1
 800869c:	d112      	bne.n	80086c4 <__gethex+0x2f0>
 800869e:	9a04      	ldr	r2, [sp, #16]
 80086a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	2301      	movs	r3, #1
 80086a8:	6123      	str	r3, [r4, #16]
 80086aa:	f8c9 3000 	str.w	r3, [r9]
 80086ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086b0:	2762      	movs	r7, #98	; 0x62
 80086b2:	601c      	str	r4, [r3, #0]
 80086b4:	e723      	b.n	80084fe <__gethex+0x12a>
 80086b6:	bf00      	nop
 80086b8:	0800a710 	.word	0x0800a710
 80086bc:	0800a698 	.word	0x0800a698
 80086c0:	0800a6a9 	.word	0x0800a6a9
 80086c4:	1e71      	subs	r1, r6, #1
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 fe55 	bl	8009376 <__any_on>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d1e6      	bne.n	800869e <__gethex+0x2ca>
 80086d0:	ee18 0a10 	vmov	r0, s16
 80086d4:	4621      	mov	r1, r4
 80086d6:	f000 f9f1 	bl	8008abc <_Bfree>
 80086da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086dc:	2300      	movs	r3, #0
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	2750      	movs	r7, #80	; 0x50
 80086e2:	e70c      	b.n	80084fe <__gethex+0x12a>
 80086e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f2      	bne.n	80086d0 <__gethex+0x2fc>
 80086ea:	e7d8      	b.n	800869e <__gethex+0x2ca>
 80086ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1d5      	bne.n	800869e <__gethex+0x2ca>
 80086f2:	e7ed      	b.n	80086d0 <__gethex+0x2fc>
 80086f4:	1e6f      	subs	r7, r5, #1
 80086f6:	f1ba 0f00 	cmp.w	sl, #0
 80086fa:	d131      	bne.n	8008760 <__gethex+0x38c>
 80086fc:	b127      	cbz	r7, 8008708 <__gethex+0x334>
 80086fe:	4639      	mov	r1, r7
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fe38 	bl	8009376 <__any_on>
 8008706:	4682      	mov	sl, r0
 8008708:	117b      	asrs	r3, r7, #5
 800870a:	2101      	movs	r1, #1
 800870c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008710:	f007 071f 	and.w	r7, r7, #31
 8008714:	fa01 f707 	lsl.w	r7, r1, r7
 8008718:	421f      	tst	r7, r3
 800871a:	4629      	mov	r1, r5
 800871c:	4620      	mov	r0, r4
 800871e:	bf18      	it	ne
 8008720:	f04a 0a02 	orrne.w	sl, sl, #2
 8008724:	1b76      	subs	r6, r6, r5
 8008726:	f7ff fded 	bl	8008304 <rshift>
 800872a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800872e:	2702      	movs	r7, #2
 8008730:	f1ba 0f00 	cmp.w	sl, #0
 8008734:	d048      	beq.n	80087c8 <__gethex+0x3f4>
 8008736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d015      	beq.n	800876a <__gethex+0x396>
 800873e:	2b03      	cmp	r3, #3
 8008740:	d017      	beq.n	8008772 <__gethex+0x39e>
 8008742:	2b01      	cmp	r3, #1
 8008744:	d109      	bne.n	800875a <__gethex+0x386>
 8008746:	f01a 0f02 	tst.w	sl, #2
 800874a:	d006      	beq.n	800875a <__gethex+0x386>
 800874c:	f8d9 0000 	ldr.w	r0, [r9]
 8008750:	ea4a 0a00 	orr.w	sl, sl, r0
 8008754:	f01a 0f01 	tst.w	sl, #1
 8008758:	d10e      	bne.n	8008778 <__gethex+0x3a4>
 800875a:	f047 0710 	orr.w	r7, r7, #16
 800875e:	e033      	b.n	80087c8 <__gethex+0x3f4>
 8008760:	f04f 0a01 	mov.w	sl, #1
 8008764:	e7d0      	b.n	8008708 <__gethex+0x334>
 8008766:	2701      	movs	r7, #1
 8008768:	e7e2      	b.n	8008730 <__gethex+0x35c>
 800876a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800876c:	f1c3 0301 	rsb	r3, r3, #1
 8008770:	9315      	str	r3, [sp, #84]	; 0x54
 8008772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0f0      	beq.n	800875a <__gethex+0x386>
 8008778:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800877c:	f104 0314 	add.w	r3, r4, #20
 8008780:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008784:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008788:	f04f 0c00 	mov.w	ip, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008792:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008796:	d01c      	beq.n	80087d2 <__gethex+0x3fe>
 8008798:	3201      	adds	r2, #1
 800879a:	6002      	str	r2, [r0, #0]
 800879c:	2f02      	cmp	r7, #2
 800879e:	f104 0314 	add.w	r3, r4, #20
 80087a2:	d13f      	bne.n	8008824 <__gethex+0x450>
 80087a4:	f8d8 2000 	ldr.w	r2, [r8]
 80087a8:	3a01      	subs	r2, #1
 80087aa:	42b2      	cmp	r2, r6
 80087ac:	d10a      	bne.n	80087c4 <__gethex+0x3f0>
 80087ae:	1171      	asrs	r1, r6, #5
 80087b0:	2201      	movs	r2, #1
 80087b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087b6:	f006 061f 	and.w	r6, r6, #31
 80087ba:	fa02 f606 	lsl.w	r6, r2, r6
 80087be:	421e      	tst	r6, r3
 80087c0:	bf18      	it	ne
 80087c2:	4617      	movne	r7, r2
 80087c4:	f047 0720 	orr.w	r7, r7, #32
 80087c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087ca:	601c      	str	r4, [r3, #0]
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	601d      	str	r5, [r3, #0]
 80087d0:	e695      	b.n	80084fe <__gethex+0x12a>
 80087d2:	4299      	cmp	r1, r3
 80087d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80087d8:	d8d8      	bhi.n	800878c <__gethex+0x3b8>
 80087da:	68a3      	ldr	r3, [r4, #8]
 80087dc:	459b      	cmp	fp, r3
 80087de:	db19      	blt.n	8008814 <__gethex+0x440>
 80087e0:	6861      	ldr	r1, [r4, #4]
 80087e2:	ee18 0a10 	vmov	r0, s16
 80087e6:	3101      	adds	r1, #1
 80087e8:	f000 f928 	bl	8008a3c <_Balloc>
 80087ec:	4681      	mov	r9, r0
 80087ee:	b918      	cbnz	r0, 80087f8 <__gethex+0x424>
 80087f0:	4b1a      	ldr	r3, [pc, #104]	; (800885c <__gethex+0x488>)
 80087f2:	4602      	mov	r2, r0
 80087f4:	2184      	movs	r1, #132	; 0x84
 80087f6:	e6a8      	b.n	800854a <__gethex+0x176>
 80087f8:	6922      	ldr	r2, [r4, #16]
 80087fa:	3202      	adds	r2, #2
 80087fc:	f104 010c 	add.w	r1, r4, #12
 8008800:	0092      	lsls	r2, r2, #2
 8008802:	300c      	adds	r0, #12
 8008804:	f000 f90c 	bl	8008a20 <memcpy>
 8008808:	4621      	mov	r1, r4
 800880a:	ee18 0a10 	vmov	r0, s16
 800880e:	f000 f955 	bl	8008abc <_Bfree>
 8008812:	464c      	mov	r4, r9
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800881c:	6122      	str	r2, [r4, #16]
 800881e:	2201      	movs	r2, #1
 8008820:	615a      	str	r2, [r3, #20]
 8008822:	e7bb      	b.n	800879c <__gethex+0x3c8>
 8008824:	6922      	ldr	r2, [r4, #16]
 8008826:	455a      	cmp	r2, fp
 8008828:	dd0b      	ble.n	8008842 <__gethex+0x46e>
 800882a:	2101      	movs	r1, #1
 800882c:	4620      	mov	r0, r4
 800882e:	f7ff fd69 	bl	8008304 <rshift>
 8008832:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008836:	3501      	adds	r5, #1
 8008838:	42ab      	cmp	r3, r5
 800883a:	f6ff aed0 	blt.w	80085de <__gethex+0x20a>
 800883e:	2701      	movs	r7, #1
 8008840:	e7c0      	b.n	80087c4 <__gethex+0x3f0>
 8008842:	f016 061f 	ands.w	r6, r6, #31
 8008846:	d0fa      	beq.n	800883e <__gethex+0x46a>
 8008848:	4453      	add	r3, sl
 800884a:	f1c6 0620 	rsb	r6, r6, #32
 800884e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008852:	f000 f9e5 	bl	8008c20 <__hi0bits>
 8008856:	42b0      	cmp	r0, r6
 8008858:	dbe7      	blt.n	800882a <__gethex+0x456>
 800885a:	e7f0      	b.n	800883e <__gethex+0x46a>
 800885c:	0800a698 	.word	0x0800a698

08008860 <L_shift>:
 8008860:	f1c2 0208 	rsb	r2, r2, #8
 8008864:	0092      	lsls	r2, r2, #2
 8008866:	b570      	push	{r4, r5, r6, lr}
 8008868:	f1c2 0620 	rsb	r6, r2, #32
 800886c:	6843      	ldr	r3, [r0, #4]
 800886e:	6804      	ldr	r4, [r0, #0]
 8008870:	fa03 f506 	lsl.w	r5, r3, r6
 8008874:	432c      	orrs	r4, r5
 8008876:	40d3      	lsrs	r3, r2
 8008878:	6004      	str	r4, [r0, #0]
 800887a:	f840 3f04 	str.w	r3, [r0, #4]!
 800887e:	4288      	cmp	r0, r1
 8008880:	d3f4      	bcc.n	800886c <L_shift+0xc>
 8008882:	bd70      	pop	{r4, r5, r6, pc}

08008884 <__match>:
 8008884:	b530      	push	{r4, r5, lr}
 8008886:	6803      	ldr	r3, [r0, #0]
 8008888:	3301      	adds	r3, #1
 800888a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800888e:	b914      	cbnz	r4, 8008896 <__match+0x12>
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	2001      	movs	r0, #1
 8008894:	bd30      	pop	{r4, r5, pc}
 8008896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800889a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800889e:	2d19      	cmp	r5, #25
 80088a0:	bf98      	it	ls
 80088a2:	3220      	addls	r2, #32
 80088a4:	42a2      	cmp	r2, r4
 80088a6:	d0f0      	beq.n	800888a <__match+0x6>
 80088a8:	2000      	movs	r0, #0
 80088aa:	e7f3      	b.n	8008894 <__match+0x10>

080088ac <__hexnan>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	680b      	ldr	r3, [r1, #0]
 80088b2:	115e      	asrs	r6, r3, #5
 80088b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088b8:	f013 031f 	ands.w	r3, r3, #31
 80088bc:	b087      	sub	sp, #28
 80088be:	bf18      	it	ne
 80088c0:	3604      	addne	r6, #4
 80088c2:	2500      	movs	r5, #0
 80088c4:	1f37      	subs	r7, r6, #4
 80088c6:	4690      	mov	r8, r2
 80088c8:	6802      	ldr	r2, [r0, #0]
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	4682      	mov	sl, r0
 80088ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80088d2:	46b9      	mov	r9, r7
 80088d4:	463c      	mov	r4, r7
 80088d6:	9502      	str	r5, [sp, #8]
 80088d8:	46ab      	mov	fp, r5
 80088da:	7851      	ldrb	r1, [r2, #1]
 80088dc:	1c53      	adds	r3, r2, #1
 80088de:	9303      	str	r3, [sp, #12]
 80088e0:	b341      	cbz	r1, 8008934 <__hexnan+0x88>
 80088e2:	4608      	mov	r0, r1
 80088e4:	9205      	str	r2, [sp, #20]
 80088e6:	9104      	str	r1, [sp, #16]
 80088e8:	f7ff fd5e 	bl	80083a8 <__hexdig_fun>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d14f      	bne.n	8008990 <__hexnan+0xe4>
 80088f0:	9904      	ldr	r1, [sp, #16]
 80088f2:	9a05      	ldr	r2, [sp, #20]
 80088f4:	2920      	cmp	r1, #32
 80088f6:	d818      	bhi.n	800892a <__hexnan+0x7e>
 80088f8:	9b02      	ldr	r3, [sp, #8]
 80088fa:	459b      	cmp	fp, r3
 80088fc:	dd13      	ble.n	8008926 <__hexnan+0x7a>
 80088fe:	454c      	cmp	r4, r9
 8008900:	d206      	bcs.n	8008910 <__hexnan+0x64>
 8008902:	2d07      	cmp	r5, #7
 8008904:	dc04      	bgt.n	8008910 <__hexnan+0x64>
 8008906:	462a      	mov	r2, r5
 8008908:	4649      	mov	r1, r9
 800890a:	4620      	mov	r0, r4
 800890c:	f7ff ffa8 	bl	8008860 <L_shift>
 8008910:	4544      	cmp	r4, r8
 8008912:	d950      	bls.n	80089b6 <__hexnan+0x10a>
 8008914:	2300      	movs	r3, #0
 8008916:	f1a4 0904 	sub.w	r9, r4, #4
 800891a:	f844 3c04 	str.w	r3, [r4, #-4]
 800891e:	f8cd b008 	str.w	fp, [sp, #8]
 8008922:	464c      	mov	r4, r9
 8008924:	461d      	mov	r5, r3
 8008926:	9a03      	ldr	r2, [sp, #12]
 8008928:	e7d7      	b.n	80088da <__hexnan+0x2e>
 800892a:	2929      	cmp	r1, #41	; 0x29
 800892c:	d156      	bne.n	80089dc <__hexnan+0x130>
 800892e:	3202      	adds	r2, #2
 8008930:	f8ca 2000 	str.w	r2, [sl]
 8008934:	f1bb 0f00 	cmp.w	fp, #0
 8008938:	d050      	beq.n	80089dc <__hexnan+0x130>
 800893a:	454c      	cmp	r4, r9
 800893c:	d206      	bcs.n	800894c <__hexnan+0xa0>
 800893e:	2d07      	cmp	r5, #7
 8008940:	dc04      	bgt.n	800894c <__hexnan+0xa0>
 8008942:	462a      	mov	r2, r5
 8008944:	4649      	mov	r1, r9
 8008946:	4620      	mov	r0, r4
 8008948:	f7ff ff8a 	bl	8008860 <L_shift>
 800894c:	4544      	cmp	r4, r8
 800894e:	d934      	bls.n	80089ba <__hexnan+0x10e>
 8008950:	f1a8 0204 	sub.w	r2, r8, #4
 8008954:	4623      	mov	r3, r4
 8008956:	f853 1b04 	ldr.w	r1, [r3], #4
 800895a:	f842 1f04 	str.w	r1, [r2, #4]!
 800895e:	429f      	cmp	r7, r3
 8008960:	d2f9      	bcs.n	8008956 <__hexnan+0xaa>
 8008962:	1b3b      	subs	r3, r7, r4
 8008964:	f023 0303 	bic.w	r3, r3, #3
 8008968:	3304      	adds	r3, #4
 800896a:	3401      	adds	r4, #1
 800896c:	3e03      	subs	r6, #3
 800896e:	42b4      	cmp	r4, r6
 8008970:	bf88      	it	hi
 8008972:	2304      	movhi	r3, #4
 8008974:	4443      	add	r3, r8
 8008976:	2200      	movs	r2, #0
 8008978:	f843 2b04 	str.w	r2, [r3], #4
 800897c:	429f      	cmp	r7, r3
 800897e:	d2fb      	bcs.n	8008978 <__hexnan+0xcc>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	b91b      	cbnz	r3, 800898c <__hexnan+0xe0>
 8008984:	4547      	cmp	r7, r8
 8008986:	d127      	bne.n	80089d8 <__hexnan+0x12c>
 8008988:	2301      	movs	r3, #1
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	2005      	movs	r0, #5
 800898e:	e026      	b.n	80089de <__hexnan+0x132>
 8008990:	3501      	adds	r5, #1
 8008992:	2d08      	cmp	r5, #8
 8008994:	f10b 0b01 	add.w	fp, fp, #1
 8008998:	dd06      	ble.n	80089a8 <__hexnan+0xfc>
 800899a:	4544      	cmp	r4, r8
 800899c:	d9c3      	bls.n	8008926 <__hexnan+0x7a>
 800899e:	2300      	movs	r3, #0
 80089a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80089a4:	2501      	movs	r5, #1
 80089a6:	3c04      	subs	r4, #4
 80089a8:	6822      	ldr	r2, [r4, #0]
 80089aa:	f000 000f 	and.w	r0, r0, #15
 80089ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80089b2:	6022      	str	r2, [r4, #0]
 80089b4:	e7b7      	b.n	8008926 <__hexnan+0x7a>
 80089b6:	2508      	movs	r5, #8
 80089b8:	e7b5      	b.n	8008926 <__hexnan+0x7a>
 80089ba:	9b01      	ldr	r3, [sp, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0df      	beq.n	8008980 <__hexnan+0xd4>
 80089c0:	f04f 32ff 	mov.w	r2, #4294967295
 80089c4:	f1c3 0320 	rsb	r3, r3, #32
 80089c8:	fa22 f303 	lsr.w	r3, r2, r3
 80089cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089d0:	401a      	ands	r2, r3
 80089d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80089d6:	e7d3      	b.n	8008980 <__hexnan+0xd4>
 80089d8:	3f04      	subs	r7, #4
 80089da:	e7d1      	b.n	8008980 <__hexnan+0xd4>
 80089dc:	2004      	movs	r0, #4
 80089de:	b007      	add	sp, #28
 80089e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089e4 <_localeconv_r>:
 80089e4:	4800      	ldr	r0, [pc, #0]	; (80089e8 <_localeconv_r+0x4>)
 80089e6:	4770      	bx	lr
 80089e8:	20000164 	.word	0x20000164

080089ec <malloc>:
 80089ec:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <malloc+0xc>)
 80089ee:	4601      	mov	r1, r0
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f000 bd63 	b.w	80094bc <_malloc_r>
 80089f6:	bf00      	nop
 80089f8:	2000000c 	.word	0x2000000c

080089fc <__ascii_mbtowc>:
 80089fc:	b082      	sub	sp, #8
 80089fe:	b901      	cbnz	r1, 8008a02 <__ascii_mbtowc+0x6>
 8008a00:	a901      	add	r1, sp, #4
 8008a02:	b142      	cbz	r2, 8008a16 <__ascii_mbtowc+0x1a>
 8008a04:	b14b      	cbz	r3, 8008a1a <__ascii_mbtowc+0x1e>
 8008a06:	7813      	ldrb	r3, [r2, #0]
 8008a08:	600b      	str	r3, [r1, #0]
 8008a0a:	7812      	ldrb	r2, [r2, #0]
 8008a0c:	1e10      	subs	r0, r2, #0
 8008a0e:	bf18      	it	ne
 8008a10:	2001      	movne	r0, #1
 8008a12:	b002      	add	sp, #8
 8008a14:	4770      	bx	lr
 8008a16:	4610      	mov	r0, r2
 8008a18:	e7fb      	b.n	8008a12 <__ascii_mbtowc+0x16>
 8008a1a:	f06f 0001 	mvn.w	r0, #1
 8008a1e:	e7f8      	b.n	8008a12 <__ascii_mbtowc+0x16>

08008a20 <memcpy>:
 8008a20:	440a      	add	r2, r1
 8008a22:	4291      	cmp	r1, r2
 8008a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a28:	d100      	bne.n	8008a2c <memcpy+0xc>
 8008a2a:	4770      	bx	lr
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a36:	4291      	cmp	r1, r2
 8008a38:	d1f9      	bne.n	8008a2e <memcpy+0xe>
 8008a3a:	bd10      	pop	{r4, pc}

08008a3c <_Balloc>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a40:	4604      	mov	r4, r0
 8008a42:	460d      	mov	r5, r1
 8008a44:	b976      	cbnz	r6, 8008a64 <_Balloc+0x28>
 8008a46:	2010      	movs	r0, #16
 8008a48:	f7ff ffd0 	bl	80089ec <malloc>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	6260      	str	r0, [r4, #36]	; 0x24
 8008a50:	b920      	cbnz	r0, 8008a5c <_Balloc+0x20>
 8008a52:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <_Balloc+0x78>)
 8008a54:	4818      	ldr	r0, [pc, #96]	; (8008ab8 <_Balloc+0x7c>)
 8008a56:	2166      	movs	r1, #102	; 0x66
 8008a58:	f000 ff3c 	bl	80098d4 <__assert_func>
 8008a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a60:	6006      	str	r6, [r0, #0]
 8008a62:	60c6      	str	r6, [r0, #12]
 8008a64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a66:	68f3      	ldr	r3, [r6, #12]
 8008a68:	b183      	cbz	r3, 8008a8c <_Balloc+0x50>
 8008a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a72:	b9b8      	cbnz	r0, 8008aa4 <_Balloc+0x68>
 8008a74:	2101      	movs	r1, #1
 8008a76:	fa01 f605 	lsl.w	r6, r1, r5
 8008a7a:	1d72      	adds	r2, r6, #5
 8008a7c:	0092      	lsls	r2, r2, #2
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 fc9a 	bl	80093b8 <_calloc_r>
 8008a84:	b160      	cbz	r0, 8008aa0 <_Balloc+0x64>
 8008a86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a8a:	e00e      	b.n	8008aaa <_Balloc+0x6e>
 8008a8c:	2221      	movs	r2, #33	; 0x21
 8008a8e:	2104      	movs	r1, #4
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fc91 	bl	80093b8 <_calloc_r>
 8008a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a98:	60f0      	str	r0, [r6, #12]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e4      	bne.n	8008a6a <_Balloc+0x2e>
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	6802      	ldr	r2, [r0, #0]
 8008aa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ab0:	e7f7      	b.n	8008aa2 <_Balloc+0x66>
 8008ab2:	bf00      	nop
 8008ab4:	0800a626 	.word	0x0800a626
 8008ab8:	0800a724 	.word	0x0800a724

08008abc <_Bfree>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	b976      	cbnz	r6, 8008ae4 <_Bfree+0x28>
 8008ac6:	2010      	movs	r0, #16
 8008ac8:	f7ff ff90 	bl	80089ec <malloc>
 8008acc:	4602      	mov	r2, r0
 8008ace:	6268      	str	r0, [r5, #36]	; 0x24
 8008ad0:	b920      	cbnz	r0, 8008adc <_Bfree+0x20>
 8008ad2:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <_Bfree+0x3c>)
 8008ad4:	4809      	ldr	r0, [pc, #36]	; (8008afc <_Bfree+0x40>)
 8008ad6:	218a      	movs	r1, #138	; 0x8a
 8008ad8:	f000 fefc 	bl	80098d4 <__assert_func>
 8008adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ae0:	6006      	str	r6, [r0, #0]
 8008ae2:	60c6      	str	r6, [r0, #12]
 8008ae4:	b13c      	cbz	r4, 8008af6 <_Bfree+0x3a>
 8008ae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ae8:	6862      	ldr	r2, [r4, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008af0:	6021      	str	r1, [r4, #0]
 8008af2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	0800a626 	.word	0x0800a626
 8008afc:	0800a724 	.word	0x0800a724

08008b00 <__multadd>:
 8008b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b04:	690d      	ldr	r5, [r1, #16]
 8008b06:	4607      	mov	r7, r0
 8008b08:	460c      	mov	r4, r1
 8008b0a:	461e      	mov	r6, r3
 8008b0c:	f101 0c14 	add.w	ip, r1, #20
 8008b10:	2000      	movs	r0, #0
 8008b12:	f8dc 3000 	ldr.w	r3, [ip]
 8008b16:	b299      	uxth	r1, r3
 8008b18:	fb02 6101 	mla	r1, r2, r1, r6
 8008b1c:	0c1e      	lsrs	r6, r3, #16
 8008b1e:	0c0b      	lsrs	r3, r1, #16
 8008b20:	fb02 3306 	mla	r3, r2, r6, r3
 8008b24:	b289      	uxth	r1, r1
 8008b26:	3001      	adds	r0, #1
 8008b28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b2c:	4285      	cmp	r5, r0
 8008b2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008b32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b36:	dcec      	bgt.n	8008b12 <__multadd+0x12>
 8008b38:	b30e      	cbz	r6, 8008b7e <__multadd+0x7e>
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	42ab      	cmp	r3, r5
 8008b3e:	dc19      	bgt.n	8008b74 <__multadd+0x74>
 8008b40:	6861      	ldr	r1, [r4, #4]
 8008b42:	4638      	mov	r0, r7
 8008b44:	3101      	adds	r1, #1
 8008b46:	f7ff ff79 	bl	8008a3c <_Balloc>
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	b928      	cbnz	r0, 8008b5a <__multadd+0x5a>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <__multadd+0x84>)
 8008b52:	480d      	ldr	r0, [pc, #52]	; (8008b88 <__multadd+0x88>)
 8008b54:	21b5      	movs	r1, #181	; 0xb5
 8008b56:	f000 febd 	bl	80098d4 <__assert_func>
 8008b5a:	6922      	ldr	r2, [r4, #16]
 8008b5c:	3202      	adds	r2, #2
 8008b5e:	f104 010c 	add.w	r1, r4, #12
 8008b62:	0092      	lsls	r2, r2, #2
 8008b64:	300c      	adds	r0, #12
 8008b66:	f7ff ff5b 	bl	8008a20 <memcpy>
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7ff ffa5 	bl	8008abc <_Bfree>
 8008b72:	4644      	mov	r4, r8
 8008b74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b78:	3501      	adds	r5, #1
 8008b7a:	615e      	str	r6, [r3, #20]
 8008b7c:	6125      	str	r5, [r4, #16]
 8008b7e:	4620      	mov	r0, r4
 8008b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b84:	0800a698 	.word	0x0800a698
 8008b88:	0800a724 	.word	0x0800a724

08008b8c <__s2b>:
 8008b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b90:	460c      	mov	r4, r1
 8008b92:	4615      	mov	r5, r2
 8008b94:	461f      	mov	r7, r3
 8008b96:	2209      	movs	r2, #9
 8008b98:	3308      	adds	r3, #8
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	db09      	blt.n	8008bbc <__s2b+0x30>
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff ff47 	bl	8008a3c <_Balloc>
 8008bae:	b940      	cbnz	r0, 8008bc2 <__s2b+0x36>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	4b19      	ldr	r3, [pc, #100]	; (8008c18 <__s2b+0x8c>)
 8008bb4:	4819      	ldr	r0, [pc, #100]	; (8008c1c <__s2b+0x90>)
 8008bb6:	21ce      	movs	r1, #206	; 0xce
 8008bb8:	f000 fe8c 	bl	80098d4 <__assert_func>
 8008bbc:	0052      	lsls	r2, r2, #1
 8008bbe:	3101      	adds	r1, #1
 8008bc0:	e7f0      	b.n	8008ba4 <__s2b+0x18>
 8008bc2:	9b08      	ldr	r3, [sp, #32]
 8008bc4:	6143      	str	r3, [r0, #20]
 8008bc6:	2d09      	cmp	r5, #9
 8008bc8:	f04f 0301 	mov.w	r3, #1
 8008bcc:	6103      	str	r3, [r0, #16]
 8008bce:	dd16      	ble.n	8008bfe <__s2b+0x72>
 8008bd0:	f104 0909 	add.w	r9, r4, #9
 8008bd4:	46c8      	mov	r8, r9
 8008bd6:	442c      	add	r4, r5
 8008bd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008bdc:	4601      	mov	r1, r0
 8008bde:	3b30      	subs	r3, #48	; 0x30
 8008be0:	220a      	movs	r2, #10
 8008be2:	4630      	mov	r0, r6
 8008be4:	f7ff ff8c 	bl	8008b00 <__multadd>
 8008be8:	45a0      	cmp	r8, r4
 8008bea:	d1f5      	bne.n	8008bd8 <__s2b+0x4c>
 8008bec:	f1a5 0408 	sub.w	r4, r5, #8
 8008bf0:	444c      	add	r4, r9
 8008bf2:	1b2d      	subs	r5, r5, r4
 8008bf4:	1963      	adds	r3, r4, r5
 8008bf6:	42bb      	cmp	r3, r7
 8008bf8:	db04      	blt.n	8008c04 <__s2b+0x78>
 8008bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	340a      	adds	r4, #10
 8008c00:	2509      	movs	r5, #9
 8008c02:	e7f6      	b.n	8008bf2 <__s2b+0x66>
 8008c04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c08:	4601      	mov	r1, r0
 8008c0a:	3b30      	subs	r3, #48	; 0x30
 8008c0c:	220a      	movs	r2, #10
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7ff ff76 	bl	8008b00 <__multadd>
 8008c14:	e7ee      	b.n	8008bf4 <__s2b+0x68>
 8008c16:	bf00      	nop
 8008c18:	0800a698 	.word	0x0800a698
 8008c1c:	0800a724 	.word	0x0800a724

08008c20 <__hi0bits>:
 8008c20:	0c03      	lsrs	r3, r0, #16
 8008c22:	041b      	lsls	r3, r3, #16
 8008c24:	b9d3      	cbnz	r3, 8008c5c <__hi0bits+0x3c>
 8008c26:	0400      	lsls	r0, r0, #16
 8008c28:	2310      	movs	r3, #16
 8008c2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c2e:	bf04      	itt	eq
 8008c30:	0200      	lsleq	r0, r0, #8
 8008c32:	3308      	addeq	r3, #8
 8008c34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c38:	bf04      	itt	eq
 8008c3a:	0100      	lsleq	r0, r0, #4
 8008c3c:	3304      	addeq	r3, #4
 8008c3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c42:	bf04      	itt	eq
 8008c44:	0080      	lsleq	r0, r0, #2
 8008c46:	3302      	addeq	r3, #2
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	db05      	blt.n	8008c58 <__hi0bits+0x38>
 8008c4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c50:	f103 0301 	add.w	r3, r3, #1
 8008c54:	bf08      	it	eq
 8008c56:	2320      	moveq	r3, #32
 8008c58:	4618      	mov	r0, r3
 8008c5a:	4770      	bx	lr
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e7e4      	b.n	8008c2a <__hi0bits+0xa>

08008c60 <__lo0bits>:
 8008c60:	6803      	ldr	r3, [r0, #0]
 8008c62:	f013 0207 	ands.w	r2, r3, #7
 8008c66:	4601      	mov	r1, r0
 8008c68:	d00b      	beq.n	8008c82 <__lo0bits+0x22>
 8008c6a:	07da      	lsls	r2, r3, #31
 8008c6c:	d423      	bmi.n	8008cb6 <__lo0bits+0x56>
 8008c6e:	0798      	lsls	r0, r3, #30
 8008c70:	bf49      	itett	mi
 8008c72:	085b      	lsrmi	r3, r3, #1
 8008c74:	089b      	lsrpl	r3, r3, #2
 8008c76:	2001      	movmi	r0, #1
 8008c78:	600b      	strmi	r3, [r1, #0]
 8008c7a:	bf5c      	itt	pl
 8008c7c:	600b      	strpl	r3, [r1, #0]
 8008c7e:	2002      	movpl	r0, #2
 8008c80:	4770      	bx	lr
 8008c82:	b298      	uxth	r0, r3
 8008c84:	b9a8      	cbnz	r0, 8008cb2 <__lo0bits+0x52>
 8008c86:	0c1b      	lsrs	r3, r3, #16
 8008c88:	2010      	movs	r0, #16
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	b90a      	cbnz	r2, 8008c92 <__lo0bits+0x32>
 8008c8e:	3008      	adds	r0, #8
 8008c90:	0a1b      	lsrs	r3, r3, #8
 8008c92:	071a      	lsls	r2, r3, #28
 8008c94:	bf04      	itt	eq
 8008c96:	091b      	lsreq	r3, r3, #4
 8008c98:	3004      	addeq	r0, #4
 8008c9a:	079a      	lsls	r2, r3, #30
 8008c9c:	bf04      	itt	eq
 8008c9e:	089b      	lsreq	r3, r3, #2
 8008ca0:	3002      	addeq	r0, #2
 8008ca2:	07da      	lsls	r2, r3, #31
 8008ca4:	d403      	bmi.n	8008cae <__lo0bits+0x4e>
 8008ca6:	085b      	lsrs	r3, r3, #1
 8008ca8:	f100 0001 	add.w	r0, r0, #1
 8008cac:	d005      	beq.n	8008cba <__lo0bits+0x5a>
 8008cae:	600b      	str	r3, [r1, #0]
 8008cb0:	4770      	bx	lr
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	e7e9      	b.n	8008c8a <__lo0bits+0x2a>
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	4770      	bx	lr
 8008cba:	2020      	movs	r0, #32
 8008cbc:	4770      	bx	lr
	...

08008cc0 <__i2b>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	f7ff feb9 	bl	8008a3c <_Balloc>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	b928      	cbnz	r0, 8008cda <__i2b+0x1a>
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <__i2b+0x24>)
 8008cd0:	4805      	ldr	r0, [pc, #20]	; (8008ce8 <__i2b+0x28>)
 8008cd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cd6:	f000 fdfd 	bl	80098d4 <__assert_func>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	6144      	str	r4, [r0, #20]
 8008cde:	6103      	str	r3, [r0, #16]
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop
 8008ce4:	0800a698 	.word	0x0800a698
 8008ce8:	0800a724 	.word	0x0800a724

08008cec <__multiply>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	4691      	mov	r9, r2
 8008cf2:	690a      	ldr	r2, [r1, #16]
 8008cf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	bfb8      	it	lt
 8008cfc:	460b      	movlt	r3, r1
 8008cfe:	460c      	mov	r4, r1
 8008d00:	bfbc      	itt	lt
 8008d02:	464c      	movlt	r4, r9
 8008d04:	4699      	movlt	r9, r3
 8008d06:	6927      	ldr	r7, [r4, #16]
 8008d08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d0c:	68a3      	ldr	r3, [r4, #8]
 8008d0e:	6861      	ldr	r1, [r4, #4]
 8008d10:	eb07 060a 	add.w	r6, r7, sl
 8008d14:	42b3      	cmp	r3, r6
 8008d16:	b085      	sub	sp, #20
 8008d18:	bfb8      	it	lt
 8008d1a:	3101      	addlt	r1, #1
 8008d1c:	f7ff fe8e 	bl	8008a3c <_Balloc>
 8008d20:	b930      	cbnz	r0, 8008d30 <__multiply+0x44>
 8008d22:	4602      	mov	r2, r0
 8008d24:	4b44      	ldr	r3, [pc, #272]	; (8008e38 <__multiply+0x14c>)
 8008d26:	4845      	ldr	r0, [pc, #276]	; (8008e3c <__multiply+0x150>)
 8008d28:	f240 115d 	movw	r1, #349	; 0x15d
 8008d2c:	f000 fdd2 	bl	80098d4 <__assert_func>
 8008d30:	f100 0514 	add.w	r5, r0, #20
 8008d34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d38:	462b      	mov	r3, r5
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4543      	cmp	r3, r8
 8008d3e:	d321      	bcc.n	8008d84 <__multiply+0x98>
 8008d40:	f104 0314 	add.w	r3, r4, #20
 8008d44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d48:	f109 0314 	add.w	r3, r9, #20
 8008d4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d50:	9202      	str	r2, [sp, #8]
 8008d52:	1b3a      	subs	r2, r7, r4
 8008d54:	3a15      	subs	r2, #21
 8008d56:	f022 0203 	bic.w	r2, r2, #3
 8008d5a:	3204      	adds	r2, #4
 8008d5c:	f104 0115 	add.w	r1, r4, #21
 8008d60:	428f      	cmp	r7, r1
 8008d62:	bf38      	it	cc
 8008d64:	2204      	movcc	r2, #4
 8008d66:	9201      	str	r2, [sp, #4]
 8008d68:	9a02      	ldr	r2, [sp, #8]
 8008d6a:	9303      	str	r3, [sp, #12]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d80c      	bhi.n	8008d8a <__multiply+0x9e>
 8008d70:	2e00      	cmp	r6, #0
 8008d72:	dd03      	ble.n	8008d7c <__multiply+0x90>
 8008d74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d05a      	beq.n	8008e32 <__multiply+0x146>
 8008d7c:	6106      	str	r6, [r0, #16]
 8008d7e:	b005      	add	sp, #20
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	f843 2b04 	str.w	r2, [r3], #4
 8008d88:	e7d8      	b.n	8008d3c <__multiply+0x50>
 8008d8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d8e:	f1ba 0f00 	cmp.w	sl, #0
 8008d92:	d024      	beq.n	8008dde <__multiply+0xf2>
 8008d94:	f104 0e14 	add.w	lr, r4, #20
 8008d98:	46a9      	mov	r9, r5
 8008d9a:	f04f 0c00 	mov.w	ip, #0
 8008d9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008da2:	f8d9 1000 	ldr.w	r1, [r9]
 8008da6:	fa1f fb82 	uxth.w	fp, r2
 8008daa:	b289      	uxth	r1, r1
 8008dac:	fb0a 110b 	mla	r1, sl, fp, r1
 8008db0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008db4:	f8d9 2000 	ldr.w	r2, [r9]
 8008db8:	4461      	add	r1, ip
 8008dba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008dc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008dc6:	b289      	uxth	r1, r1
 8008dc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dcc:	4577      	cmp	r7, lr
 8008dce:	f849 1b04 	str.w	r1, [r9], #4
 8008dd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dd6:	d8e2      	bhi.n	8008d9e <__multiply+0xb2>
 8008dd8:	9a01      	ldr	r2, [sp, #4]
 8008dda:	f845 c002 	str.w	ip, [r5, r2]
 8008dde:	9a03      	ldr	r2, [sp, #12]
 8008de0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008de4:	3304      	adds	r3, #4
 8008de6:	f1b9 0f00 	cmp.w	r9, #0
 8008dea:	d020      	beq.n	8008e2e <__multiply+0x142>
 8008dec:	6829      	ldr	r1, [r5, #0]
 8008dee:	f104 0c14 	add.w	ip, r4, #20
 8008df2:	46ae      	mov	lr, r5
 8008df4:	f04f 0a00 	mov.w	sl, #0
 8008df8:	f8bc b000 	ldrh.w	fp, [ip]
 8008dfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e00:	fb09 220b 	mla	r2, r9, fp, r2
 8008e04:	4492      	add	sl, r2
 8008e06:	b289      	uxth	r1, r1
 8008e08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e0c:	f84e 1b04 	str.w	r1, [lr], #4
 8008e10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e14:	f8be 1000 	ldrh.w	r1, [lr]
 8008e18:	0c12      	lsrs	r2, r2, #16
 8008e1a:	fb09 1102 	mla	r1, r9, r2, r1
 8008e1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008e22:	4567      	cmp	r7, ip
 8008e24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e28:	d8e6      	bhi.n	8008df8 <__multiply+0x10c>
 8008e2a:	9a01      	ldr	r2, [sp, #4]
 8008e2c:	50a9      	str	r1, [r5, r2]
 8008e2e:	3504      	adds	r5, #4
 8008e30:	e79a      	b.n	8008d68 <__multiply+0x7c>
 8008e32:	3e01      	subs	r6, #1
 8008e34:	e79c      	b.n	8008d70 <__multiply+0x84>
 8008e36:	bf00      	nop
 8008e38:	0800a698 	.word	0x0800a698
 8008e3c:	0800a724 	.word	0x0800a724

08008e40 <__pow5mult>:
 8008e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e44:	4615      	mov	r5, r2
 8008e46:	f012 0203 	ands.w	r2, r2, #3
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	d007      	beq.n	8008e60 <__pow5mult+0x20>
 8008e50:	4c25      	ldr	r4, [pc, #148]	; (8008ee8 <__pow5mult+0xa8>)
 8008e52:	3a01      	subs	r2, #1
 8008e54:	2300      	movs	r3, #0
 8008e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e5a:	f7ff fe51 	bl	8008b00 <__multadd>
 8008e5e:	4607      	mov	r7, r0
 8008e60:	10ad      	asrs	r5, r5, #2
 8008e62:	d03d      	beq.n	8008ee0 <__pow5mult+0xa0>
 8008e64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e66:	b97c      	cbnz	r4, 8008e88 <__pow5mult+0x48>
 8008e68:	2010      	movs	r0, #16
 8008e6a:	f7ff fdbf 	bl	80089ec <malloc>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	6270      	str	r0, [r6, #36]	; 0x24
 8008e72:	b928      	cbnz	r0, 8008e80 <__pow5mult+0x40>
 8008e74:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <__pow5mult+0xac>)
 8008e76:	481e      	ldr	r0, [pc, #120]	; (8008ef0 <__pow5mult+0xb0>)
 8008e78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e7c:	f000 fd2a 	bl	80098d4 <__assert_func>
 8008e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e84:	6004      	str	r4, [r0, #0]
 8008e86:	60c4      	str	r4, [r0, #12]
 8008e88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e90:	b94c      	cbnz	r4, 8008ea6 <__pow5mult+0x66>
 8008e92:	f240 2171 	movw	r1, #625	; 0x271
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7ff ff12 	bl	8008cc0 <__i2b>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	6003      	str	r3, [r0, #0]
 8008ea6:	f04f 0900 	mov.w	r9, #0
 8008eaa:	07eb      	lsls	r3, r5, #31
 8008eac:	d50a      	bpl.n	8008ec4 <__pow5mult+0x84>
 8008eae:	4639      	mov	r1, r7
 8008eb0:	4622      	mov	r2, r4
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff ff1a 	bl	8008cec <__multiply>
 8008eb8:	4639      	mov	r1, r7
 8008eba:	4680      	mov	r8, r0
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f7ff fdfd 	bl	8008abc <_Bfree>
 8008ec2:	4647      	mov	r7, r8
 8008ec4:	106d      	asrs	r5, r5, #1
 8008ec6:	d00b      	beq.n	8008ee0 <__pow5mult+0xa0>
 8008ec8:	6820      	ldr	r0, [r4, #0]
 8008eca:	b938      	cbnz	r0, 8008edc <__pow5mult+0x9c>
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f7ff ff0b 	bl	8008cec <__multiply>
 8008ed6:	6020      	str	r0, [r4, #0]
 8008ed8:	f8c0 9000 	str.w	r9, [r0]
 8008edc:	4604      	mov	r4, r0
 8008ede:	e7e4      	b.n	8008eaa <__pow5mult+0x6a>
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee6:	bf00      	nop
 8008ee8:	0800a870 	.word	0x0800a870
 8008eec:	0800a626 	.word	0x0800a626
 8008ef0:	0800a724 	.word	0x0800a724

08008ef4 <__lshift>:
 8008ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	460c      	mov	r4, r1
 8008efa:	6849      	ldr	r1, [r1, #4]
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	4607      	mov	r7, r0
 8008f06:	4691      	mov	r9, r2
 8008f08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f0c:	f108 0601 	add.w	r6, r8, #1
 8008f10:	42b3      	cmp	r3, r6
 8008f12:	db0b      	blt.n	8008f2c <__lshift+0x38>
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff fd91 	bl	8008a3c <_Balloc>
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	b948      	cbnz	r0, 8008f32 <__lshift+0x3e>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b2a      	ldr	r3, [pc, #168]	; (8008fcc <__lshift+0xd8>)
 8008f22:	482b      	ldr	r0, [pc, #172]	; (8008fd0 <__lshift+0xdc>)
 8008f24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f28:	f000 fcd4 	bl	80098d4 <__assert_func>
 8008f2c:	3101      	adds	r1, #1
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	e7ee      	b.n	8008f10 <__lshift+0x1c>
 8008f32:	2300      	movs	r3, #0
 8008f34:	f100 0114 	add.w	r1, r0, #20
 8008f38:	f100 0210 	add.w	r2, r0, #16
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	4553      	cmp	r3, sl
 8008f40:	db37      	blt.n	8008fb2 <__lshift+0xbe>
 8008f42:	6920      	ldr	r0, [r4, #16]
 8008f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f48:	f104 0314 	add.w	r3, r4, #20
 8008f4c:	f019 091f 	ands.w	r9, r9, #31
 8008f50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f58:	d02f      	beq.n	8008fba <__lshift+0xc6>
 8008f5a:	f1c9 0e20 	rsb	lr, r9, #32
 8008f5e:	468a      	mov	sl, r1
 8008f60:	f04f 0c00 	mov.w	ip, #0
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	fa02 f209 	lsl.w	r2, r2, r9
 8008f6a:	ea42 020c 	orr.w	r2, r2, ip
 8008f6e:	f84a 2b04 	str.w	r2, [sl], #4
 8008f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f76:	4298      	cmp	r0, r3
 8008f78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f7c:	d8f2      	bhi.n	8008f64 <__lshift+0x70>
 8008f7e:	1b03      	subs	r3, r0, r4
 8008f80:	3b15      	subs	r3, #21
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	3304      	adds	r3, #4
 8008f88:	f104 0215 	add.w	r2, r4, #21
 8008f8c:	4290      	cmp	r0, r2
 8008f8e:	bf38      	it	cc
 8008f90:	2304      	movcc	r3, #4
 8008f92:	f841 c003 	str.w	ip, [r1, r3]
 8008f96:	f1bc 0f00 	cmp.w	ip, #0
 8008f9a:	d001      	beq.n	8008fa0 <__lshift+0xac>
 8008f9c:	f108 0602 	add.w	r6, r8, #2
 8008fa0:	3e01      	subs	r6, #1
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	612e      	str	r6, [r5, #16]
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	f7ff fd88 	bl	8008abc <_Bfree>
 8008fac:	4628      	mov	r0, r5
 8008fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	e7c1      	b.n	8008f3e <__lshift+0x4a>
 8008fba:	3904      	subs	r1, #4
 8008fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fc4:	4298      	cmp	r0, r3
 8008fc6:	d8f9      	bhi.n	8008fbc <__lshift+0xc8>
 8008fc8:	e7ea      	b.n	8008fa0 <__lshift+0xac>
 8008fca:	bf00      	nop
 8008fcc:	0800a698 	.word	0x0800a698
 8008fd0:	0800a724 	.word	0x0800a724

08008fd4 <__mcmp>:
 8008fd4:	b530      	push	{r4, r5, lr}
 8008fd6:	6902      	ldr	r2, [r0, #16]
 8008fd8:	690c      	ldr	r4, [r1, #16]
 8008fda:	1b12      	subs	r2, r2, r4
 8008fdc:	d10e      	bne.n	8008ffc <__mcmp+0x28>
 8008fde:	f100 0314 	add.w	r3, r0, #20
 8008fe2:	3114      	adds	r1, #20
 8008fe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008fe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008fec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ff0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ff4:	42a5      	cmp	r5, r4
 8008ff6:	d003      	beq.n	8009000 <__mcmp+0x2c>
 8008ff8:	d305      	bcc.n	8009006 <__mcmp+0x32>
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	bd30      	pop	{r4, r5, pc}
 8009000:	4283      	cmp	r3, r0
 8009002:	d3f3      	bcc.n	8008fec <__mcmp+0x18>
 8009004:	e7fa      	b.n	8008ffc <__mcmp+0x28>
 8009006:	f04f 32ff 	mov.w	r2, #4294967295
 800900a:	e7f7      	b.n	8008ffc <__mcmp+0x28>

0800900c <__mdiff>:
 800900c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	460c      	mov	r4, r1
 8009012:	4606      	mov	r6, r0
 8009014:	4611      	mov	r1, r2
 8009016:	4620      	mov	r0, r4
 8009018:	4690      	mov	r8, r2
 800901a:	f7ff ffdb 	bl	8008fd4 <__mcmp>
 800901e:	1e05      	subs	r5, r0, #0
 8009020:	d110      	bne.n	8009044 <__mdiff+0x38>
 8009022:	4629      	mov	r1, r5
 8009024:	4630      	mov	r0, r6
 8009026:	f7ff fd09 	bl	8008a3c <_Balloc>
 800902a:	b930      	cbnz	r0, 800903a <__mdiff+0x2e>
 800902c:	4b3a      	ldr	r3, [pc, #232]	; (8009118 <__mdiff+0x10c>)
 800902e:	4602      	mov	r2, r0
 8009030:	f240 2132 	movw	r1, #562	; 0x232
 8009034:	4839      	ldr	r0, [pc, #228]	; (800911c <__mdiff+0x110>)
 8009036:	f000 fc4d 	bl	80098d4 <__assert_func>
 800903a:	2301      	movs	r3, #1
 800903c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009044:	bfa4      	itt	ge
 8009046:	4643      	movge	r3, r8
 8009048:	46a0      	movge	r8, r4
 800904a:	4630      	mov	r0, r6
 800904c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009050:	bfa6      	itte	ge
 8009052:	461c      	movge	r4, r3
 8009054:	2500      	movge	r5, #0
 8009056:	2501      	movlt	r5, #1
 8009058:	f7ff fcf0 	bl	8008a3c <_Balloc>
 800905c:	b920      	cbnz	r0, 8009068 <__mdiff+0x5c>
 800905e:	4b2e      	ldr	r3, [pc, #184]	; (8009118 <__mdiff+0x10c>)
 8009060:	4602      	mov	r2, r0
 8009062:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009066:	e7e5      	b.n	8009034 <__mdiff+0x28>
 8009068:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800906c:	6926      	ldr	r6, [r4, #16]
 800906e:	60c5      	str	r5, [r0, #12]
 8009070:	f104 0914 	add.w	r9, r4, #20
 8009074:	f108 0514 	add.w	r5, r8, #20
 8009078:	f100 0e14 	add.w	lr, r0, #20
 800907c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009084:	f108 0210 	add.w	r2, r8, #16
 8009088:	46f2      	mov	sl, lr
 800908a:	2100      	movs	r1, #0
 800908c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009090:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009094:	fa1f f883 	uxth.w	r8, r3
 8009098:	fa11 f18b 	uxtah	r1, r1, fp
 800909c:	0c1b      	lsrs	r3, r3, #16
 800909e:	eba1 0808 	sub.w	r8, r1, r8
 80090a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090aa:	fa1f f888 	uxth.w	r8, r8
 80090ae:	1419      	asrs	r1, r3, #16
 80090b0:	454e      	cmp	r6, r9
 80090b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090b6:	f84a 3b04 	str.w	r3, [sl], #4
 80090ba:	d8e7      	bhi.n	800908c <__mdiff+0x80>
 80090bc:	1b33      	subs	r3, r6, r4
 80090be:	3b15      	subs	r3, #21
 80090c0:	f023 0303 	bic.w	r3, r3, #3
 80090c4:	3304      	adds	r3, #4
 80090c6:	3415      	adds	r4, #21
 80090c8:	42a6      	cmp	r6, r4
 80090ca:	bf38      	it	cc
 80090cc:	2304      	movcc	r3, #4
 80090ce:	441d      	add	r5, r3
 80090d0:	4473      	add	r3, lr
 80090d2:	469e      	mov	lr, r3
 80090d4:	462e      	mov	r6, r5
 80090d6:	4566      	cmp	r6, ip
 80090d8:	d30e      	bcc.n	80090f8 <__mdiff+0xec>
 80090da:	f10c 0203 	add.w	r2, ip, #3
 80090de:	1b52      	subs	r2, r2, r5
 80090e0:	f022 0203 	bic.w	r2, r2, #3
 80090e4:	3d03      	subs	r5, #3
 80090e6:	45ac      	cmp	ip, r5
 80090e8:	bf38      	it	cc
 80090ea:	2200      	movcc	r2, #0
 80090ec:	441a      	add	r2, r3
 80090ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80090f2:	b17b      	cbz	r3, 8009114 <__mdiff+0x108>
 80090f4:	6107      	str	r7, [r0, #16]
 80090f6:	e7a3      	b.n	8009040 <__mdiff+0x34>
 80090f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80090fc:	fa11 f288 	uxtah	r2, r1, r8
 8009100:	1414      	asrs	r4, r2, #16
 8009102:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009106:	b292      	uxth	r2, r2
 8009108:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800910c:	f84e 2b04 	str.w	r2, [lr], #4
 8009110:	1421      	asrs	r1, r4, #16
 8009112:	e7e0      	b.n	80090d6 <__mdiff+0xca>
 8009114:	3f01      	subs	r7, #1
 8009116:	e7ea      	b.n	80090ee <__mdiff+0xe2>
 8009118:	0800a698 	.word	0x0800a698
 800911c:	0800a724 	.word	0x0800a724

08009120 <__ulp>:
 8009120:	b082      	sub	sp, #8
 8009122:	ed8d 0b00 	vstr	d0, [sp]
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	4912      	ldr	r1, [pc, #72]	; (8009174 <__ulp+0x54>)
 800912a:	4019      	ands	r1, r3
 800912c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009130:	2900      	cmp	r1, #0
 8009132:	dd05      	ble.n	8009140 <__ulp+0x20>
 8009134:	2200      	movs	r2, #0
 8009136:	460b      	mov	r3, r1
 8009138:	ec43 2b10 	vmov	d0, r2, r3
 800913c:	b002      	add	sp, #8
 800913e:	4770      	bx	lr
 8009140:	4249      	negs	r1, r1
 8009142:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009146:	ea4f 5021 	mov.w	r0, r1, asr #20
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	da04      	bge.n	800915e <__ulp+0x3e>
 8009154:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009158:	fa41 f300 	asr.w	r3, r1, r0
 800915c:	e7ec      	b.n	8009138 <__ulp+0x18>
 800915e:	f1a0 0114 	sub.w	r1, r0, #20
 8009162:	291e      	cmp	r1, #30
 8009164:	bfda      	itte	le
 8009166:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800916a:	fa20 f101 	lsrle.w	r1, r0, r1
 800916e:	2101      	movgt	r1, #1
 8009170:	460a      	mov	r2, r1
 8009172:	e7e1      	b.n	8009138 <__ulp+0x18>
 8009174:	7ff00000 	.word	0x7ff00000

08009178 <__b2d>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	6905      	ldr	r5, [r0, #16]
 800917c:	f100 0714 	add.w	r7, r0, #20
 8009180:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009184:	1f2e      	subs	r6, r5, #4
 8009186:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff fd48 	bl	8008c20 <__hi0bits>
 8009190:	f1c0 0320 	rsb	r3, r0, #32
 8009194:	280a      	cmp	r0, #10
 8009196:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009214 <__b2d+0x9c>
 800919a:	600b      	str	r3, [r1, #0]
 800919c:	dc14      	bgt.n	80091c8 <__b2d+0x50>
 800919e:	f1c0 0e0b 	rsb	lr, r0, #11
 80091a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80091a6:	42b7      	cmp	r7, r6
 80091a8:	ea41 030c 	orr.w	r3, r1, ip
 80091ac:	bf34      	ite	cc
 80091ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091b2:	2100      	movcs	r1, #0
 80091b4:	3015      	adds	r0, #21
 80091b6:	fa04 f000 	lsl.w	r0, r4, r0
 80091ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80091be:	ea40 0201 	orr.w	r2, r0, r1
 80091c2:	ec43 2b10 	vmov	d0, r2, r3
 80091c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c8:	42b7      	cmp	r7, r6
 80091ca:	bf3a      	itte	cc
 80091cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80091d4:	2100      	movcs	r1, #0
 80091d6:	380b      	subs	r0, #11
 80091d8:	d017      	beq.n	800920a <__b2d+0x92>
 80091da:	f1c0 0c20 	rsb	ip, r0, #32
 80091de:	fa04 f500 	lsl.w	r5, r4, r0
 80091e2:	42be      	cmp	r6, r7
 80091e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80091e8:	ea45 0504 	orr.w	r5, r5, r4
 80091ec:	bf8c      	ite	hi
 80091ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80091f2:	2400      	movls	r4, #0
 80091f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80091f8:	fa01 f000 	lsl.w	r0, r1, r0
 80091fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8009200:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009204:	ea40 0204 	orr.w	r2, r0, r4
 8009208:	e7db      	b.n	80091c2 <__b2d+0x4a>
 800920a:	ea44 030c 	orr.w	r3, r4, ip
 800920e:	460a      	mov	r2, r1
 8009210:	e7d7      	b.n	80091c2 <__b2d+0x4a>
 8009212:	bf00      	nop
 8009214:	3ff00000 	.word	0x3ff00000

08009218 <__d2b>:
 8009218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800921c:	4689      	mov	r9, r1
 800921e:	2101      	movs	r1, #1
 8009220:	ec57 6b10 	vmov	r6, r7, d0
 8009224:	4690      	mov	r8, r2
 8009226:	f7ff fc09 	bl	8008a3c <_Balloc>
 800922a:	4604      	mov	r4, r0
 800922c:	b930      	cbnz	r0, 800923c <__d2b+0x24>
 800922e:	4602      	mov	r2, r0
 8009230:	4b25      	ldr	r3, [pc, #148]	; (80092c8 <__d2b+0xb0>)
 8009232:	4826      	ldr	r0, [pc, #152]	; (80092cc <__d2b+0xb4>)
 8009234:	f240 310a 	movw	r1, #778	; 0x30a
 8009238:	f000 fb4c 	bl	80098d4 <__assert_func>
 800923c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009240:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009244:	bb35      	cbnz	r5, 8009294 <__d2b+0x7c>
 8009246:	2e00      	cmp	r6, #0
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	d028      	beq.n	800929e <__d2b+0x86>
 800924c:	4668      	mov	r0, sp
 800924e:	9600      	str	r6, [sp, #0]
 8009250:	f7ff fd06 	bl	8008c60 <__lo0bits>
 8009254:	9900      	ldr	r1, [sp, #0]
 8009256:	b300      	cbz	r0, 800929a <__d2b+0x82>
 8009258:	9a01      	ldr	r2, [sp, #4]
 800925a:	f1c0 0320 	rsb	r3, r0, #32
 800925e:	fa02 f303 	lsl.w	r3, r2, r3
 8009262:	430b      	orrs	r3, r1
 8009264:	40c2      	lsrs	r2, r0
 8009266:	6163      	str	r3, [r4, #20]
 8009268:	9201      	str	r2, [sp, #4]
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	61a3      	str	r3, [r4, #24]
 800926e:	2b00      	cmp	r3, #0
 8009270:	bf14      	ite	ne
 8009272:	2202      	movne	r2, #2
 8009274:	2201      	moveq	r2, #1
 8009276:	6122      	str	r2, [r4, #16]
 8009278:	b1d5      	cbz	r5, 80092b0 <__d2b+0x98>
 800927a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800927e:	4405      	add	r5, r0
 8009280:	f8c9 5000 	str.w	r5, [r9]
 8009284:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009288:	f8c8 0000 	str.w	r0, [r8]
 800928c:	4620      	mov	r0, r4
 800928e:	b003      	add	sp, #12
 8009290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009298:	e7d5      	b.n	8009246 <__d2b+0x2e>
 800929a:	6161      	str	r1, [r4, #20]
 800929c:	e7e5      	b.n	800926a <__d2b+0x52>
 800929e:	a801      	add	r0, sp, #4
 80092a0:	f7ff fcde 	bl	8008c60 <__lo0bits>
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	6163      	str	r3, [r4, #20]
 80092a8:	2201      	movs	r2, #1
 80092aa:	6122      	str	r2, [r4, #16]
 80092ac:	3020      	adds	r0, #32
 80092ae:	e7e3      	b.n	8009278 <__d2b+0x60>
 80092b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092b8:	f8c9 0000 	str.w	r0, [r9]
 80092bc:	6918      	ldr	r0, [r3, #16]
 80092be:	f7ff fcaf 	bl	8008c20 <__hi0bits>
 80092c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092c6:	e7df      	b.n	8009288 <__d2b+0x70>
 80092c8:	0800a698 	.word	0x0800a698
 80092cc:	0800a724 	.word	0x0800a724

080092d0 <__ratio>:
 80092d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	4688      	mov	r8, r1
 80092d6:	4669      	mov	r1, sp
 80092d8:	4681      	mov	r9, r0
 80092da:	f7ff ff4d 	bl	8009178 <__b2d>
 80092de:	a901      	add	r1, sp, #4
 80092e0:	4640      	mov	r0, r8
 80092e2:	ec55 4b10 	vmov	r4, r5, d0
 80092e6:	ee10 aa10 	vmov	sl, s0
 80092ea:	f7ff ff45 	bl	8009178 <__b2d>
 80092ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80092f6:	1a59      	subs	r1, r3, r1
 80092f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009302:	ec57 6b10 	vmov	r6, r7, d0
 8009306:	2b00      	cmp	r3, #0
 8009308:	bfd6      	itet	le
 800930a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800930e:	462a      	movgt	r2, r5
 8009310:	463a      	movle	r2, r7
 8009312:	46ab      	mov	fp, r5
 8009314:	bfd6      	itet	le
 8009316:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800931a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800931e:	ee00 3a90 	vmovle	s1, r3
 8009322:	ec4b ab17 	vmov	d7, sl, fp
 8009326:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800932a:	b003      	add	sp, #12
 800932c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009330 <__copybits>:
 8009330:	3901      	subs	r1, #1
 8009332:	b570      	push	{r4, r5, r6, lr}
 8009334:	1149      	asrs	r1, r1, #5
 8009336:	6914      	ldr	r4, [r2, #16]
 8009338:	3101      	adds	r1, #1
 800933a:	f102 0314 	add.w	r3, r2, #20
 800933e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009342:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009346:	1f05      	subs	r5, r0, #4
 8009348:	42a3      	cmp	r3, r4
 800934a:	d30c      	bcc.n	8009366 <__copybits+0x36>
 800934c:	1aa3      	subs	r3, r4, r2
 800934e:	3b11      	subs	r3, #17
 8009350:	f023 0303 	bic.w	r3, r3, #3
 8009354:	3211      	adds	r2, #17
 8009356:	42a2      	cmp	r2, r4
 8009358:	bf88      	it	hi
 800935a:	2300      	movhi	r3, #0
 800935c:	4418      	add	r0, r3
 800935e:	2300      	movs	r3, #0
 8009360:	4288      	cmp	r0, r1
 8009362:	d305      	bcc.n	8009370 <__copybits+0x40>
 8009364:	bd70      	pop	{r4, r5, r6, pc}
 8009366:	f853 6b04 	ldr.w	r6, [r3], #4
 800936a:	f845 6f04 	str.w	r6, [r5, #4]!
 800936e:	e7eb      	b.n	8009348 <__copybits+0x18>
 8009370:	f840 3b04 	str.w	r3, [r0], #4
 8009374:	e7f4      	b.n	8009360 <__copybits+0x30>

08009376 <__any_on>:
 8009376:	f100 0214 	add.w	r2, r0, #20
 800937a:	6900      	ldr	r0, [r0, #16]
 800937c:	114b      	asrs	r3, r1, #5
 800937e:	4298      	cmp	r0, r3
 8009380:	b510      	push	{r4, lr}
 8009382:	db11      	blt.n	80093a8 <__any_on+0x32>
 8009384:	dd0a      	ble.n	800939c <__any_on+0x26>
 8009386:	f011 011f 	ands.w	r1, r1, #31
 800938a:	d007      	beq.n	800939c <__any_on+0x26>
 800938c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009390:	fa24 f001 	lsr.w	r0, r4, r1
 8009394:	fa00 f101 	lsl.w	r1, r0, r1
 8009398:	428c      	cmp	r4, r1
 800939a:	d10b      	bne.n	80093b4 <__any_on+0x3e>
 800939c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d803      	bhi.n	80093ac <__any_on+0x36>
 80093a4:	2000      	movs	r0, #0
 80093a6:	bd10      	pop	{r4, pc}
 80093a8:	4603      	mov	r3, r0
 80093aa:	e7f7      	b.n	800939c <__any_on+0x26>
 80093ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093b0:	2900      	cmp	r1, #0
 80093b2:	d0f5      	beq.n	80093a0 <__any_on+0x2a>
 80093b4:	2001      	movs	r0, #1
 80093b6:	e7f6      	b.n	80093a6 <__any_on+0x30>

080093b8 <_calloc_r>:
 80093b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ba:	fba1 2402 	umull	r2, r4, r1, r2
 80093be:	b94c      	cbnz	r4, 80093d4 <_calloc_r+0x1c>
 80093c0:	4611      	mov	r1, r2
 80093c2:	9201      	str	r2, [sp, #4]
 80093c4:	f000 f87a 	bl	80094bc <_malloc_r>
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	4605      	mov	r5, r0
 80093cc:	b930      	cbnz	r0, 80093dc <_calloc_r+0x24>
 80093ce:	4628      	mov	r0, r5
 80093d0:	b003      	add	sp, #12
 80093d2:	bd30      	pop	{r4, r5, pc}
 80093d4:	220c      	movs	r2, #12
 80093d6:	6002      	str	r2, [r0, #0]
 80093d8:	2500      	movs	r5, #0
 80093da:	e7f8      	b.n	80093ce <_calloc_r+0x16>
 80093dc:	4621      	mov	r1, r4
 80093de:	f7fc fcc7 	bl	8005d70 <memset>
 80093e2:	e7f4      	b.n	80093ce <_calloc_r+0x16>

080093e4 <_free_r>:
 80093e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093e6:	2900      	cmp	r1, #0
 80093e8:	d044      	beq.n	8009474 <_free_r+0x90>
 80093ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ee:	9001      	str	r0, [sp, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f1a1 0404 	sub.w	r4, r1, #4
 80093f6:	bfb8      	it	lt
 80093f8:	18e4      	addlt	r4, r4, r3
 80093fa:	f000 fab5 	bl	8009968 <__malloc_lock>
 80093fe:	4a1e      	ldr	r2, [pc, #120]	; (8009478 <_free_r+0x94>)
 8009400:	9801      	ldr	r0, [sp, #4]
 8009402:	6813      	ldr	r3, [r2, #0]
 8009404:	b933      	cbnz	r3, 8009414 <_free_r+0x30>
 8009406:	6063      	str	r3, [r4, #4]
 8009408:	6014      	str	r4, [r2, #0]
 800940a:	b003      	add	sp, #12
 800940c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009410:	f000 bab0 	b.w	8009974 <__malloc_unlock>
 8009414:	42a3      	cmp	r3, r4
 8009416:	d908      	bls.n	800942a <_free_r+0x46>
 8009418:	6825      	ldr	r5, [r4, #0]
 800941a:	1961      	adds	r1, r4, r5
 800941c:	428b      	cmp	r3, r1
 800941e:	bf01      	itttt	eq
 8009420:	6819      	ldreq	r1, [r3, #0]
 8009422:	685b      	ldreq	r3, [r3, #4]
 8009424:	1949      	addeq	r1, r1, r5
 8009426:	6021      	streq	r1, [r4, #0]
 8009428:	e7ed      	b.n	8009406 <_free_r+0x22>
 800942a:	461a      	mov	r2, r3
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	b10b      	cbz	r3, 8009434 <_free_r+0x50>
 8009430:	42a3      	cmp	r3, r4
 8009432:	d9fa      	bls.n	800942a <_free_r+0x46>
 8009434:	6811      	ldr	r1, [r2, #0]
 8009436:	1855      	adds	r5, r2, r1
 8009438:	42a5      	cmp	r5, r4
 800943a:	d10b      	bne.n	8009454 <_free_r+0x70>
 800943c:	6824      	ldr	r4, [r4, #0]
 800943e:	4421      	add	r1, r4
 8009440:	1854      	adds	r4, r2, r1
 8009442:	42a3      	cmp	r3, r4
 8009444:	6011      	str	r1, [r2, #0]
 8009446:	d1e0      	bne.n	800940a <_free_r+0x26>
 8009448:	681c      	ldr	r4, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	6053      	str	r3, [r2, #4]
 800944e:	4421      	add	r1, r4
 8009450:	6011      	str	r1, [r2, #0]
 8009452:	e7da      	b.n	800940a <_free_r+0x26>
 8009454:	d902      	bls.n	800945c <_free_r+0x78>
 8009456:	230c      	movs	r3, #12
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	e7d6      	b.n	800940a <_free_r+0x26>
 800945c:	6825      	ldr	r5, [r4, #0]
 800945e:	1961      	adds	r1, r4, r5
 8009460:	428b      	cmp	r3, r1
 8009462:	bf04      	itt	eq
 8009464:	6819      	ldreq	r1, [r3, #0]
 8009466:	685b      	ldreq	r3, [r3, #4]
 8009468:	6063      	str	r3, [r4, #4]
 800946a:	bf04      	itt	eq
 800946c:	1949      	addeq	r1, r1, r5
 800946e:	6021      	streq	r1, [r4, #0]
 8009470:	6054      	str	r4, [r2, #4]
 8009472:	e7ca      	b.n	800940a <_free_r+0x26>
 8009474:	b003      	add	sp, #12
 8009476:	bd30      	pop	{r4, r5, pc}
 8009478:	200003b0 	.word	0x200003b0

0800947c <sbrk_aligned>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	4e0e      	ldr	r6, [pc, #56]	; (80094b8 <sbrk_aligned+0x3c>)
 8009480:	460c      	mov	r4, r1
 8009482:	6831      	ldr	r1, [r6, #0]
 8009484:	4605      	mov	r5, r0
 8009486:	b911      	cbnz	r1, 800948e <sbrk_aligned+0x12>
 8009488:	f000 f9f2 	bl	8009870 <_sbrk_r>
 800948c:	6030      	str	r0, [r6, #0]
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f000 f9ed 	bl	8009870 <_sbrk_r>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	d00a      	beq.n	80094b0 <sbrk_aligned+0x34>
 800949a:	1cc4      	adds	r4, r0, #3
 800949c:	f024 0403 	bic.w	r4, r4, #3
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d007      	beq.n	80094b4 <sbrk_aligned+0x38>
 80094a4:	1a21      	subs	r1, r4, r0
 80094a6:	4628      	mov	r0, r5
 80094a8:	f000 f9e2 	bl	8009870 <_sbrk_r>
 80094ac:	3001      	adds	r0, #1
 80094ae:	d101      	bne.n	80094b4 <sbrk_aligned+0x38>
 80094b0:	f04f 34ff 	mov.w	r4, #4294967295
 80094b4:	4620      	mov	r0, r4
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	200003b4 	.word	0x200003b4

080094bc <_malloc_r>:
 80094bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c0:	1ccd      	adds	r5, r1, #3
 80094c2:	f025 0503 	bic.w	r5, r5, #3
 80094c6:	3508      	adds	r5, #8
 80094c8:	2d0c      	cmp	r5, #12
 80094ca:	bf38      	it	cc
 80094cc:	250c      	movcc	r5, #12
 80094ce:	2d00      	cmp	r5, #0
 80094d0:	4607      	mov	r7, r0
 80094d2:	db01      	blt.n	80094d8 <_malloc_r+0x1c>
 80094d4:	42a9      	cmp	r1, r5
 80094d6:	d905      	bls.n	80094e4 <_malloc_r+0x28>
 80094d8:	230c      	movs	r3, #12
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	2600      	movs	r6, #0
 80094de:	4630      	mov	r0, r6
 80094e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e4:	4e2e      	ldr	r6, [pc, #184]	; (80095a0 <_malloc_r+0xe4>)
 80094e6:	f000 fa3f 	bl	8009968 <__malloc_lock>
 80094ea:	6833      	ldr	r3, [r6, #0]
 80094ec:	461c      	mov	r4, r3
 80094ee:	bb34      	cbnz	r4, 800953e <_malloc_r+0x82>
 80094f0:	4629      	mov	r1, r5
 80094f2:	4638      	mov	r0, r7
 80094f4:	f7ff ffc2 	bl	800947c <sbrk_aligned>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	4604      	mov	r4, r0
 80094fc:	d14d      	bne.n	800959a <_malloc_r+0xde>
 80094fe:	6834      	ldr	r4, [r6, #0]
 8009500:	4626      	mov	r6, r4
 8009502:	2e00      	cmp	r6, #0
 8009504:	d140      	bne.n	8009588 <_malloc_r+0xcc>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	4631      	mov	r1, r6
 800950a:	4638      	mov	r0, r7
 800950c:	eb04 0803 	add.w	r8, r4, r3
 8009510:	f000 f9ae 	bl	8009870 <_sbrk_r>
 8009514:	4580      	cmp	r8, r0
 8009516:	d13a      	bne.n	800958e <_malloc_r+0xd2>
 8009518:	6821      	ldr	r1, [r4, #0]
 800951a:	3503      	adds	r5, #3
 800951c:	1a6d      	subs	r5, r5, r1
 800951e:	f025 0503 	bic.w	r5, r5, #3
 8009522:	3508      	adds	r5, #8
 8009524:	2d0c      	cmp	r5, #12
 8009526:	bf38      	it	cc
 8009528:	250c      	movcc	r5, #12
 800952a:	4629      	mov	r1, r5
 800952c:	4638      	mov	r0, r7
 800952e:	f7ff ffa5 	bl	800947c <sbrk_aligned>
 8009532:	3001      	adds	r0, #1
 8009534:	d02b      	beq.n	800958e <_malloc_r+0xd2>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	442b      	add	r3, r5
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	e00e      	b.n	800955c <_malloc_r+0xa0>
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	1b52      	subs	r2, r2, r5
 8009542:	d41e      	bmi.n	8009582 <_malloc_r+0xc6>
 8009544:	2a0b      	cmp	r2, #11
 8009546:	d916      	bls.n	8009576 <_malloc_r+0xba>
 8009548:	1961      	adds	r1, r4, r5
 800954a:	42a3      	cmp	r3, r4
 800954c:	6025      	str	r5, [r4, #0]
 800954e:	bf18      	it	ne
 8009550:	6059      	strne	r1, [r3, #4]
 8009552:	6863      	ldr	r3, [r4, #4]
 8009554:	bf08      	it	eq
 8009556:	6031      	streq	r1, [r6, #0]
 8009558:	5162      	str	r2, [r4, r5]
 800955a:	604b      	str	r3, [r1, #4]
 800955c:	4638      	mov	r0, r7
 800955e:	f104 060b 	add.w	r6, r4, #11
 8009562:	f000 fa07 	bl	8009974 <__malloc_unlock>
 8009566:	f026 0607 	bic.w	r6, r6, #7
 800956a:	1d23      	adds	r3, r4, #4
 800956c:	1af2      	subs	r2, r6, r3
 800956e:	d0b6      	beq.n	80094de <_malloc_r+0x22>
 8009570:	1b9b      	subs	r3, r3, r6
 8009572:	50a3      	str	r3, [r4, r2]
 8009574:	e7b3      	b.n	80094de <_malloc_r+0x22>
 8009576:	6862      	ldr	r2, [r4, #4]
 8009578:	42a3      	cmp	r3, r4
 800957a:	bf0c      	ite	eq
 800957c:	6032      	streq	r2, [r6, #0]
 800957e:	605a      	strne	r2, [r3, #4]
 8009580:	e7ec      	b.n	800955c <_malloc_r+0xa0>
 8009582:	4623      	mov	r3, r4
 8009584:	6864      	ldr	r4, [r4, #4]
 8009586:	e7b2      	b.n	80094ee <_malloc_r+0x32>
 8009588:	4634      	mov	r4, r6
 800958a:	6876      	ldr	r6, [r6, #4]
 800958c:	e7b9      	b.n	8009502 <_malloc_r+0x46>
 800958e:	230c      	movs	r3, #12
 8009590:	603b      	str	r3, [r7, #0]
 8009592:	4638      	mov	r0, r7
 8009594:	f000 f9ee 	bl	8009974 <__malloc_unlock>
 8009598:	e7a1      	b.n	80094de <_malloc_r+0x22>
 800959a:	6025      	str	r5, [r4, #0]
 800959c:	e7de      	b.n	800955c <_malloc_r+0xa0>
 800959e:	bf00      	nop
 80095a0:	200003b0 	.word	0x200003b0

080095a4 <__ssputs_r>:
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a8:	688e      	ldr	r6, [r1, #8]
 80095aa:	429e      	cmp	r6, r3
 80095ac:	4682      	mov	sl, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	4690      	mov	r8, r2
 80095b2:	461f      	mov	r7, r3
 80095b4:	d838      	bhi.n	8009628 <__ssputs_r+0x84>
 80095b6:	898a      	ldrh	r2, [r1, #12]
 80095b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095bc:	d032      	beq.n	8009624 <__ssputs_r+0x80>
 80095be:	6825      	ldr	r5, [r4, #0]
 80095c0:	6909      	ldr	r1, [r1, #16]
 80095c2:	eba5 0901 	sub.w	r9, r5, r1
 80095c6:	6965      	ldr	r5, [r4, #20]
 80095c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095d0:	3301      	adds	r3, #1
 80095d2:	444b      	add	r3, r9
 80095d4:	106d      	asrs	r5, r5, #1
 80095d6:	429d      	cmp	r5, r3
 80095d8:	bf38      	it	cc
 80095da:	461d      	movcc	r5, r3
 80095dc:	0553      	lsls	r3, r2, #21
 80095de:	d531      	bpl.n	8009644 <__ssputs_r+0xa0>
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7ff ff6b 	bl	80094bc <_malloc_r>
 80095e6:	4606      	mov	r6, r0
 80095e8:	b950      	cbnz	r0, 8009600 <__ssputs_r+0x5c>
 80095ea:	230c      	movs	r3, #12
 80095ec:	f8ca 3000 	str.w	r3, [sl]
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f6:	81a3      	strh	r3, [r4, #12]
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009600:	6921      	ldr	r1, [r4, #16]
 8009602:	464a      	mov	r2, r9
 8009604:	f7ff fa0c 	bl	8008a20 <memcpy>
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800960e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	6126      	str	r6, [r4, #16]
 8009616:	6165      	str	r5, [r4, #20]
 8009618:	444e      	add	r6, r9
 800961a:	eba5 0509 	sub.w	r5, r5, r9
 800961e:	6026      	str	r6, [r4, #0]
 8009620:	60a5      	str	r5, [r4, #8]
 8009622:	463e      	mov	r6, r7
 8009624:	42be      	cmp	r6, r7
 8009626:	d900      	bls.n	800962a <__ssputs_r+0x86>
 8009628:	463e      	mov	r6, r7
 800962a:	6820      	ldr	r0, [r4, #0]
 800962c:	4632      	mov	r2, r6
 800962e:	4641      	mov	r1, r8
 8009630:	f000 f980 	bl	8009934 <memmove>
 8009634:	68a3      	ldr	r3, [r4, #8]
 8009636:	1b9b      	subs	r3, r3, r6
 8009638:	60a3      	str	r3, [r4, #8]
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	4433      	add	r3, r6
 800963e:	6023      	str	r3, [r4, #0]
 8009640:	2000      	movs	r0, #0
 8009642:	e7db      	b.n	80095fc <__ssputs_r+0x58>
 8009644:	462a      	mov	r2, r5
 8009646:	f000 f99b 	bl	8009980 <_realloc_r>
 800964a:	4606      	mov	r6, r0
 800964c:	2800      	cmp	r0, #0
 800964e:	d1e1      	bne.n	8009614 <__ssputs_r+0x70>
 8009650:	6921      	ldr	r1, [r4, #16]
 8009652:	4650      	mov	r0, sl
 8009654:	f7ff fec6 	bl	80093e4 <_free_r>
 8009658:	e7c7      	b.n	80095ea <__ssputs_r+0x46>
	...

0800965c <_svfiprintf_r>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	4698      	mov	r8, r3
 8009662:	898b      	ldrh	r3, [r1, #12]
 8009664:	061b      	lsls	r3, r3, #24
 8009666:	b09d      	sub	sp, #116	; 0x74
 8009668:	4607      	mov	r7, r0
 800966a:	460d      	mov	r5, r1
 800966c:	4614      	mov	r4, r2
 800966e:	d50e      	bpl.n	800968e <_svfiprintf_r+0x32>
 8009670:	690b      	ldr	r3, [r1, #16]
 8009672:	b963      	cbnz	r3, 800968e <_svfiprintf_r+0x32>
 8009674:	2140      	movs	r1, #64	; 0x40
 8009676:	f7ff ff21 	bl	80094bc <_malloc_r>
 800967a:	6028      	str	r0, [r5, #0]
 800967c:	6128      	str	r0, [r5, #16]
 800967e:	b920      	cbnz	r0, 800968a <_svfiprintf_r+0x2e>
 8009680:	230c      	movs	r3, #12
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	f04f 30ff 	mov.w	r0, #4294967295
 8009688:	e0d1      	b.n	800982e <_svfiprintf_r+0x1d2>
 800968a:	2340      	movs	r3, #64	; 0x40
 800968c:	616b      	str	r3, [r5, #20]
 800968e:	2300      	movs	r3, #0
 8009690:	9309      	str	r3, [sp, #36]	; 0x24
 8009692:	2320      	movs	r3, #32
 8009694:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009698:	f8cd 800c 	str.w	r8, [sp, #12]
 800969c:	2330      	movs	r3, #48	; 0x30
 800969e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009848 <_svfiprintf_r+0x1ec>
 80096a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096a6:	f04f 0901 	mov.w	r9, #1
 80096aa:	4623      	mov	r3, r4
 80096ac:	469a      	mov	sl, r3
 80096ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b2:	b10a      	cbz	r2, 80096b8 <_svfiprintf_r+0x5c>
 80096b4:	2a25      	cmp	r2, #37	; 0x25
 80096b6:	d1f9      	bne.n	80096ac <_svfiprintf_r+0x50>
 80096b8:	ebba 0b04 	subs.w	fp, sl, r4
 80096bc:	d00b      	beq.n	80096d6 <_svfiprintf_r+0x7a>
 80096be:	465b      	mov	r3, fp
 80096c0:	4622      	mov	r2, r4
 80096c2:	4629      	mov	r1, r5
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7ff ff6d 	bl	80095a4 <__ssputs_r>
 80096ca:	3001      	adds	r0, #1
 80096cc:	f000 80aa 	beq.w	8009824 <_svfiprintf_r+0x1c8>
 80096d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096d2:	445a      	add	r2, fp
 80096d4:	9209      	str	r2, [sp, #36]	; 0x24
 80096d6:	f89a 3000 	ldrb.w	r3, [sl]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 80a2 	beq.w	8009824 <_svfiprintf_r+0x1c8>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f04f 32ff 	mov.w	r2, #4294967295
 80096e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ea:	f10a 0a01 	add.w	sl, sl, #1
 80096ee:	9304      	str	r3, [sp, #16]
 80096f0:	9307      	str	r3, [sp, #28]
 80096f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096f6:	931a      	str	r3, [sp, #104]	; 0x68
 80096f8:	4654      	mov	r4, sl
 80096fa:	2205      	movs	r2, #5
 80096fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009700:	4851      	ldr	r0, [pc, #324]	; (8009848 <_svfiprintf_r+0x1ec>)
 8009702:	f7f6 fda5 	bl	8000250 <memchr>
 8009706:	9a04      	ldr	r2, [sp, #16]
 8009708:	b9d8      	cbnz	r0, 8009742 <_svfiprintf_r+0xe6>
 800970a:	06d0      	lsls	r0, r2, #27
 800970c:	bf44      	itt	mi
 800970e:	2320      	movmi	r3, #32
 8009710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009714:	0711      	lsls	r1, r2, #28
 8009716:	bf44      	itt	mi
 8009718:	232b      	movmi	r3, #43	; 0x2b
 800971a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800971e:	f89a 3000 	ldrb.w	r3, [sl]
 8009722:	2b2a      	cmp	r3, #42	; 0x2a
 8009724:	d015      	beq.n	8009752 <_svfiprintf_r+0xf6>
 8009726:	9a07      	ldr	r2, [sp, #28]
 8009728:	4654      	mov	r4, sl
 800972a:	2000      	movs	r0, #0
 800972c:	f04f 0c0a 	mov.w	ip, #10
 8009730:	4621      	mov	r1, r4
 8009732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009736:	3b30      	subs	r3, #48	; 0x30
 8009738:	2b09      	cmp	r3, #9
 800973a:	d94e      	bls.n	80097da <_svfiprintf_r+0x17e>
 800973c:	b1b0      	cbz	r0, 800976c <_svfiprintf_r+0x110>
 800973e:	9207      	str	r2, [sp, #28]
 8009740:	e014      	b.n	800976c <_svfiprintf_r+0x110>
 8009742:	eba0 0308 	sub.w	r3, r0, r8
 8009746:	fa09 f303 	lsl.w	r3, r9, r3
 800974a:	4313      	orrs	r3, r2
 800974c:	9304      	str	r3, [sp, #16]
 800974e:	46a2      	mov	sl, r4
 8009750:	e7d2      	b.n	80096f8 <_svfiprintf_r+0x9c>
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	1d19      	adds	r1, r3, #4
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	9103      	str	r1, [sp, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	bfbb      	ittet	lt
 800975e:	425b      	neglt	r3, r3
 8009760:	f042 0202 	orrlt.w	r2, r2, #2
 8009764:	9307      	strge	r3, [sp, #28]
 8009766:	9307      	strlt	r3, [sp, #28]
 8009768:	bfb8      	it	lt
 800976a:	9204      	strlt	r2, [sp, #16]
 800976c:	7823      	ldrb	r3, [r4, #0]
 800976e:	2b2e      	cmp	r3, #46	; 0x2e
 8009770:	d10c      	bne.n	800978c <_svfiprintf_r+0x130>
 8009772:	7863      	ldrb	r3, [r4, #1]
 8009774:	2b2a      	cmp	r3, #42	; 0x2a
 8009776:	d135      	bne.n	80097e4 <_svfiprintf_r+0x188>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	1d1a      	adds	r2, r3, #4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	9203      	str	r2, [sp, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	bfb8      	it	lt
 8009784:	f04f 33ff 	movlt.w	r3, #4294967295
 8009788:	3402      	adds	r4, #2
 800978a:	9305      	str	r3, [sp, #20]
 800978c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009858 <_svfiprintf_r+0x1fc>
 8009790:	7821      	ldrb	r1, [r4, #0]
 8009792:	2203      	movs	r2, #3
 8009794:	4650      	mov	r0, sl
 8009796:	f7f6 fd5b 	bl	8000250 <memchr>
 800979a:	b140      	cbz	r0, 80097ae <_svfiprintf_r+0x152>
 800979c:	2340      	movs	r3, #64	; 0x40
 800979e:	eba0 000a 	sub.w	r0, r0, sl
 80097a2:	fa03 f000 	lsl.w	r0, r3, r0
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	4303      	orrs	r3, r0
 80097aa:	3401      	adds	r4, #1
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b2:	4826      	ldr	r0, [pc, #152]	; (800984c <_svfiprintf_r+0x1f0>)
 80097b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097b8:	2206      	movs	r2, #6
 80097ba:	f7f6 fd49 	bl	8000250 <memchr>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d038      	beq.n	8009834 <_svfiprintf_r+0x1d8>
 80097c2:	4b23      	ldr	r3, [pc, #140]	; (8009850 <_svfiprintf_r+0x1f4>)
 80097c4:	bb1b      	cbnz	r3, 800980e <_svfiprintf_r+0x1b2>
 80097c6:	9b03      	ldr	r3, [sp, #12]
 80097c8:	3307      	adds	r3, #7
 80097ca:	f023 0307 	bic.w	r3, r3, #7
 80097ce:	3308      	adds	r3, #8
 80097d0:	9303      	str	r3, [sp, #12]
 80097d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d4:	4433      	add	r3, r6
 80097d6:	9309      	str	r3, [sp, #36]	; 0x24
 80097d8:	e767      	b.n	80096aa <_svfiprintf_r+0x4e>
 80097da:	fb0c 3202 	mla	r2, ip, r2, r3
 80097de:	460c      	mov	r4, r1
 80097e0:	2001      	movs	r0, #1
 80097e2:	e7a5      	b.n	8009730 <_svfiprintf_r+0xd4>
 80097e4:	2300      	movs	r3, #0
 80097e6:	3401      	adds	r4, #1
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	4619      	mov	r1, r3
 80097ec:	f04f 0c0a 	mov.w	ip, #10
 80097f0:	4620      	mov	r0, r4
 80097f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097f6:	3a30      	subs	r2, #48	; 0x30
 80097f8:	2a09      	cmp	r2, #9
 80097fa:	d903      	bls.n	8009804 <_svfiprintf_r+0x1a8>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0c5      	beq.n	800978c <_svfiprintf_r+0x130>
 8009800:	9105      	str	r1, [sp, #20]
 8009802:	e7c3      	b.n	800978c <_svfiprintf_r+0x130>
 8009804:	fb0c 2101 	mla	r1, ip, r1, r2
 8009808:	4604      	mov	r4, r0
 800980a:	2301      	movs	r3, #1
 800980c:	e7f0      	b.n	80097f0 <_svfiprintf_r+0x194>
 800980e:	ab03      	add	r3, sp, #12
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	462a      	mov	r2, r5
 8009814:	4b0f      	ldr	r3, [pc, #60]	; (8009854 <_svfiprintf_r+0x1f8>)
 8009816:	a904      	add	r1, sp, #16
 8009818:	4638      	mov	r0, r7
 800981a:	f7fc fb41 	bl	8005ea0 <_printf_float>
 800981e:	1c42      	adds	r2, r0, #1
 8009820:	4606      	mov	r6, r0
 8009822:	d1d6      	bne.n	80097d2 <_svfiprintf_r+0x176>
 8009824:	89ab      	ldrh	r3, [r5, #12]
 8009826:	065b      	lsls	r3, r3, #25
 8009828:	f53f af2c 	bmi.w	8009684 <_svfiprintf_r+0x28>
 800982c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800982e:	b01d      	add	sp, #116	; 0x74
 8009830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009834:	ab03      	add	r3, sp, #12
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	462a      	mov	r2, r5
 800983a:	4b06      	ldr	r3, [pc, #24]	; (8009854 <_svfiprintf_r+0x1f8>)
 800983c:	a904      	add	r1, sp, #16
 800983e:	4638      	mov	r0, r7
 8009840:	f7fc fdba 	bl	80063b8 <_printf_i>
 8009844:	e7eb      	b.n	800981e <_svfiprintf_r+0x1c2>
 8009846:	bf00      	nop
 8009848:	0800a87c 	.word	0x0800a87c
 800984c:	0800a886 	.word	0x0800a886
 8009850:	08005ea1 	.word	0x08005ea1
 8009854:	080095a5 	.word	0x080095a5
 8009858:	0800a882 	.word	0x0800a882
 800985c:	00000000 	.word	0x00000000

08009860 <nan>:
 8009860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009868 <nan+0x8>
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	00000000 	.word	0x00000000
 800986c:	7ff80000 	.word	0x7ff80000

08009870 <_sbrk_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d06      	ldr	r5, [pc, #24]	; (800988c <_sbrk_r+0x1c>)
 8009874:	2300      	movs	r3, #0
 8009876:	4604      	mov	r4, r0
 8009878:	4608      	mov	r0, r1
 800987a:	602b      	str	r3, [r5, #0]
 800987c:	f7f7 feaa 	bl	80015d4 <_sbrk>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d102      	bne.n	800988a <_sbrk_r+0x1a>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b103      	cbz	r3, 800988a <_sbrk_r+0x1a>
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	200003b8 	.word	0x200003b8

08009890 <strncmp>:
 8009890:	b510      	push	{r4, lr}
 8009892:	b17a      	cbz	r2, 80098b4 <strncmp+0x24>
 8009894:	4603      	mov	r3, r0
 8009896:	3901      	subs	r1, #1
 8009898:	1884      	adds	r4, r0, r2
 800989a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800989e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098a2:	4290      	cmp	r0, r2
 80098a4:	d101      	bne.n	80098aa <strncmp+0x1a>
 80098a6:	42a3      	cmp	r3, r4
 80098a8:	d101      	bne.n	80098ae <strncmp+0x1e>
 80098aa:	1a80      	subs	r0, r0, r2
 80098ac:	bd10      	pop	{r4, pc}
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d1f3      	bne.n	800989a <strncmp+0xa>
 80098b2:	e7fa      	b.n	80098aa <strncmp+0x1a>
 80098b4:	4610      	mov	r0, r2
 80098b6:	e7f9      	b.n	80098ac <strncmp+0x1c>

080098b8 <__ascii_wctomb>:
 80098b8:	b149      	cbz	r1, 80098ce <__ascii_wctomb+0x16>
 80098ba:	2aff      	cmp	r2, #255	; 0xff
 80098bc:	bf85      	ittet	hi
 80098be:	238a      	movhi	r3, #138	; 0x8a
 80098c0:	6003      	strhi	r3, [r0, #0]
 80098c2:	700a      	strbls	r2, [r1, #0]
 80098c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80098c8:	bf98      	it	ls
 80098ca:	2001      	movls	r0, #1
 80098cc:	4770      	bx	lr
 80098ce:	4608      	mov	r0, r1
 80098d0:	4770      	bx	lr
	...

080098d4 <__assert_func>:
 80098d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098d6:	4614      	mov	r4, r2
 80098d8:	461a      	mov	r2, r3
 80098da:	4b09      	ldr	r3, [pc, #36]	; (8009900 <__assert_func+0x2c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4605      	mov	r5, r0
 80098e0:	68d8      	ldr	r0, [r3, #12]
 80098e2:	b14c      	cbz	r4, 80098f8 <__assert_func+0x24>
 80098e4:	4b07      	ldr	r3, [pc, #28]	; (8009904 <__assert_func+0x30>)
 80098e6:	9100      	str	r1, [sp, #0]
 80098e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098ec:	4906      	ldr	r1, [pc, #24]	; (8009908 <__assert_func+0x34>)
 80098ee:	462b      	mov	r3, r5
 80098f0:	f000 f80e 	bl	8009910 <fiprintf>
 80098f4:	f000 fa8c 	bl	8009e10 <abort>
 80098f8:	4b04      	ldr	r3, [pc, #16]	; (800990c <__assert_func+0x38>)
 80098fa:	461c      	mov	r4, r3
 80098fc:	e7f3      	b.n	80098e6 <__assert_func+0x12>
 80098fe:	bf00      	nop
 8009900:	2000000c 	.word	0x2000000c
 8009904:	0800a88d 	.word	0x0800a88d
 8009908:	0800a89a 	.word	0x0800a89a
 800990c:	0800a8c8 	.word	0x0800a8c8

08009910 <fiprintf>:
 8009910:	b40e      	push	{r1, r2, r3}
 8009912:	b503      	push	{r0, r1, lr}
 8009914:	4601      	mov	r1, r0
 8009916:	ab03      	add	r3, sp, #12
 8009918:	4805      	ldr	r0, [pc, #20]	; (8009930 <fiprintf+0x20>)
 800991a:	f853 2b04 	ldr.w	r2, [r3], #4
 800991e:	6800      	ldr	r0, [r0, #0]
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	f000 f885 	bl	8009a30 <_vfiprintf_r>
 8009926:	b002      	add	sp, #8
 8009928:	f85d eb04 	ldr.w	lr, [sp], #4
 800992c:	b003      	add	sp, #12
 800992e:	4770      	bx	lr
 8009930:	2000000c 	.word	0x2000000c

08009934 <memmove>:
 8009934:	4288      	cmp	r0, r1
 8009936:	b510      	push	{r4, lr}
 8009938:	eb01 0402 	add.w	r4, r1, r2
 800993c:	d902      	bls.n	8009944 <memmove+0x10>
 800993e:	4284      	cmp	r4, r0
 8009940:	4623      	mov	r3, r4
 8009942:	d807      	bhi.n	8009954 <memmove+0x20>
 8009944:	1e43      	subs	r3, r0, #1
 8009946:	42a1      	cmp	r1, r4
 8009948:	d008      	beq.n	800995c <memmove+0x28>
 800994a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800994e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009952:	e7f8      	b.n	8009946 <memmove+0x12>
 8009954:	4402      	add	r2, r0
 8009956:	4601      	mov	r1, r0
 8009958:	428a      	cmp	r2, r1
 800995a:	d100      	bne.n	800995e <memmove+0x2a>
 800995c:	bd10      	pop	{r4, pc}
 800995e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009966:	e7f7      	b.n	8009958 <memmove+0x24>

08009968 <__malloc_lock>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__malloc_lock+0x8>)
 800996a:	f000 bc11 	b.w	800a190 <__retarget_lock_acquire_recursive>
 800996e:	bf00      	nop
 8009970:	200003bc 	.word	0x200003bc

08009974 <__malloc_unlock>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__malloc_unlock+0x8>)
 8009976:	f000 bc0c 	b.w	800a192 <__retarget_lock_release_recursive>
 800997a:	bf00      	nop
 800997c:	200003bc 	.word	0x200003bc

08009980 <_realloc_r>:
 8009980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009984:	4680      	mov	r8, r0
 8009986:	4614      	mov	r4, r2
 8009988:	460e      	mov	r6, r1
 800998a:	b921      	cbnz	r1, 8009996 <_realloc_r+0x16>
 800998c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009990:	4611      	mov	r1, r2
 8009992:	f7ff bd93 	b.w	80094bc <_malloc_r>
 8009996:	b92a      	cbnz	r2, 80099a4 <_realloc_r+0x24>
 8009998:	f7ff fd24 	bl	80093e4 <_free_r>
 800999c:	4625      	mov	r5, r4
 800999e:	4628      	mov	r0, r5
 80099a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a4:	f000 fc5c 	bl	800a260 <_malloc_usable_size_r>
 80099a8:	4284      	cmp	r4, r0
 80099aa:	4607      	mov	r7, r0
 80099ac:	d802      	bhi.n	80099b4 <_realloc_r+0x34>
 80099ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099b2:	d812      	bhi.n	80099da <_realloc_r+0x5a>
 80099b4:	4621      	mov	r1, r4
 80099b6:	4640      	mov	r0, r8
 80099b8:	f7ff fd80 	bl	80094bc <_malloc_r>
 80099bc:	4605      	mov	r5, r0
 80099be:	2800      	cmp	r0, #0
 80099c0:	d0ed      	beq.n	800999e <_realloc_r+0x1e>
 80099c2:	42bc      	cmp	r4, r7
 80099c4:	4622      	mov	r2, r4
 80099c6:	4631      	mov	r1, r6
 80099c8:	bf28      	it	cs
 80099ca:	463a      	movcs	r2, r7
 80099cc:	f7ff f828 	bl	8008a20 <memcpy>
 80099d0:	4631      	mov	r1, r6
 80099d2:	4640      	mov	r0, r8
 80099d4:	f7ff fd06 	bl	80093e4 <_free_r>
 80099d8:	e7e1      	b.n	800999e <_realloc_r+0x1e>
 80099da:	4635      	mov	r5, r6
 80099dc:	e7df      	b.n	800999e <_realloc_r+0x1e>

080099de <__sfputc_r>:
 80099de:	6893      	ldr	r3, [r2, #8]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	b410      	push	{r4}
 80099e6:	6093      	str	r3, [r2, #8]
 80099e8:	da08      	bge.n	80099fc <__sfputc_r+0x1e>
 80099ea:	6994      	ldr	r4, [r2, #24]
 80099ec:	42a3      	cmp	r3, r4
 80099ee:	db01      	blt.n	80099f4 <__sfputc_r+0x16>
 80099f0:	290a      	cmp	r1, #10
 80099f2:	d103      	bne.n	80099fc <__sfputc_r+0x1e>
 80099f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f8:	f000 b94a 	b.w	8009c90 <__swbuf_r>
 80099fc:	6813      	ldr	r3, [r2, #0]
 80099fe:	1c58      	adds	r0, r3, #1
 8009a00:	6010      	str	r0, [r2, #0]
 8009a02:	7019      	strb	r1, [r3, #0]
 8009a04:	4608      	mov	r0, r1
 8009a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <__sfputs_r>:
 8009a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0e:	4606      	mov	r6, r0
 8009a10:	460f      	mov	r7, r1
 8009a12:	4614      	mov	r4, r2
 8009a14:	18d5      	adds	r5, r2, r3
 8009a16:	42ac      	cmp	r4, r5
 8009a18:	d101      	bne.n	8009a1e <__sfputs_r+0x12>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	e007      	b.n	8009a2e <__sfputs_r+0x22>
 8009a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a22:	463a      	mov	r2, r7
 8009a24:	4630      	mov	r0, r6
 8009a26:	f7ff ffda 	bl	80099de <__sfputc_r>
 8009a2a:	1c43      	adds	r3, r0, #1
 8009a2c:	d1f3      	bne.n	8009a16 <__sfputs_r+0xa>
 8009a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a30 <_vfiprintf_r>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	460d      	mov	r5, r1
 8009a36:	b09d      	sub	sp, #116	; 0x74
 8009a38:	4614      	mov	r4, r2
 8009a3a:	4698      	mov	r8, r3
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	b118      	cbz	r0, 8009a48 <_vfiprintf_r+0x18>
 8009a40:	6983      	ldr	r3, [r0, #24]
 8009a42:	b90b      	cbnz	r3, 8009a48 <_vfiprintf_r+0x18>
 8009a44:	f000 fb06 	bl	800a054 <__sinit>
 8009a48:	4b89      	ldr	r3, [pc, #548]	; (8009c70 <_vfiprintf_r+0x240>)
 8009a4a:	429d      	cmp	r5, r3
 8009a4c:	d11b      	bne.n	8009a86 <_vfiprintf_r+0x56>
 8009a4e:	6875      	ldr	r5, [r6, #4]
 8009a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a52:	07d9      	lsls	r1, r3, #31
 8009a54:	d405      	bmi.n	8009a62 <_vfiprintf_r+0x32>
 8009a56:	89ab      	ldrh	r3, [r5, #12]
 8009a58:	059a      	lsls	r2, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_vfiprintf_r+0x32>
 8009a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a5e:	f000 fb97 	bl	800a190 <__retarget_lock_acquire_recursive>
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	071b      	lsls	r3, r3, #28
 8009a66:	d501      	bpl.n	8009a6c <_vfiprintf_r+0x3c>
 8009a68:	692b      	ldr	r3, [r5, #16]
 8009a6a:	b9eb      	cbnz	r3, 8009aa8 <_vfiprintf_r+0x78>
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f000 f960 	bl	8009d34 <__swsetup_r>
 8009a74:	b1c0      	cbz	r0, 8009aa8 <_vfiprintf_r+0x78>
 8009a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a78:	07dc      	lsls	r4, r3, #31
 8009a7a:	d50e      	bpl.n	8009a9a <_vfiprintf_r+0x6a>
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	b01d      	add	sp, #116	; 0x74
 8009a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a86:	4b7b      	ldr	r3, [pc, #492]	; (8009c74 <_vfiprintf_r+0x244>)
 8009a88:	429d      	cmp	r5, r3
 8009a8a:	d101      	bne.n	8009a90 <_vfiprintf_r+0x60>
 8009a8c:	68b5      	ldr	r5, [r6, #8]
 8009a8e:	e7df      	b.n	8009a50 <_vfiprintf_r+0x20>
 8009a90:	4b79      	ldr	r3, [pc, #484]	; (8009c78 <_vfiprintf_r+0x248>)
 8009a92:	429d      	cmp	r5, r3
 8009a94:	bf08      	it	eq
 8009a96:	68f5      	ldreq	r5, [r6, #12]
 8009a98:	e7da      	b.n	8009a50 <_vfiprintf_r+0x20>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	0598      	lsls	r0, r3, #22
 8009a9e:	d4ed      	bmi.n	8009a7c <_vfiprintf_r+0x4c>
 8009aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aa2:	f000 fb76 	bl	800a192 <__retarget_lock_release_recursive>
 8009aa6:	e7e9      	b.n	8009a7c <_vfiprintf_r+0x4c>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8009aac:	2320      	movs	r3, #32
 8009aae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab6:	2330      	movs	r3, #48	; 0x30
 8009ab8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c7c <_vfiprintf_r+0x24c>
 8009abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ac0:	f04f 0901 	mov.w	r9, #1
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	469a      	mov	sl, r3
 8009ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009acc:	b10a      	cbz	r2, 8009ad2 <_vfiprintf_r+0xa2>
 8009ace:	2a25      	cmp	r2, #37	; 0x25
 8009ad0:	d1f9      	bne.n	8009ac6 <_vfiprintf_r+0x96>
 8009ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad6:	d00b      	beq.n	8009af0 <_vfiprintf_r+0xc0>
 8009ad8:	465b      	mov	r3, fp
 8009ada:	4622      	mov	r2, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ff94 	bl	8009a0c <__sfputs_r>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f000 80aa 	beq.w	8009c3e <_vfiprintf_r+0x20e>
 8009aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aec:	445a      	add	r2, fp
 8009aee:	9209      	str	r2, [sp, #36]	; 0x24
 8009af0:	f89a 3000 	ldrb.w	r3, [sl]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80a2 	beq.w	8009c3e <_vfiprintf_r+0x20e>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b04:	f10a 0a01 	add.w	sl, sl, #1
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9307      	str	r3, [sp, #28]
 8009b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b10:	931a      	str	r3, [sp, #104]	; 0x68
 8009b12:	4654      	mov	r4, sl
 8009b14:	2205      	movs	r2, #5
 8009b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1a:	4858      	ldr	r0, [pc, #352]	; (8009c7c <_vfiprintf_r+0x24c>)
 8009b1c:	f7f6 fb98 	bl	8000250 <memchr>
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	b9d8      	cbnz	r0, 8009b5c <_vfiprintf_r+0x12c>
 8009b24:	06d1      	lsls	r1, r2, #27
 8009b26:	bf44      	itt	mi
 8009b28:	2320      	movmi	r3, #32
 8009b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2e:	0713      	lsls	r3, r2, #28
 8009b30:	bf44      	itt	mi
 8009b32:	232b      	movmi	r3, #43	; 0x2b
 8009b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b38:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3e:	d015      	beq.n	8009b6c <_vfiprintf_r+0x13c>
 8009b40:	9a07      	ldr	r2, [sp, #28]
 8009b42:	4654      	mov	r4, sl
 8009b44:	2000      	movs	r0, #0
 8009b46:	f04f 0c0a 	mov.w	ip, #10
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b50:	3b30      	subs	r3, #48	; 0x30
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	d94e      	bls.n	8009bf4 <_vfiprintf_r+0x1c4>
 8009b56:	b1b0      	cbz	r0, 8009b86 <_vfiprintf_r+0x156>
 8009b58:	9207      	str	r2, [sp, #28]
 8009b5a:	e014      	b.n	8009b86 <_vfiprintf_r+0x156>
 8009b5c:	eba0 0308 	sub.w	r3, r0, r8
 8009b60:	fa09 f303 	lsl.w	r3, r9, r3
 8009b64:	4313      	orrs	r3, r2
 8009b66:	9304      	str	r3, [sp, #16]
 8009b68:	46a2      	mov	sl, r4
 8009b6a:	e7d2      	b.n	8009b12 <_vfiprintf_r+0xe2>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	1d19      	adds	r1, r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	9103      	str	r1, [sp, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfbb      	ittet	lt
 8009b78:	425b      	neglt	r3, r3
 8009b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7e:	9307      	strge	r3, [sp, #28]
 8009b80:	9307      	strlt	r3, [sp, #28]
 8009b82:	bfb8      	it	lt
 8009b84:	9204      	strlt	r2, [sp, #16]
 8009b86:	7823      	ldrb	r3, [r4, #0]
 8009b88:	2b2e      	cmp	r3, #46	; 0x2e
 8009b8a:	d10c      	bne.n	8009ba6 <_vfiprintf_r+0x176>
 8009b8c:	7863      	ldrb	r3, [r4, #1]
 8009b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b90:	d135      	bne.n	8009bfe <_vfiprintf_r+0x1ce>
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	1d1a      	adds	r2, r3, #4
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	9203      	str	r2, [sp, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	bfb8      	it	lt
 8009b9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba2:	3402      	adds	r4, #2
 8009ba4:	9305      	str	r3, [sp, #20]
 8009ba6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c8c <_vfiprintf_r+0x25c>
 8009baa:	7821      	ldrb	r1, [r4, #0]
 8009bac:	2203      	movs	r2, #3
 8009bae:	4650      	mov	r0, sl
 8009bb0:	f7f6 fb4e 	bl	8000250 <memchr>
 8009bb4:	b140      	cbz	r0, 8009bc8 <_vfiprintf_r+0x198>
 8009bb6:	2340      	movs	r3, #64	; 0x40
 8009bb8:	eba0 000a 	sub.w	r0, r0, sl
 8009bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8009bc0:	9b04      	ldr	r3, [sp, #16]
 8009bc2:	4303      	orrs	r3, r0
 8009bc4:	3401      	adds	r4, #1
 8009bc6:	9304      	str	r3, [sp, #16]
 8009bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bcc:	482c      	ldr	r0, [pc, #176]	; (8009c80 <_vfiprintf_r+0x250>)
 8009bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd2:	2206      	movs	r2, #6
 8009bd4:	f7f6 fb3c 	bl	8000250 <memchr>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d03f      	beq.n	8009c5c <_vfiprintf_r+0x22c>
 8009bdc:	4b29      	ldr	r3, [pc, #164]	; (8009c84 <_vfiprintf_r+0x254>)
 8009bde:	bb1b      	cbnz	r3, 8009c28 <_vfiprintf_r+0x1f8>
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	3307      	adds	r3, #7
 8009be4:	f023 0307 	bic.w	r3, r3, #7
 8009be8:	3308      	adds	r3, #8
 8009bea:	9303      	str	r3, [sp, #12]
 8009bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bee:	443b      	add	r3, r7
 8009bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf2:	e767      	b.n	8009ac4 <_vfiprintf_r+0x94>
 8009bf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	e7a5      	b.n	8009b4a <_vfiprintf_r+0x11a>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	3401      	adds	r4, #1
 8009c02:	9305      	str	r3, [sp, #20]
 8009c04:	4619      	mov	r1, r3
 8009c06:	f04f 0c0a 	mov.w	ip, #10
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c10:	3a30      	subs	r2, #48	; 0x30
 8009c12:	2a09      	cmp	r2, #9
 8009c14:	d903      	bls.n	8009c1e <_vfiprintf_r+0x1ee>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0c5      	beq.n	8009ba6 <_vfiprintf_r+0x176>
 8009c1a:	9105      	str	r1, [sp, #20]
 8009c1c:	e7c3      	b.n	8009ba6 <_vfiprintf_r+0x176>
 8009c1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c22:	4604      	mov	r4, r0
 8009c24:	2301      	movs	r3, #1
 8009c26:	e7f0      	b.n	8009c0a <_vfiprintf_r+0x1da>
 8009c28:	ab03      	add	r3, sp, #12
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	462a      	mov	r2, r5
 8009c2e:	4b16      	ldr	r3, [pc, #88]	; (8009c88 <_vfiprintf_r+0x258>)
 8009c30:	a904      	add	r1, sp, #16
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7fc f934 	bl	8005ea0 <_printf_float>
 8009c38:	4607      	mov	r7, r0
 8009c3a:	1c78      	adds	r0, r7, #1
 8009c3c:	d1d6      	bne.n	8009bec <_vfiprintf_r+0x1bc>
 8009c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c40:	07d9      	lsls	r1, r3, #31
 8009c42:	d405      	bmi.n	8009c50 <_vfiprintf_r+0x220>
 8009c44:	89ab      	ldrh	r3, [r5, #12]
 8009c46:	059a      	lsls	r2, r3, #22
 8009c48:	d402      	bmi.n	8009c50 <_vfiprintf_r+0x220>
 8009c4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c4c:	f000 faa1 	bl	800a192 <__retarget_lock_release_recursive>
 8009c50:	89ab      	ldrh	r3, [r5, #12]
 8009c52:	065b      	lsls	r3, r3, #25
 8009c54:	f53f af12 	bmi.w	8009a7c <_vfiprintf_r+0x4c>
 8009c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c5a:	e711      	b.n	8009a80 <_vfiprintf_r+0x50>
 8009c5c:	ab03      	add	r3, sp, #12
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	462a      	mov	r2, r5
 8009c62:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <_vfiprintf_r+0x258>)
 8009c64:	a904      	add	r1, sp, #16
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7fc fba6 	bl	80063b8 <_printf_i>
 8009c6c:	e7e4      	b.n	8009c38 <_vfiprintf_r+0x208>
 8009c6e:	bf00      	nop
 8009c70:	0800a8ec 	.word	0x0800a8ec
 8009c74:	0800a90c 	.word	0x0800a90c
 8009c78:	0800a8cc 	.word	0x0800a8cc
 8009c7c:	0800a87c 	.word	0x0800a87c
 8009c80:	0800a886 	.word	0x0800a886
 8009c84:	08005ea1 	.word	0x08005ea1
 8009c88:	08009a0d 	.word	0x08009a0d
 8009c8c:	0800a882 	.word	0x0800a882

08009c90 <__swbuf_r>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	460e      	mov	r6, r1
 8009c94:	4614      	mov	r4, r2
 8009c96:	4605      	mov	r5, r0
 8009c98:	b118      	cbz	r0, 8009ca2 <__swbuf_r+0x12>
 8009c9a:	6983      	ldr	r3, [r0, #24]
 8009c9c:	b90b      	cbnz	r3, 8009ca2 <__swbuf_r+0x12>
 8009c9e:	f000 f9d9 	bl	800a054 <__sinit>
 8009ca2:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <__swbuf_r+0x98>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	d12b      	bne.n	8009d00 <__swbuf_r+0x70>
 8009ca8:	686c      	ldr	r4, [r5, #4]
 8009caa:	69a3      	ldr	r3, [r4, #24]
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	071a      	lsls	r2, r3, #28
 8009cb2:	d52f      	bpl.n	8009d14 <__swbuf_r+0x84>
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	b36b      	cbz	r3, 8009d14 <__swbuf_r+0x84>
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6963      	ldr	r3, [r4, #20]
 8009cc0:	b2f6      	uxtb	r6, r6
 8009cc2:	4283      	cmp	r3, r0
 8009cc4:	4637      	mov	r7, r6
 8009cc6:	dc04      	bgt.n	8009cd2 <__swbuf_r+0x42>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 f92e 	bl	8009f2c <_fflush_r>
 8009cd0:	bb30      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	6022      	str	r2, [r4, #0]
 8009cde:	701e      	strb	r6, [r3, #0]
 8009ce0:	6963      	ldr	r3, [r4, #20]
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	4283      	cmp	r3, r0
 8009ce6:	d004      	beq.n	8009cf2 <__swbuf_r+0x62>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	d506      	bpl.n	8009cfc <__swbuf_r+0x6c>
 8009cee:	2e0a      	cmp	r6, #10
 8009cf0:	d104      	bne.n	8009cfc <__swbuf_r+0x6c>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 f919 	bl	8009f2c <_fflush_r>
 8009cfa:	b988      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <__swbuf_r+0x9c>)
 8009d02:	429c      	cmp	r4, r3
 8009d04:	d101      	bne.n	8009d0a <__swbuf_r+0x7a>
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	e7cf      	b.n	8009caa <__swbuf_r+0x1a>
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <__swbuf_r+0xa0>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	bf08      	it	eq
 8009d10:	68ec      	ldreq	r4, [r5, #12]
 8009d12:	e7ca      	b.n	8009caa <__swbuf_r+0x1a>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f80c 	bl	8009d34 <__swsetup_r>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d0cb      	beq.n	8009cb8 <__swbuf_r+0x28>
 8009d20:	f04f 37ff 	mov.w	r7, #4294967295
 8009d24:	e7ea      	b.n	8009cfc <__swbuf_r+0x6c>
 8009d26:	bf00      	nop
 8009d28:	0800a8ec 	.word	0x0800a8ec
 8009d2c:	0800a90c 	.word	0x0800a90c
 8009d30:	0800a8cc 	.word	0x0800a8cc

08009d34 <__swsetup_r>:
 8009d34:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <__swsetup_r+0xcc>)
 8009d36:	b570      	push	{r4, r5, r6, lr}
 8009d38:	681d      	ldr	r5, [r3, #0]
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	b125      	cbz	r5, 8009d4a <__swsetup_r+0x16>
 8009d40:	69ab      	ldr	r3, [r5, #24]
 8009d42:	b913      	cbnz	r3, 8009d4a <__swsetup_r+0x16>
 8009d44:	4628      	mov	r0, r5
 8009d46:	f000 f985 	bl	800a054 <__sinit>
 8009d4a:	4b2e      	ldr	r3, [pc, #184]	; (8009e04 <__swsetup_r+0xd0>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	d10f      	bne.n	8009d70 <__swsetup_r+0x3c>
 8009d50:	686c      	ldr	r4, [r5, #4]
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d58:	0719      	lsls	r1, r3, #28
 8009d5a:	d42c      	bmi.n	8009db6 <__swsetup_r+0x82>
 8009d5c:	06dd      	lsls	r5, r3, #27
 8009d5e:	d411      	bmi.n	8009d84 <__swsetup_r+0x50>
 8009d60:	2309      	movs	r3, #9
 8009d62:	6033      	str	r3, [r6, #0]
 8009d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6e:	e03e      	b.n	8009dee <__swsetup_r+0xba>
 8009d70:	4b25      	ldr	r3, [pc, #148]	; (8009e08 <__swsetup_r+0xd4>)
 8009d72:	429c      	cmp	r4, r3
 8009d74:	d101      	bne.n	8009d7a <__swsetup_r+0x46>
 8009d76:	68ac      	ldr	r4, [r5, #8]
 8009d78:	e7eb      	b.n	8009d52 <__swsetup_r+0x1e>
 8009d7a:	4b24      	ldr	r3, [pc, #144]	; (8009e0c <__swsetup_r+0xd8>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	bf08      	it	eq
 8009d80:	68ec      	ldreq	r4, [r5, #12]
 8009d82:	e7e6      	b.n	8009d52 <__swsetup_r+0x1e>
 8009d84:	0758      	lsls	r0, r3, #29
 8009d86:	d512      	bpl.n	8009dae <__swsetup_r+0x7a>
 8009d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d8a:	b141      	cbz	r1, 8009d9e <__swsetup_r+0x6a>
 8009d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d90:	4299      	cmp	r1, r3
 8009d92:	d002      	beq.n	8009d9a <__swsetup_r+0x66>
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff fb25 	bl	80093e4 <_free_r>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	2300      	movs	r3, #0
 8009da8:	6063      	str	r3, [r4, #4]
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	f043 0308 	orr.w	r3, r3, #8
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	b94b      	cbnz	r3, 8009dce <__swsetup_r+0x9a>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dc4:	d003      	beq.n	8009dce <__swsetup_r+0x9a>
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f000 fa09 	bl	800a1e0 <__smakebuf_r>
 8009dce:	89a0      	ldrh	r0, [r4, #12]
 8009dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dd4:	f010 0301 	ands.w	r3, r0, #1
 8009dd8:	d00a      	beq.n	8009df0 <__swsetup_r+0xbc>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60a3      	str	r3, [r4, #8]
 8009dde:	6963      	ldr	r3, [r4, #20]
 8009de0:	425b      	negs	r3, r3
 8009de2:	61a3      	str	r3, [r4, #24]
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	b943      	cbnz	r3, 8009dfa <__swsetup_r+0xc6>
 8009de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dec:	d1ba      	bne.n	8009d64 <__swsetup_r+0x30>
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	0781      	lsls	r1, r0, #30
 8009df2:	bf58      	it	pl
 8009df4:	6963      	ldrpl	r3, [r4, #20]
 8009df6:	60a3      	str	r3, [r4, #8]
 8009df8:	e7f4      	b.n	8009de4 <__swsetup_r+0xb0>
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	e7f7      	b.n	8009dee <__swsetup_r+0xba>
 8009dfe:	bf00      	nop
 8009e00:	2000000c 	.word	0x2000000c
 8009e04:	0800a8ec 	.word	0x0800a8ec
 8009e08:	0800a90c 	.word	0x0800a90c
 8009e0c:	0800a8cc 	.word	0x0800a8cc

08009e10 <abort>:
 8009e10:	b508      	push	{r3, lr}
 8009e12:	2006      	movs	r0, #6
 8009e14:	f000 fa54 	bl	800a2c0 <raise>
 8009e18:	2001      	movs	r0, #1
 8009e1a:	f7f7 fb63 	bl	80014e4 <_exit>
	...

08009e20 <__sflush_r>:
 8009e20:	898a      	ldrh	r2, [r1, #12]
 8009e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e26:	4605      	mov	r5, r0
 8009e28:	0710      	lsls	r0, r2, #28
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	d458      	bmi.n	8009ee0 <__sflush_r+0xc0>
 8009e2e:	684b      	ldr	r3, [r1, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	dc05      	bgt.n	8009e40 <__sflush_r+0x20>
 8009e34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dc02      	bgt.n	8009e40 <__sflush_r+0x20>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e42:	2e00      	cmp	r6, #0
 8009e44:	d0f9      	beq.n	8009e3a <__sflush_r+0x1a>
 8009e46:	2300      	movs	r3, #0
 8009e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e4c:	682f      	ldr	r7, [r5, #0]
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	d032      	beq.n	8009eb8 <__sflush_r+0x98>
 8009e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	075a      	lsls	r2, r3, #29
 8009e58:	d505      	bpl.n	8009e66 <__sflush_r+0x46>
 8009e5a:	6863      	ldr	r3, [r4, #4]
 8009e5c:	1ac0      	subs	r0, r0, r3
 8009e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e60:	b10b      	cbz	r3, 8009e66 <__sflush_r+0x46>
 8009e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e64:	1ac0      	subs	r0, r0, r3
 8009e66:	2300      	movs	r3, #0
 8009e68:	4602      	mov	r2, r0
 8009e6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e6c:	6a21      	ldr	r1, [r4, #32]
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b0      	blx	r6
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	d106      	bne.n	8009e86 <__sflush_r+0x66>
 8009e78:	6829      	ldr	r1, [r5, #0]
 8009e7a:	291d      	cmp	r1, #29
 8009e7c:	d82c      	bhi.n	8009ed8 <__sflush_r+0xb8>
 8009e7e:	4a2a      	ldr	r2, [pc, #168]	; (8009f28 <__sflush_r+0x108>)
 8009e80:	40ca      	lsrs	r2, r1
 8009e82:	07d6      	lsls	r6, r2, #31
 8009e84:	d528      	bpl.n	8009ed8 <__sflush_r+0xb8>
 8009e86:	2200      	movs	r2, #0
 8009e88:	6062      	str	r2, [r4, #4]
 8009e8a:	04d9      	lsls	r1, r3, #19
 8009e8c:	6922      	ldr	r2, [r4, #16]
 8009e8e:	6022      	str	r2, [r4, #0]
 8009e90:	d504      	bpl.n	8009e9c <__sflush_r+0x7c>
 8009e92:	1c42      	adds	r2, r0, #1
 8009e94:	d101      	bne.n	8009e9a <__sflush_r+0x7a>
 8009e96:	682b      	ldr	r3, [r5, #0]
 8009e98:	b903      	cbnz	r3, 8009e9c <__sflush_r+0x7c>
 8009e9a:	6560      	str	r0, [r4, #84]	; 0x54
 8009e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e9e:	602f      	str	r7, [r5, #0]
 8009ea0:	2900      	cmp	r1, #0
 8009ea2:	d0ca      	beq.n	8009e3a <__sflush_r+0x1a>
 8009ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d002      	beq.n	8009eb2 <__sflush_r+0x92>
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff fa99 	bl	80093e4 <_free_r>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	6360      	str	r0, [r4, #52]	; 0x34
 8009eb6:	e7c1      	b.n	8009e3c <__sflush_r+0x1c>
 8009eb8:	6a21      	ldr	r1, [r4, #32]
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b0      	blx	r6
 8009ec0:	1c41      	adds	r1, r0, #1
 8009ec2:	d1c7      	bne.n	8009e54 <__sflush_r+0x34>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0c4      	beq.n	8009e54 <__sflush_r+0x34>
 8009eca:	2b1d      	cmp	r3, #29
 8009ecc:	d001      	beq.n	8009ed2 <__sflush_r+0xb2>
 8009ece:	2b16      	cmp	r3, #22
 8009ed0:	d101      	bne.n	8009ed6 <__sflush_r+0xb6>
 8009ed2:	602f      	str	r7, [r5, #0]
 8009ed4:	e7b1      	b.n	8009e3a <__sflush_r+0x1a>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009edc:	81a3      	strh	r3, [r4, #12]
 8009ede:	e7ad      	b.n	8009e3c <__sflush_r+0x1c>
 8009ee0:	690f      	ldr	r7, [r1, #16]
 8009ee2:	2f00      	cmp	r7, #0
 8009ee4:	d0a9      	beq.n	8009e3a <__sflush_r+0x1a>
 8009ee6:	0793      	lsls	r3, r2, #30
 8009ee8:	680e      	ldr	r6, [r1, #0]
 8009eea:	bf08      	it	eq
 8009eec:	694b      	ldreq	r3, [r1, #20]
 8009eee:	600f      	str	r7, [r1, #0]
 8009ef0:	bf18      	it	ne
 8009ef2:	2300      	movne	r3, #0
 8009ef4:	eba6 0807 	sub.w	r8, r6, r7
 8009ef8:	608b      	str	r3, [r1, #8]
 8009efa:	f1b8 0f00 	cmp.w	r8, #0
 8009efe:	dd9c      	ble.n	8009e3a <__sflush_r+0x1a>
 8009f00:	6a21      	ldr	r1, [r4, #32]
 8009f02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f04:	4643      	mov	r3, r8
 8009f06:	463a      	mov	r2, r7
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b0      	blx	r6
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	dc06      	bgt.n	8009f1e <__sflush_r+0xfe>
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1c:	e78e      	b.n	8009e3c <__sflush_r+0x1c>
 8009f1e:	4407      	add	r7, r0
 8009f20:	eba8 0800 	sub.w	r8, r8, r0
 8009f24:	e7e9      	b.n	8009efa <__sflush_r+0xda>
 8009f26:	bf00      	nop
 8009f28:	20400001 	.word	0x20400001

08009f2c <_fflush_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	690b      	ldr	r3, [r1, #16]
 8009f30:	4605      	mov	r5, r0
 8009f32:	460c      	mov	r4, r1
 8009f34:	b913      	cbnz	r3, 8009f3c <_fflush_r+0x10>
 8009f36:	2500      	movs	r5, #0
 8009f38:	4628      	mov	r0, r5
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	b118      	cbz	r0, 8009f46 <_fflush_r+0x1a>
 8009f3e:	6983      	ldr	r3, [r0, #24]
 8009f40:	b90b      	cbnz	r3, 8009f46 <_fflush_r+0x1a>
 8009f42:	f000 f887 	bl	800a054 <__sinit>
 8009f46:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <_fflush_r+0x6c>)
 8009f48:	429c      	cmp	r4, r3
 8009f4a:	d11b      	bne.n	8009f84 <_fflush_r+0x58>
 8009f4c:	686c      	ldr	r4, [r5, #4]
 8009f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0ef      	beq.n	8009f36 <_fflush_r+0xa>
 8009f56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f58:	07d0      	lsls	r0, r2, #31
 8009f5a:	d404      	bmi.n	8009f66 <_fflush_r+0x3a>
 8009f5c:	0599      	lsls	r1, r3, #22
 8009f5e:	d402      	bmi.n	8009f66 <_fflush_r+0x3a>
 8009f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f62:	f000 f915 	bl	800a190 <__retarget_lock_acquire_recursive>
 8009f66:	4628      	mov	r0, r5
 8009f68:	4621      	mov	r1, r4
 8009f6a:	f7ff ff59 	bl	8009e20 <__sflush_r>
 8009f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f70:	07da      	lsls	r2, r3, #31
 8009f72:	4605      	mov	r5, r0
 8009f74:	d4e0      	bmi.n	8009f38 <_fflush_r+0xc>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	059b      	lsls	r3, r3, #22
 8009f7a:	d4dd      	bmi.n	8009f38 <_fflush_r+0xc>
 8009f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f7e:	f000 f908 	bl	800a192 <__retarget_lock_release_recursive>
 8009f82:	e7d9      	b.n	8009f38 <_fflush_r+0xc>
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <_fflush_r+0x70>)
 8009f86:	429c      	cmp	r4, r3
 8009f88:	d101      	bne.n	8009f8e <_fflush_r+0x62>
 8009f8a:	68ac      	ldr	r4, [r5, #8]
 8009f8c:	e7df      	b.n	8009f4e <_fflush_r+0x22>
 8009f8e:	4b04      	ldr	r3, [pc, #16]	; (8009fa0 <_fflush_r+0x74>)
 8009f90:	429c      	cmp	r4, r3
 8009f92:	bf08      	it	eq
 8009f94:	68ec      	ldreq	r4, [r5, #12]
 8009f96:	e7da      	b.n	8009f4e <_fflush_r+0x22>
 8009f98:	0800a8ec 	.word	0x0800a8ec
 8009f9c:	0800a90c 	.word	0x0800a90c
 8009fa0:	0800a8cc 	.word	0x0800a8cc

08009fa4 <std>:
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	b510      	push	{r4, lr}
 8009fa8:	4604      	mov	r4, r0
 8009faa:	e9c0 3300 	strd	r3, r3, [r0]
 8009fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fb2:	6083      	str	r3, [r0, #8]
 8009fb4:	8181      	strh	r1, [r0, #12]
 8009fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8009fb8:	81c2      	strh	r2, [r0, #14]
 8009fba:	6183      	str	r3, [r0, #24]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	2208      	movs	r2, #8
 8009fc0:	305c      	adds	r0, #92	; 0x5c
 8009fc2:	f7fb fed5 	bl	8005d70 <memset>
 8009fc6:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <std+0x38>)
 8009fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8009fca:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <std+0x3c>)
 8009fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fce:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <std+0x40>)
 8009fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fd2:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <std+0x44>)
 8009fd4:	6224      	str	r4, [r4, #32]
 8009fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8009fd8:	bd10      	pop	{r4, pc}
 8009fda:	bf00      	nop
 8009fdc:	0800a2f9 	.word	0x0800a2f9
 8009fe0:	0800a31b 	.word	0x0800a31b
 8009fe4:	0800a353 	.word	0x0800a353
 8009fe8:	0800a377 	.word	0x0800a377

08009fec <_cleanup_r>:
 8009fec:	4901      	ldr	r1, [pc, #4]	; (8009ff4 <_cleanup_r+0x8>)
 8009fee:	f000 b8af 	b.w	800a150 <_fwalk_reent>
 8009ff2:	bf00      	nop
 8009ff4:	08009f2d 	.word	0x08009f2d

08009ff8 <__sfmoreglue>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	2268      	movs	r2, #104	; 0x68
 8009ffc:	1e4d      	subs	r5, r1, #1
 8009ffe:	4355      	muls	r5, r2
 800a000:	460e      	mov	r6, r1
 800a002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a006:	f7ff fa59 	bl	80094bc <_malloc_r>
 800a00a:	4604      	mov	r4, r0
 800a00c:	b140      	cbz	r0, 800a020 <__sfmoreglue+0x28>
 800a00e:	2100      	movs	r1, #0
 800a010:	e9c0 1600 	strd	r1, r6, [r0]
 800a014:	300c      	adds	r0, #12
 800a016:	60a0      	str	r0, [r4, #8]
 800a018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a01c:	f7fb fea8 	bl	8005d70 <memset>
 800a020:	4620      	mov	r0, r4
 800a022:	bd70      	pop	{r4, r5, r6, pc}

0800a024 <__sfp_lock_acquire>:
 800a024:	4801      	ldr	r0, [pc, #4]	; (800a02c <__sfp_lock_acquire+0x8>)
 800a026:	f000 b8b3 	b.w	800a190 <__retarget_lock_acquire_recursive>
 800a02a:	bf00      	nop
 800a02c:	200003bd 	.word	0x200003bd

0800a030 <__sfp_lock_release>:
 800a030:	4801      	ldr	r0, [pc, #4]	; (800a038 <__sfp_lock_release+0x8>)
 800a032:	f000 b8ae 	b.w	800a192 <__retarget_lock_release_recursive>
 800a036:	bf00      	nop
 800a038:	200003bd 	.word	0x200003bd

0800a03c <__sinit_lock_acquire>:
 800a03c:	4801      	ldr	r0, [pc, #4]	; (800a044 <__sinit_lock_acquire+0x8>)
 800a03e:	f000 b8a7 	b.w	800a190 <__retarget_lock_acquire_recursive>
 800a042:	bf00      	nop
 800a044:	200003be 	.word	0x200003be

0800a048 <__sinit_lock_release>:
 800a048:	4801      	ldr	r0, [pc, #4]	; (800a050 <__sinit_lock_release+0x8>)
 800a04a:	f000 b8a2 	b.w	800a192 <__retarget_lock_release_recursive>
 800a04e:	bf00      	nop
 800a050:	200003be 	.word	0x200003be

0800a054 <__sinit>:
 800a054:	b510      	push	{r4, lr}
 800a056:	4604      	mov	r4, r0
 800a058:	f7ff fff0 	bl	800a03c <__sinit_lock_acquire>
 800a05c:	69a3      	ldr	r3, [r4, #24]
 800a05e:	b11b      	cbz	r3, 800a068 <__sinit+0x14>
 800a060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a064:	f7ff bff0 	b.w	800a048 <__sinit_lock_release>
 800a068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a06c:	6523      	str	r3, [r4, #80]	; 0x50
 800a06e:	4b13      	ldr	r3, [pc, #76]	; (800a0bc <__sinit+0x68>)
 800a070:	4a13      	ldr	r2, [pc, #76]	; (800a0c0 <__sinit+0x6c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	62a2      	str	r2, [r4, #40]	; 0x28
 800a076:	42a3      	cmp	r3, r4
 800a078:	bf04      	itt	eq
 800a07a:	2301      	moveq	r3, #1
 800a07c:	61a3      	streq	r3, [r4, #24]
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 f820 	bl	800a0c4 <__sfp>
 800a084:	6060      	str	r0, [r4, #4]
 800a086:	4620      	mov	r0, r4
 800a088:	f000 f81c 	bl	800a0c4 <__sfp>
 800a08c:	60a0      	str	r0, [r4, #8]
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 f818 	bl	800a0c4 <__sfp>
 800a094:	2200      	movs	r2, #0
 800a096:	60e0      	str	r0, [r4, #12]
 800a098:	2104      	movs	r1, #4
 800a09a:	6860      	ldr	r0, [r4, #4]
 800a09c:	f7ff ff82 	bl	8009fa4 <std>
 800a0a0:	68a0      	ldr	r0, [r4, #8]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	2109      	movs	r1, #9
 800a0a6:	f7ff ff7d 	bl	8009fa4 <std>
 800a0aa:	68e0      	ldr	r0, [r4, #12]
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	2112      	movs	r1, #18
 800a0b0:	f7ff ff78 	bl	8009fa4 <std>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	61a3      	str	r3, [r4, #24]
 800a0b8:	e7d2      	b.n	800a060 <__sinit+0xc>
 800a0ba:	bf00      	nop
 800a0bc:	0800a488 	.word	0x0800a488
 800a0c0:	08009fed 	.word	0x08009fed

0800a0c4 <__sfp>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	f7ff ffac 	bl	800a024 <__sfp_lock_acquire>
 800a0cc:	4b1e      	ldr	r3, [pc, #120]	; (800a148 <__sfp+0x84>)
 800a0ce:	681e      	ldr	r6, [r3, #0]
 800a0d0:	69b3      	ldr	r3, [r6, #24]
 800a0d2:	b913      	cbnz	r3, 800a0da <__sfp+0x16>
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f7ff ffbd 	bl	800a054 <__sinit>
 800a0da:	3648      	adds	r6, #72	; 0x48
 800a0dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	d503      	bpl.n	800a0ec <__sfp+0x28>
 800a0e4:	6833      	ldr	r3, [r6, #0]
 800a0e6:	b30b      	cbz	r3, 800a12c <__sfp+0x68>
 800a0e8:	6836      	ldr	r6, [r6, #0]
 800a0ea:	e7f7      	b.n	800a0dc <__sfp+0x18>
 800a0ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0f0:	b9d5      	cbnz	r5, 800a128 <__sfp+0x64>
 800a0f2:	4b16      	ldr	r3, [pc, #88]	; (800a14c <__sfp+0x88>)
 800a0f4:	60e3      	str	r3, [r4, #12]
 800a0f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0fa:	6665      	str	r5, [r4, #100]	; 0x64
 800a0fc:	f000 f847 	bl	800a18e <__retarget_lock_init_recursive>
 800a100:	f7ff ff96 	bl	800a030 <__sfp_lock_release>
 800a104:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a108:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a10c:	6025      	str	r5, [r4, #0]
 800a10e:	61a5      	str	r5, [r4, #24]
 800a110:	2208      	movs	r2, #8
 800a112:	4629      	mov	r1, r5
 800a114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a118:	f7fb fe2a 	bl	8005d70 <memset>
 800a11c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a124:	4620      	mov	r0, r4
 800a126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a128:	3468      	adds	r4, #104	; 0x68
 800a12a:	e7d9      	b.n	800a0e0 <__sfp+0x1c>
 800a12c:	2104      	movs	r1, #4
 800a12e:	4638      	mov	r0, r7
 800a130:	f7ff ff62 	bl	8009ff8 <__sfmoreglue>
 800a134:	4604      	mov	r4, r0
 800a136:	6030      	str	r0, [r6, #0]
 800a138:	2800      	cmp	r0, #0
 800a13a:	d1d5      	bne.n	800a0e8 <__sfp+0x24>
 800a13c:	f7ff ff78 	bl	800a030 <__sfp_lock_release>
 800a140:	230c      	movs	r3, #12
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	e7ee      	b.n	800a124 <__sfp+0x60>
 800a146:	bf00      	nop
 800a148:	0800a488 	.word	0x0800a488
 800a14c:	ffff0001 	.word	0xffff0001

0800a150 <_fwalk_reent>:
 800a150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a154:	4606      	mov	r6, r0
 800a156:	4688      	mov	r8, r1
 800a158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a15c:	2700      	movs	r7, #0
 800a15e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a162:	f1b9 0901 	subs.w	r9, r9, #1
 800a166:	d505      	bpl.n	800a174 <_fwalk_reent+0x24>
 800a168:	6824      	ldr	r4, [r4, #0]
 800a16a:	2c00      	cmp	r4, #0
 800a16c:	d1f7      	bne.n	800a15e <_fwalk_reent+0xe>
 800a16e:	4638      	mov	r0, r7
 800a170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a174:	89ab      	ldrh	r3, [r5, #12]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d907      	bls.n	800a18a <_fwalk_reent+0x3a>
 800a17a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a17e:	3301      	adds	r3, #1
 800a180:	d003      	beq.n	800a18a <_fwalk_reent+0x3a>
 800a182:	4629      	mov	r1, r5
 800a184:	4630      	mov	r0, r6
 800a186:	47c0      	blx	r8
 800a188:	4307      	orrs	r7, r0
 800a18a:	3568      	adds	r5, #104	; 0x68
 800a18c:	e7e9      	b.n	800a162 <_fwalk_reent+0x12>

0800a18e <__retarget_lock_init_recursive>:
 800a18e:	4770      	bx	lr

0800a190 <__retarget_lock_acquire_recursive>:
 800a190:	4770      	bx	lr

0800a192 <__retarget_lock_release_recursive>:
 800a192:	4770      	bx	lr

0800a194 <__swhatbuf_r>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	460e      	mov	r6, r1
 800a198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a19c:	2900      	cmp	r1, #0
 800a19e:	b096      	sub	sp, #88	; 0x58
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	461d      	mov	r5, r3
 800a1a4:	da08      	bge.n	800a1b8 <__swhatbuf_r+0x24>
 800a1a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	602a      	str	r2, [r5, #0]
 800a1ae:	061a      	lsls	r2, r3, #24
 800a1b0:	d410      	bmi.n	800a1d4 <__swhatbuf_r+0x40>
 800a1b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1b6:	e00e      	b.n	800a1d6 <__swhatbuf_r+0x42>
 800a1b8:	466a      	mov	r2, sp
 800a1ba:	f000 f903 	bl	800a3c4 <_fstat_r>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	dbf1      	blt.n	800a1a6 <__swhatbuf_r+0x12>
 800a1c2:	9a01      	ldr	r2, [sp, #4]
 800a1c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1cc:	425a      	negs	r2, r3
 800a1ce:	415a      	adcs	r2, r3
 800a1d0:	602a      	str	r2, [r5, #0]
 800a1d2:	e7ee      	b.n	800a1b2 <__swhatbuf_r+0x1e>
 800a1d4:	2340      	movs	r3, #64	; 0x40
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	b016      	add	sp, #88	; 0x58
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1e0 <__smakebuf_r>:
 800a1e0:	898b      	ldrh	r3, [r1, #12]
 800a1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1e4:	079d      	lsls	r5, r3, #30
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	d507      	bpl.n	800a1fc <__smakebuf_r+0x1c>
 800a1ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	6123      	str	r3, [r4, #16]
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	6163      	str	r3, [r4, #20]
 800a1f8:	b002      	add	sp, #8
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}
 800a1fc:	ab01      	add	r3, sp, #4
 800a1fe:	466a      	mov	r2, sp
 800a200:	f7ff ffc8 	bl	800a194 <__swhatbuf_r>
 800a204:	9900      	ldr	r1, [sp, #0]
 800a206:	4605      	mov	r5, r0
 800a208:	4630      	mov	r0, r6
 800a20a:	f7ff f957 	bl	80094bc <_malloc_r>
 800a20e:	b948      	cbnz	r0, 800a224 <__smakebuf_r+0x44>
 800a210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a214:	059a      	lsls	r2, r3, #22
 800a216:	d4ef      	bmi.n	800a1f8 <__smakebuf_r+0x18>
 800a218:	f023 0303 	bic.w	r3, r3, #3
 800a21c:	f043 0302 	orr.w	r3, r3, #2
 800a220:	81a3      	strh	r3, [r4, #12]
 800a222:	e7e3      	b.n	800a1ec <__smakebuf_r+0xc>
 800a224:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <__smakebuf_r+0x7c>)
 800a226:	62b3      	str	r3, [r6, #40]	; 0x28
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	6020      	str	r0, [r4, #0]
 800a22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a230:	81a3      	strh	r3, [r4, #12]
 800a232:	9b00      	ldr	r3, [sp, #0]
 800a234:	6163      	str	r3, [r4, #20]
 800a236:	9b01      	ldr	r3, [sp, #4]
 800a238:	6120      	str	r0, [r4, #16]
 800a23a:	b15b      	cbz	r3, 800a254 <__smakebuf_r+0x74>
 800a23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a240:	4630      	mov	r0, r6
 800a242:	f000 f8d1 	bl	800a3e8 <_isatty_r>
 800a246:	b128      	cbz	r0, 800a254 <__smakebuf_r+0x74>
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	f023 0303 	bic.w	r3, r3, #3
 800a24e:	f043 0301 	orr.w	r3, r3, #1
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	89a0      	ldrh	r0, [r4, #12]
 800a256:	4305      	orrs	r5, r0
 800a258:	81a5      	strh	r5, [r4, #12]
 800a25a:	e7cd      	b.n	800a1f8 <__smakebuf_r+0x18>
 800a25c:	08009fed 	.word	0x08009fed

0800a260 <_malloc_usable_size_r>:
 800a260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a264:	1f18      	subs	r0, r3, #4
 800a266:	2b00      	cmp	r3, #0
 800a268:	bfbc      	itt	lt
 800a26a:	580b      	ldrlt	r3, [r1, r0]
 800a26c:	18c0      	addlt	r0, r0, r3
 800a26e:	4770      	bx	lr

0800a270 <_raise_r>:
 800a270:	291f      	cmp	r1, #31
 800a272:	b538      	push	{r3, r4, r5, lr}
 800a274:	4604      	mov	r4, r0
 800a276:	460d      	mov	r5, r1
 800a278:	d904      	bls.n	800a284 <_raise_r+0x14>
 800a27a:	2316      	movs	r3, #22
 800a27c:	6003      	str	r3, [r0, #0]
 800a27e:	f04f 30ff 	mov.w	r0, #4294967295
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a286:	b112      	cbz	r2, 800a28e <_raise_r+0x1e>
 800a288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a28c:	b94b      	cbnz	r3, 800a2a2 <_raise_r+0x32>
 800a28e:	4620      	mov	r0, r4
 800a290:	f000 f830 	bl	800a2f4 <_getpid_r>
 800a294:	462a      	mov	r2, r5
 800a296:	4601      	mov	r1, r0
 800a298:	4620      	mov	r0, r4
 800a29a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a29e:	f000 b817 	b.w	800a2d0 <_kill_r>
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d00a      	beq.n	800a2bc <_raise_r+0x4c>
 800a2a6:	1c59      	adds	r1, r3, #1
 800a2a8:	d103      	bne.n	800a2b2 <_raise_r+0x42>
 800a2aa:	2316      	movs	r3, #22
 800a2ac:	6003      	str	r3, [r0, #0]
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	e7e7      	b.n	800a282 <_raise_r+0x12>
 800a2b2:	2400      	movs	r4, #0
 800a2b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	4798      	blx	r3
 800a2bc:	2000      	movs	r0, #0
 800a2be:	e7e0      	b.n	800a282 <_raise_r+0x12>

0800a2c0 <raise>:
 800a2c0:	4b02      	ldr	r3, [pc, #8]	; (800a2cc <raise+0xc>)
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	6818      	ldr	r0, [r3, #0]
 800a2c6:	f7ff bfd3 	b.w	800a270 <_raise_r>
 800a2ca:	bf00      	nop
 800a2cc:	2000000c 	.word	0x2000000c

0800a2d0 <_kill_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d07      	ldr	r5, [pc, #28]	; (800a2f0 <_kill_r+0x20>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	4611      	mov	r1, r2
 800a2dc:	602b      	str	r3, [r5, #0]
 800a2de:	f7f7 f8f1 	bl	80014c4 <_kill>
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	d102      	bne.n	800a2ec <_kill_r+0x1c>
 800a2e6:	682b      	ldr	r3, [r5, #0]
 800a2e8:	b103      	cbz	r3, 800a2ec <_kill_r+0x1c>
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	bd38      	pop	{r3, r4, r5, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200003b8 	.word	0x200003b8

0800a2f4 <_getpid_r>:
 800a2f4:	f7f7 b8de 	b.w	80014b4 <_getpid>

0800a2f8 <__sread>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a300:	f000 f894 	bl	800a42c <_read_r>
 800a304:	2800      	cmp	r0, #0
 800a306:	bfab      	itete	ge
 800a308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a30a:	89a3      	ldrhlt	r3, [r4, #12]
 800a30c:	181b      	addge	r3, r3, r0
 800a30e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a312:	bfac      	ite	ge
 800a314:	6563      	strge	r3, [r4, #84]	; 0x54
 800a316:	81a3      	strhlt	r3, [r4, #12]
 800a318:	bd10      	pop	{r4, pc}

0800a31a <__swrite>:
 800a31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31e:	461f      	mov	r7, r3
 800a320:	898b      	ldrh	r3, [r1, #12]
 800a322:	05db      	lsls	r3, r3, #23
 800a324:	4605      	mov	r5, r0
 800a326:	460c      	mov	r4, r1
 800a328:	4616      	mov	r6, r2
 800a32a:	d505      	bpl.n	800a338 <__swrite+0x1e>
 800a32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a330:	2302      	movs	r3, #2
 800a332:	2200      	movs	r2, #0
 800a334:	f000 f868 	bl	800a408 <_lseek_r>
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a33e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	4632      	mov	r2, r6
 800a346:	463b      	mov	r3, r7
 800a348:	4628      	mov	r0, r5
 800a34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a34e:	f000 b817 	b.w	800a380 <_write_r>

0800a352 <__sseek>:
 800a352:	b510      	push	{r4, lr}
 800a354:	460c      	mov	r4, r1
 800a356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35a:	f000 f855 	bl	800a408 <_lseek_r>
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	bf15      	itete	ne
 800a364:	6560      	strne	r0, [r4, #84]	; 0x54
 800a366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a36a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a36e:	81a3      	strheq	r3, [r4, #12]
 800a370:	bf18      	it	ne
 800a372:	81a3      	strhne	r3, [r4, #12]
 800a374:	bd10      	pop	{r4, pc}

0800a376 <__sclose>:
 800a376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a37a:	f000 b813 	b.w	800a3a4 <_close_r>
	...

0800a380 <_write_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d07      	ldr	r5, [pc, #28]	; (800a3a0 <_write_r+0x20>)
 800a384:	4604      	mov	r4, r0
 800a386:	4608      	mov	r0, r1
 800a388:	4611      	mov	r1, r2
 800a38a:	2200      	movs	r2, #0
 800a38c:	602a      	str	r2, [r5, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	f7f7 f8cf 	bl	8001532 <_write>
 800a394:	1c43      	adds	r3, r0, #1
 800a396:	d102      	bne.n	800a39e <_write_r+0x1e>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	b103      	cbz	r3, 800a39e <_write_r+0x1e>
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	200003b8 	.word	0x200003b8

0800a3a4 <_close_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	4d06      	ldr	r5, [pc, #24]	; (800a3c0 <_close_r+0x1c>)
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	602b      	str	r3, [r5, #0]
 800a3b0:	f7f7 f8db 	bl	800156a <_close>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d102      	bne.n	800a3be <_close_r+0x1a>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <_close_r+0x1a>
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	200003b8 	.word	0x200003b8

0800a3c4 <_fstat_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d07      	ldr	r5, [pc, #28]	; (800a3e4 <_fstat_r+0x20>)
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	602b      	str	r3, [r5, #0]
 800a3d2:	f7f7 f8d6 	bl	8001582 <_fstat>
 800a3d6:	1c43      	adds	r3, r0, #1
 800a3d8:	d102      	bne.n	800a3e0 <_fstat_r+0x1c>
 800a3da:	682b      	ldr	r3, [r5, #0]
 800a3dc:	b103      	cbz	r3, 800a3e0 <_fstat_r+0x1c>
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	bd38      	pop	{r3, r4, r5, pc}
 800a3e2:	bf00      	nop
 800a3e4:	200003b8 	.word	0x200003b8

0800a3e8 <_isatty_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4d06      	ldr	r5, [pc, #24]	; (800a404 <_isatty_r+0x1c>)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	f7f7 f8d5 	bl	80015a2 <_isatty>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_isatty_r+0x1a>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_isatty_r+0x1a>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	200003b8 	.word	0x200003b8

0800a408 <_lseek_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d07      	ldr	r5, [pc, #28]	; (800a428 <_lseek_r+0x20>)
 800a40c:	4604      	mov	r4, r0
 800a40e:	4608      	mov	r0, r1
 800a410:	4611      	mov	r1, r2
 800a412:	2200      	movs	r2, #0
 800a414:	602a      	str	r2, [r5, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	f7f7 f8ce 	bl	80015b8 <_lseek>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_lseek_r+0x1e>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_lseek_r+0x1e>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	200003b8 	.word	0x200003b8

0800a42c <_read_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4d07      	ldr	r5, [pc, #28]	; (800a44c <_read_r+0x20>)
 800a430:	4604      	mov	r4, r0
 800a432:	4608      	mov	r0, r1
 800a434:	4611      	mov	r1, r2
 800a436:	2200      	movs	r2, #0
 800a438:	602a      	str	r2, [r5, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	f7f7 f85c 	bl	80014f8 <_read>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	d102      	bne.n	800a44a <_read_r+0x1e>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	b103      	cbz	r3, 800a44a <_read_r+0x1e>
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	bd38      	pop	{r3, r4, r5, pc}
 800a44c:	200003b8 	.word	0x200003b8

0800a450 <_init>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	bf00      	nop
 800a454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a456:	bc08      	pop	{r3}
 800a458:	469e      	mov	lr, r3
 800a45a:	4770      	bx	lr

0800a45c <_fini>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	bf00      	nop
 800a460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a462:	bc08      	pop	{r3}
 800a464:	469e      	mov	lr, r3
 800a466:	4770      	bx	lr
